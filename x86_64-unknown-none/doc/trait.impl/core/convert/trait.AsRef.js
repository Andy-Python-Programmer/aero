(function() {var implementors = {
"aero_kernel":[["impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.AsRef.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"aero_kernel/fs/path/struct.Path.html\" title=\"struct aero_kernel::fs::path::Path\">Path</a>&gt; for &amp;str"],["impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.AsRef.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"aero_kernel/fs/path/struct.Path.html\" title=\"struct aero_kernel::fs::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"aero_kernel/fs/path/struct.Path.html\" title=\"struct aero_kernel::fs::path::Path\">Path</a>"],["impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.AsRef.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"aero_kernel/fs/path/struct.Path.html\" title=\"struct aero_kernel::fs::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"aero_kernel/fs/path/struct.PathBuf.html\" title=\"struct aero_kernel::fs::path::PathBuf\">PathBuf</a>"],["impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.AsRef.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"aero_kernel/fs/path/struct.Path.html\" title=\"struct aero_kernel::fs::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/struct.String.html\" title=\"struct aero_kernel::prelude::rust_2021::String\">String</a>"]],
"allocator_api2":[["impl&lt;'a, T, A: <a class=\"trait\" href=\"allocator_api2/alloc/trait.Allocator.html\" title=\"trait allocator_api2::alloc::Allocator\">Allocator</a>&gt; AsRef&lt;[T]&gt; for <a class=\"struct\" href=\"allocator_api2/vec/struct.Drain.html\" title=\"struct allocator_api2::vec::Drain\">Drain</a>&lt;'a, T, A&gt;"],["impl&lt;T, A: <a class=\"trait\" href=\"allocator_api2/alloc/trait.Allocator.html\" title=\"trait allocator_api2::alloc::Allocator\">Allocator</a>&gt; AsRef&lt;<a class=\"struct\" href=\"allocator_api2/vec/struct.Vec.html\" title=\"struct allocator_api2::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"allocator_api2/vec/struct.Vec.html\" title=\"struct allocator_api2::vec::Vec\">Vec</a>&lt;T, A&gt;"],["impl&lt;T, A: <a class=\"trait\" href=\"allocator_api2/alloc/trait.Allocator.html\" title=\"trait allocator_api2::alloc::Allocator\">Allocator</a>&gt; AsRef&lt;[T]&gt; for <a class=\"struct\" href=\"allocator_api2/vec/struct.IntoIter.html\" title=\"struct allocator_api2::vec::IntoIter\">IntoIter</a>&lt;T, A&gt;"],["impl&lt;T, A: <a class=\"trait\" href=\"allocator_api2/alloc/trait.Allocator.html\" title=\"trait allocator_api2::alloc::Allocator\">Allocator</a>&gt; AsRef&lt;[T]&gt; for <a class=\"struct\" href=\"allocator_api2/vec/struct.Vec.html\" title=\"struct allocator_api2::vec::Vec\">Vec</a>&lt;T, A&gt;"],["impl&lt;T: ?Sized, A: <a class=\"trait\" href=\"allocator_api2/alloc/trait.Allocator.html\" title=\"trait allocator_api2::alloc::Allocator\">Allocator</a>&gt; AsRef&lt;T&gt; for <a class=\"struct\" href=\"allocator_api2/boxed/struct.Box.html\" title=\"struct allocator_api2::boxed::Box\">Box</a>&lt;T, A&gt;"]],
"arrayvec":[["impl&lt;T, const CAP: usize&gt; AsRef&lt;[T]&gt; for <a class=\"struct\" href=\"arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;"],["impl&lt;const CAP: usize&gt; AsRef&lt;str&gt; for <a class=\"struct\" href=\"arrayvec/struct.ArrayString.html\" title=\"struct arrayvec::ArrayString\">ArrayString</a>&lt;CAP&gt;"]],
"intrusive_collections":[["impl&lt;T: ?Sized&gt; AsRef&lt;T&gt; for <a class=\"struct\" href=\"intrusive_collections/struct.UnsafeRef.html\" title=\"struct intrusive_collections::UnsafeRef\">UnsafeRef</a>&lt;T&gt;"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()