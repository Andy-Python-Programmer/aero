searchState.loadedDescShard("zerocopy", 0, "<em>Want to help improve zerocopy? Fill out our user survey!</em>\nTypes that can be viewed as an immutable slice of …\nA mutable or immutable reference to a byte slice.\nA mutable reference to a byte slice.\nTypes for which any bit pattern is valid.\nTypes for which a sequence of bytes all set to zero …\nA typed reference derived from a byte slice.\nA type with no alignment requirement.\nTypes with no alignment requirement.\nGets the bytes of this value.\nGets the bytes of this value mutably.\nGets a mutable raw pointer to the first byte in the slice.\nGets a raw pointer to the first byte in the slice.\nGets the underlying bytes.\nGets the underlying bytes mutably.\nReturns a mutable reference to the wrapped <code>T</code> without …\nReturns a reference to the wrapped <code>T</code> without checking …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a copy of the inner <code>T</code>.\nGets an unaligned mutable raw pointer to the inner <code>T</code>.\nGets an unaligned raw pointer to the inner <code>T</code>.\nIncludes a file and safely transmutes it to a value of an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the inner <code>T</code>.\nConverts this <code>Ref</code> into a mutable reference.\nConverts this <code>Ref</code> into a mutable slice reference.\nConverts this <code>Ref</code> into a reference.\nConverts this <code>Ref</code> into a slice reference.\nInterprets the given <code>bytes</code> as a <code>&amp;mut Self</code> without copying.\nInterprets the prefix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …\nInterprets the suffix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …\nInterprets the given <code>bytes</code> as a <code>&amp;mut [Self]</code> without …\nInterprets the prefix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …\nInterprets the suffix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …\nConstructs a new <code>Ref</code>.\nConstructs a new <code>Unalign</code>.\nConstructs a new <code>Ref</code> from the prefix of a byte slice.\nConstructs a new <code>Ref</code> from the prefix of a byte slice, …\nConstructs a new <code>Ref</code> from the suffix of a byte slice.\nConstructs a new <code>Ref</code> from the suffix of a byte slice, …\nConstructs a new <code>Ref</code> of a slice type.\nConstructs a new <code>Ref</code> of a slice type from the prefix of a …\nConstructs a new <code>Ref</code> of a slice type from the prefix of a …\nConstructs a new <code>Ref</code> of a slice type from the suffix of a …\nConstructs a new <code>Ref</code> of a slice type from the prefix of a …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> for a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type after zeroing the …\nConstructs a new <code>Ref</code> for a type with no alignment …\nConstructs a new <code>Ref</code> from the prefix of a byte slice for a …\nConstructs a new <code>Ref</code> from the prefix of a byte slice for a …\nConstructs a new <code>Ref</code> from the suffix of a byte slice for a …\nConstructs a new <code>Ref</code> from the suffix of a byte slice for a …\nConstructs a new <code>Ref</code> for a type with no alignment …\nCreates an instance of <code>Self</code> from zeroed bytes.\nConstructs a new <code>Ref</code> after zeroing the bytes.\nReads a copy of <code>T</code>.\nReads a copy of <code>Self</code> from <code>bytes</code>.\nReads a copy of <code>Self</code> from the prefix of <code>bytes</code>.\nReads a copy of <code>Self</code> from the suffix of <code>bytes</code>.\nInterprets the given <code>bytes</code> as a <code>&amp;Self</code> without copying.\nInterprets the prefix of the given <code>bytes</code> as a <code>&amp;Self</code> …\nInterprets the suffix of the given <code>bytes</code> as a <code>&amp;Self</code> …\nSets the inner <code>T</code>, dropping the previous value.\nInterprets the given <code>bytes</code> as a <code>&amp;[Self]</code> without copying.\nInterprets the prefix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …\nInterprets the suffix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …\nSplits the slice at the midpoint.\nSafely transmutes a value of one type to a value of …\nSafely transmutes a mutable reference of one type to an …\nSafely transmutes a mutable or immutable reference of one …\nAttempts to return a reference to the wrapped <code>T</code>, failing …\nAttempts to return a mutable reference to the wrapped <code>T</code>, …\nUpdates the inner <code>T</code> by calling a function on it.\nWrites the bytes of <code>t</code> and then forgets <code>t</code>.\nWrites a copy of <code>self</code> to <code>bytes</code>.\nWrites a copy of <code>self</code> to the prefix of <code>bytes</code>.\nWrites a copy of <code>self</code> to the suffix of <code>bytes</code>.\nOverwrites <code>self</code> with zeroes.")