searchState.loadedDescShard("aero_kernel", 1, "Tests if any element of the iterator matches a predicate.\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns a byte slice of this <code>String</code>’s contents.\nConverts this type into a mutable reference of the …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nConverts this type into a shared reference of the (usually …\nExtracts a string slice containing the entire <code>String</code>.\nInline assembly.\nAsserts that a boolean expression is <code>true</code> at runtime.\nAsserts that a given configuration is set.\nAsserts that types are equal in alignment.\nAsserts that types are equal in size.\nAsserts that values pointed to are equal in size.\nAsserts that values are equal in size.\nAsserts that the type has the given fields.\nAsserts that the type implements <em>all</em> of the given traits.\nAsserts that the type implements <em>any</em> of the given traits.\nAsserts that the type implements exactly one in a set of …\nAsserts that the type does <strong>not</strong> implement <em>all</em> of the given …\nAsserts that the type does <strong>not</strong> implement <em>any</em> of the given …\nAsserts that the traits support dynamic dispatch (…\nAsserts that the trait is a child of all of the other …\nAsserts that the trait is a parent of all of the other …\nAsserts that <em>all</em> types in a list are equal to each other.\nAsserts that <em>all</em> types are <strong>not</strong> equal to each other.\nAttribute macro applied to a function to turn it into a …\nBorrows an iterator, rather than consuming it.\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nReturns this <code>String</code>’s capacity, in bytes.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nTakes two iterators and creates a new iterator over both …\nRestrict a value to a certain interval.\nTruncates this <code>String</code>, removing all contents.\nReturns a copy of the value.\nPerforms copy-assignment from <code>source</code>.\nClones the contents of <code>source</code> into <code>self</code>.\nCreates an iterator which <code>clone</code>s all of its elements.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nTransforms an iterator into a collection.\nCollects all the items from an iterator into a collection.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nConcatenates identifiers into one identifier.\nAsserts that constant expressions evaluate to <code>true</code>.\nAsserts that constants are equal in value.\nAsserts that constants are <strong>not</strong> equal in value.\nCreates an iterator which copies all of its elements.\nConsumes the iterator, counting the number of iterations …\nRepeats an iterator endlessly.\nReturns the “default value” for a type.\nCreates an empty <code>String</code>.\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nRemoves the specified range from the string in bulk, …\nDisposes of a value.\nExecutes the destructor for this type.\nCreates an iterator which gives the current iteration …\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nExtends a collection with the contents of an iterator.\nCopies elements from <code>src</code> range to the end of the string.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of …\nExpands to the file name in which it was invoked.\nCreates an iterator which uses a closure to determine if …\nCreates an iterator that both filters and maps.\nSearches for an element of an iterator that satisfies a …\nApplies function to the elements of iterator and returns …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that flattens nested structure.\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of an iterator.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nConverts a <code>&amp;mut str</code> into a <code>String</code>.\nReturns the argument unchanged.\nAllocates an owned <code>String</code> from a single character.\nConverts a clone-on-write string to an owned instance of …\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nConverts a <code>&amp;String</code> into a <code>String</code>.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nCreates a value from an iterator.\nCreates a new <code>String</code> from a pointer, a length and a …\nDecode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …\nDecode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a vector of bytes to a <code>String</code> without checking …\nCreates an iterator which ends after the first <code>None</code>.\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nDetermines if the elements of this <code>Iterator</code> are …\nAttribute macro applied to a static to register it as a …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nDetermines if the elements of this <code>Iterator</code> are …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nInserts a character into this <code>String</code> at a byte position.\nInserts a string slice into this <code>String</code> at a byte position.\nDoes something with each element of an iterator, passing …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places an item generated by …\nConverts this type into the (usually inferred) input type.\nCalls <code>U::from(self)</code>.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nConverts a <code>String</code> into a byte vector.\nCreates an iterator from a value.\nDecomposes a <code>String</code> into its raw components: …\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…\nReturns <code>true</code> if the iterator is empty.\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nConsumes the iterator, returning the last element.\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nDetermines if the elements of this <code>Iterator</code> are …\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nReturns the exact remaining length of the iterator.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nDetermines if the elements of this <code>Iterator</code> are …\nTakes a closure and creates an iterator which calls that …\nCreates an iterator that both yields elements based on a …\nCalls the given function <code>f</code> for each contiguous window of …\nCompares and returns the maximum of two values.\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value from the …\nCompares and returns the minimum of two values.\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value from the …\nExpands to a string that represents the current module …\nTests for <code>!=</code>. The default implementation is almost always …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nCreates a new empty <code>String</code>.\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nAdvances the iterator and returns an array containing the …\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the elements of this <code>Iterator</code> …\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nRemoves the last character from the string buffer and …\nSearches for an element in an iterator, returning its …\nIterates over the entire iterator, multiplying all the …\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nReduces the elements to a single one, by repeatedly …\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemove all matches of pattern <code>pat</code> in the <code>String</code>.\nRemoves the specified range in the string, and replaces it …\nReserves capacity for at least <code>additional</code> bytes more than …\nReserves the minimum capacity for at least <code>additional</code> …\nRetains only the characters specified by the predicate.\nReverses an iterator’s direction.\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nSearches for an element in an iterator from the right, …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of this <code>String</code> to match its length.\nReturns the bounds on the remaining length of the iterator.\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a …\nSplits the string into two at the given byte index.\nCreates an iterator starting at the same point, but …\nStringifies its arguments.\nSums the elements of an iterator.\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields elements based on a …\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nEnables or disables tracing functionality used for …\nShortens this <code>String</code> to the specified length.\nFallibly transforms an iterator into a collection, short …\nApplies function to the elements of iterator and returns …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a fallible function to …\nPerforms the conversion.\nPerforms the conversion.\nReduces the elements to a single one by repeatedly …\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nCreates a new empty <code>String</code> with at least the specified …\nUnstable placeholder for type ascription.\nConverts an iterator of pairs into a pair of containers.\nCreates a new empty <code>String</code> with at least the specified …\n‘Zips up’ two iterators into a single iterator of …\nMemory allocation APIs\nUtilities for dynamic typing or type reflection.\nSIMD and vendor intrinsics module.\nUtilities for the array primitive type.\nOperations on ASCII strings and characters.\nAsserts that a boolean expression is <code>true</code> at runtime.\nAsserts that two expressions are equal to each other …\nUnstable module containing the unstable <code>assert_matches</code> …\nAsserts that two expressions are not equal to each other …\nChecks that the preconditions of an unsafe function are …\nComposable asynchronous iteration.\nUtilities for working with borrowed data.\nShareable mutable containers.\nEvaluates boolean combinations of configuration flags at …\nA macro for defining <code>#[cfg]</code> match-like statements.\nUtilities for the <code>char</code> primitive type.\nThe <code>Clone</code> trait for types that cannot be ‘implicitly …\nUtilities for comparing and ordering values.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nConcatenates identifiers into one identifier.\nSame as <code>format_args</code>, but can be used in some const …\nTraits for conversions between types.\nAsserts that a boolean expression is <code>true</code> at runtime.\nAsserts that two expressions are equal to each other.\nAsserts that two expressions are not equal to each other.\nThe <code>Default</code> trait for types with a default value.\nInspects an environment variable at compile time.\nInterfaces for working with Errors.\nConstants for the <code>f128</code> quadruple-precision floating point …\nConstants for the <code>f16</code> half-precision floating point type.\nConstants for the <code>f32</code> single-precision floating point type.\nConstants for the <code>f64</code> double-precision floating point type.\nPlatform-specific types, as defined by C.\nExpands to the file name in which it was invoked.\nUtilities for formatting and printing strings.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nAsynchronous basic functionality.\nGeneric hashing support.\nHints to compiler that affects how code should be emitted …\nRedundant constants module for the <code>i128</code> primitive type.\nRedundant constants module for the <code>i16</code> primitive type.\nRedundant constants module for the <code>i32</code> primitive type.\nRedundant constants module for the <code>i64</code> primitive type.\nRedundant constants module for the <code>i8</code> primitive type.\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nCompiler intrinsics.\nTraits, helpers, and type definitions for core I/O …\nRedundant constants module for the <code>isize</code> primitive type.\nComposable external iteration.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nPrimitive traits and types representing basic properties …\nReturns whether the given expression matches the provided …\nBasic functions for dealing with memory.\nExpands to a string that represents the current module …\nNetworking primitives for IP communication.\nNumeric traits and functions for the built-in numeric …\nOverloadable operators.\nOptional values.\nOptionally inspects an environment variable at compile …\nPanic support in the standard library.\nPanics the current thread.\nPanic support for core\nHelper module for exporting the <code>pattern_type</code> macro\nCreates a pattern type.\nTypes that pin data to a location in memory.\nThe core prelude\nThis module reexports the primitive types to allow usage …\nManually manage memory through raw pointers.\nExperimental replacement range types\nError handling with the <code>Result</code> type.\nPortable SIMD module.\nSlice management and manipulation.\nString manipulation.\nStringifies its arguments.\nSynchronization primitives\nTypes and Traits for working with asynchronous tasks.\nTemporal quantification.\nIndicates unfinished code.\nEnables or disables tracing functionality used for …\nUnwraps a result or propagates its error.\nRedundant constants module for the <code>u128</code> primitive type.\nRedundant constants module for the <code>u16</code> primitive type.\nRedundant constants module for the <code>u32</code> primitive type.\nRedundant constants module for the <code>u64</code> primitive type.\nRedundant constants module for the <code>u8</code> primitive type.\nProvides the <code>assert_unsafe_precondition</code> macro as well as …\nIndicates unimplemented code by panicking with a message …\nIndicates unreachable code.\nRedundant constants module for the <code>usize</code> primitive type.\nWrites formatted data into a buffer.\nWrites formatted data into a buffer, with a newline …\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe parameters given to <code>Layout::from_size_align</code> or some …\nThe minimum byte alignment for a memory block of this …\nCreates a layout describing the record that can hold a …\nAllocates memory as described by the given <code>layout</code>.\nBehaves like <code>alloc</code>, but also ensures that the contents are …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a layout describing the record for a <code>[T; n]</code>.\nCreates a “by reference” adapter for this instance of …\nCreates a <code>NonNull</code> that is dangling, but well-aligned for …\nDeallocates the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nCreates a layout describing the record for <code>self</code> followed by\nCreates a layout describing the record for <code>self</code> followed by\nProduces layout describing a record that could be used to …\nProduces layout describing a record that could be used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …\nCreates a layout, bypassing all checks.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.\nCreates a layout by rounding the size of this layout up to …\nReturns the amount of padding we must insert after <code>self</code> to …\nShrinks or grows a block of memory to the given <code>new_size</code> …\nCreates a layout describing the record for <code>n</code> instances of …\nCreates a layout describing the record for <code>n</code> instances of …\nAttempts to shrink the memory block.\nThe minimum size in bytes for a memory block of this …\nA trait to emulate dynamic typing.\nA <code>TypeId</code> represents a globally unique identifier for a …\nForwards to the method defined on the type <code>Any</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nReturns some mutable reference to the inner value if it is …\nReturns a mutable reference to the inner value as type …\nForwards to the method defined on the type <code>Any</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nReturns some reference to the inner value if it is of type …\nForwards to the method defined on the type <code>Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nReturns a reference to the inner value as type <code>dyn T</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nForwards to the method defined on the type <code>Any</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nReturns the <code>TypeId</code> of the type this generic function has …\nGets the <code>TypeId</code> of <code>self</code>.\nReturns the name of a type as a string slice.\nReturns the type name of the pointed-to value as a string …\nInline assembly.\nModule-level inline assembly.\nPlatform-specific intrinsics for the <code>x86_64</code> platform.\nResult of the <code>cpuid</code> instruction.\nEqual (ordered, non-signaling)\nEqual (ordered, signaling)\nEqual (unordered, non-signaling)\nEqual (unordered, signaling)\nFalse (ordered, non-signaling)\nFalse (ordered, signaling)\nGreater-than-or-equal (ordered, non-signaling)\nGreater-than-or-equal (ordered, signaling)\nGreater-than (ordered, non-signaling)\nGreater-than (ordered, signaling)\nLess-than-or-equal (ordered, non-signaling)\nLess-than-or-equal (ordered, signaling)\nLess-than (ordered, non-signaling)\nLess-than (ordered, signaling)\nNot-equal (ordered, non-signaling)\nNot-equal (ordered, signaling)\nNot-equal (unordered, non-signaling)\nNot-equal (unordered, signaling)\nNot-greater-than-or-equal (unordered, non-signaling)\nNot-greater-than-or-equal (unordered, signaling)\nNot-greater-than (unordered, non-signaling)\nNot-greater-than (unordered, signaling)\nNot-less-than-or-equal (unordered, non-signaling)\nNot-less-than-or-equal (unordered, signaling)\nNot-less-than (unordered, non-signaling)\nNot-less-than (unordered, signaling)\nOrdered (non-signaling)\nOrdered (signaling)\nTrue (unordered, non-signaling)\nTrue (unordered, signaling)\nUnordered (non-signaling)\nUnordered (signaling)\nThe <code>_MM_CMPINT_ENUM</code> type used to specify comparison …\nEqual\nFalse\nLess-than-or-equal\nLess-than\nNot-equal\nNot less-than-or-equal\nNot less-than\nTrue\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_MM_GET_EXCEPTION_STATE</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_MM_GET_FLUSH_ZERO_MODE</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nround up and do not suppress exceptions\nuse MXCSR.RC; see <code>vendor::_MM_SET_ROUNDING_MODE</code>\nround down and do not suppress exceptions\nuse MXCSR.RC and suppress exceptions; see …\nround to nearest and do not suppress exceptions\nsuppress exceptions\ndo not suppress exceptions\nuse MXCSR.RC and do not suppress exceptions; see …\nround to nearest\nround down\nround up\ntruncate\ntruncate and do not suppress exceptions\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nSee <code>_mm_prefetch</code>.\nThe <code>MM_MANTISSA_NORM_ENUM</code> type used to specify mantissa …\nThe <code>MM_MANTISSA_SIGN_ENUM</code> type used to specify mantissa …\ninterval [1, 2)\ninterval [0.5, 1)\ninterval [0.5, 2)\ninterval [0.75, 1.5)\nDEST = NaN if sign(SRC) = 1\nsign = sign(SRC)\nsign = 0\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_MM_GET_EXCEPTION_MASK</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nThe <code>MM_PERM_ENUM</code> type used to specify shuffle operations …\nSee <code>_mm_setcsr</code>\nSee <code>_MM_GET_ROUNDING_MODE</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nSee <code>_mm_setcsr</code>\nA utility function for creating masks to use with Intel …\nTranspose the 4x4 matrix formed by 4 rows of __m128 in …\n<strong>Mask only</strong>: return the bit mask\nFor each character in <code>a</code>, find if it is in <code>b</code> <em>(Default)</em>\nThe strings defined by <code>a</code> and <code>b</code> are equal\nSearch for the defined substring in the target\nFor each character in <code>a</code>, determine if …\n<strong>Index only</strong>: return the least significant bit <em>(Default)</em>\nNegates results only before the end of the string\nDo not negate results before the end of the string\n<strong>Index only</strong>: return the most significant bit\nNegates results\nDo not negate results <em>(Default)</em>\nString contains signed 8-bit characters\nString contains unsigned 16-bit characters\nString contains unsigned 8-bit characters <em>(Default)</em>\n<strong>Mask only</strong>: return the byte mask\nString contains unsigned 16-bit characters\nTransaction abort due to the transaction using too much …\nTransaction abort due to a memory conflict with another …\nTransaction abort due to a debug trap.\nTransaction explicitly aborted with xabort. The parameter …\nTransaction abort in a inner nested transaction.\nTransaction retry is possible.\nTransaction successfully started.\n<code>XFEATURE_ENABLED_MASK</code> for <code>XCR</code>\nSee <code>__cpuid_count</code>.\nReturns the result of the <code>cpuid</code> instruction for a given …\nReturns the highest-supported <code>leaf</code> (<code>EAX</code>) and sub-leaf (<code>ECX</code>…\n128-bit wide set of four <code>f32</code> types, x86-specific\n128-bit wide set of eight <code>u16</code> types, x86-specific\n128-bit wide set of two <code>f64</code> types, x86-specific\n128-bit wide set of 8 <code>f16</code> types, x86-specific\n128-bit wide integer vector type, x86-specific\n256-bit wide set of eight <code>f32</code> types, x86-specific\n256-bit wide set of 16 <code>u16</code> types, x86-specific\n256-bit wide set of four <code>f64</code> types, x86-specific\n256-bit wide set of 16 <code>f16</code> types, x86-specific\n256-bit wide integer vector type, x86-specific\n512-bit wide set of sixteen <code>f32</code> types, x86-specific\n512-bit wide set of 32 <code>u16</code> types, x86-specific\n512-bit wide set of eight <code>f64</code> types, x86-specific\n512-bit wide set of 32 <code>f16</code> types, x86-specific\n512-bit wide integer vector type, x86-specific\nThe <code>__mmask16</code> type used in AVX-512 intrinsics, a 16-bit …\nThe <code>__mmask32</code> type used in AVX-512 intrinsics, a 32-bit …\nThe <code>__mmask64</code> type used in AVX-512 intrinsics, a 64-bit …\nThe <code>__mmask8</code> type used in AVX-512 intrinsics, a 8-bit …\nReads the current value of the processor’s time-stamp …\nAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nBitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.\nBitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.\nExtracts bits of <code>a</code> specified by <code>control</code> into the least …\nExtracts bits of <code>a</code> specified by <code>control</code> into the least …\nExtracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into …\nExtracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into …\nExtracts bits of <code>a</code> specified by <code>control</code> into the least …\nExtracts bits of <code>a</code> specified by <code>control</code> into the least …\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>.\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>.\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>…\nClears all bits below the least significant zero bit of <code>x</code>.\nClears all bits below the least significant zero bit of <code>x</code>.\nSets all bits of <code>x</code> to 1 except for the least significant …\nSets all bits of <code>x</code> to 1 except for the least significant …\nSets the least significant zero bit of <code>x</code> and clears all …\nSets the least significant zero bit of <code>x</code> and clears all …\nSets the least significant zero bit of <code>x</code> and clears all …\nSets the least significant zero bit of <code>x</code> and clears all …\nSets the least significant zero bit of <code>x</code>.\nSets the least significant zero bit of <code>x</code>.\nSets all bits of <code>x</code> below the least significant one.\nSets all bits of <code>x</code> below the least significant one.\nExtracts lowest set isolated bit.\nExtracts lowest set isolated bit.\nClears least significant bit and sets all other bits.\nClears least significant bit and sets all other bits.\nGets mask up to lowest set bit.\nGets mask up to lowest set bit.\nResets the lowest set bit of <code>x</code>.\nResets the lowest set bit of <code>x</code>.\nReturns an integer with the reversed byte order of x\nReturns an integer with the reversed byte order of x\nZeroes higher bits of <code>a</code> &gt;= <code>index</code>.\nZeroes higher bits of <code>a</code> &gt;= <code>index</code>.\nConvert 16-bit mask a into an integer value, and store the …\nConvert 32-bit mask a into an integer value, and store the …\nConvert 64-bit mask a into an integer value, and store the …\nConvert 8-bit mask a to a 32-bit integer value and store …\nConvert 32-bit integer value a to an 16-bit mask and store …\nConvert integer value a into an 32-bit mask, and store the …\nConvert 32-bit integer value a to an 8-bit mask and store …\nConvert integer value a into an 64-bit mask, and store the …\nRestores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …\nRestores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …\nSaves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …\nSaves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …\nAdd 16-bit masks a and b, and store the result in dst.\nAdd 32-bit masks in a and b, and store the result in k.\nAdd 64-bit masks in a and b, and store the result in k.\nAdd 8-bit masks a and b, and store the result in dst.\nCompute the bitwise AND of 16-bit masks a and b, and store …\nCompute the bitwise AND of 32-bit masks a and b, and store …\nCompute the bitwise AND of 64-bit masks a and b, and store …\nBitwise AND of 8-bit masks a and b, and store the result …\nCompute the bitwise NOT of 16-bit masks a and then AND …\nCompute the bitwise NOT of 32-bit masks a and then AND …\nCompute the bitwise NOT of 64-bit masks a and then AND …\nBitwise AND NOT of 8-bit masks a and b, and store the …\nCompute the bitwise NOT of 16-bit mask a, and store the …\nCompute the bitwise NOT of 32-bit mask a, and store the …\nCompute the bitwise NOT of 64-bit mask a, and store the …\nBitwise NOT of 8-bit mask a, and store the result in dst.\nCompute the bitwise OR of 16-bit masks a and b, and store …\nCompute the bitwise OR of 32-bit masks a and b, and store …\nCompute the bitwise OR of 64-bit masks a and b, and store …\nBitwise OR of 8-bit masks a and b, and store the result in …\nCompute the bitwise OR of 16-bit masks a and b. If the …\nCompute the bitwise OR of 32-bit masks a and b. If the …\nCompute the bitwise OR of 64-bit masks a and b. If the …\nCompute the bitwise OR of 8-bit masks a and b. If the …\nCompute the bitwise OR of 16-bit masks a and b. If the …\nCompute the bitwise OR of 32-bit masks a and b. If the …\nCompute the bitwise OR of 64-bit masks a and b. If the …\nCompute the bitwise OR of 8-bit masks a and b. If the …\nCompute the bitwise OR of 16-bit masks a and b. If the …\nCompute the bitwise OR of 32-bit masks a and b. If the …\nCompute the bitwise OR of 64-bit masks a and b. If the …\nCompute the bitwise OR of 8-bit masks a and b. If the …\nShift 16-bit mask a left by count bits while shifting in …\nShift the bits of 32-bit mask a left by count while …\nShift the bits of 64-bit mask a left by count while …\nShift 8-bit mask a left by count bits while shifting in …\nShift 16-bit mask a right by count bits while shifting in …\nShift the bits of 32-bit mask a right by count while …\nShift the bits of 64-bit mask a right by count while …\nShift 8-bit mask a right by count bits while shifting in …\nCompute the bitwise AND of 16-bit masks a and b, and if …\nCompute the bitwise AND of 32-bit masks a and b, and if …\nCompute the bitwise AND of 64-bit masks a and b, and if …\nCompute the bitwise AND of 8-bit masks a and b, and if the …\nCompute the bitwise NOT of 16-bit mask a and then AND with …\nCompute the bitwise NOT of 32-bit mask a and then AND with …\nCompute the bitwise NOT of 64-bit mask a and then AND with …\nCompute the bitwise NOT of 8-bit mask a and then AND with …\nCompute the bitwise AND of 16-bit masks a and  b, if the …\nCompute the bitwise AND of 32-bit masks a and  b, if the …\nCompute the bitwise AND of 64-bit masks a and  b, if the …\nCompute the bitwise AND of 8-bit masks a and  b, if the …\nCompute the bitwise XNOR of 16-bit masks a and b, and …\nCompute the bitwise XNOR of 32-bit masks a and b, and …\nCompute the bitwise XNOR of 64-bit masks a and b, and …\nBitwise XNOR of 8-bit masks a and b, and store the result …\nCompute the bitwise XOR of 16-bit masks a and b, and store …\nCompute the bitwise XOR of 32-bit masks a and b, and store …\nCompute the bitwise XOR of 64-bit masks a and b, and store …\nBitwise XOR of 8-bit masks a and b, and store the result …\nLoad 16-bit mask from memory\nLoad 32-bit mask from memory into k.\nLoad 64-bit mask from memory into k.\nLoad 8-bit mask from memory\nCounts the leading most significant zero bits.\nCounts the leading most significant zero bits.\nComputes the absolute values of packed 16-bit integers in <code>a</code>…\nComputes the absolute values of packed 32-bit integers in <code>a</code>…\nCompute the absolute value of packed signed 64-bit …\nComputes the absolute values of packed 8-bit integers in <code>a</code>.\nFinds the absolute value of each packed half-precision …\nAdds packed 16-bit integers in <code>a</code> and <code>b</code>.\nAdds packed 32-bit integers in <code>a</code> and <code>b</code>.\nAdds packed 64-bit integers in <code>a</code> and <code>b</code>.\nAdds packed 8-bit integers in <code>a</code> and <code>b</code>.\nAdds packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdds packed single-precision (32-bit) floating-point …\nAdds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.\nAdds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.\nAdds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …\nAdds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …\nAlternatively adds and subtracts packed double-precision …\nAlternatively adds and subtracts packed single-precision …\nPerforms one round of an AES decryption flow on each …\nPerforms the last round of an AES decryption flow on each …\nPerforms one round of an AES encryption flow on each …\nPerforms the last round of an AES encryption flow on each …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenates pairs of 16-byte blocks in <code>a</code> and <code>b</code> into a …\nComputes the bitwise AND of a packed double-precision …\nComputes the bitwise AND of packed single-precision …\nComputes the bitwise AND of 256 bits (representing integer …\nComputes the bitwise NOT of packed double-precision …\nComputes the bitwise NOT of packed single-precision …\nComputes the bitwise NOT of 256 bits (representing integer …\nAverages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.\nAverages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.\nConvert scalar BF16 (16-bit) floating point element stored …\nConvert scalar half-precision (16-bit) floating-point …\nConsiders the input <code>b</code> as packed 64-bit integers and <code>c</code> as …\nBlends packed 16-bit integers from <code>a</code> and <code>b</code> using control …\nBlends packed 32-bit integers from <code>a</code> and <code>b</code> using control …\nBlends packed double-precision (64-bit) floating-point …\nBlends packed single-precision (32-bit) floating-point …\nBlends packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>.\nBlends packed double-precision (64-bit) floating-point …\nBlends packed single-precision (32-bit) floating-point …\nBroadcasts the lower 2 packed single-precision (32-bit) …\nBroadcast the 4 packed single-precision (32-bit) …\nBroadcasts the 2 packed double-precision (64-bit) …\nBroadcasts the lower 2 packed 32-bit integers from a to …\nBroadcast the 4 packed 32-bit integers from a to all …\nBroadcasts the 2 packed 64-bit integers from a to all …\nBroadcasts 128 bits from memory (composed of 2 packed …\nBroadcasts 128 bits from memory (composed of 4 packed …\nBroadcasts a double-precision (64-bit) floating-point …\nBroadcasts a single-precision (32-bit) floating-point …\nBroadcasts the low packed 8-bit integer from <code>a</code> to all …\nBroadcasts the low packed 32-bit integer from <code>a</code> to all …\nBroadcast the low 8-bits from input mask k to all 64-bit …\nBroadcast the low 16-bits from input mask k to all 32-bit …\nBroadcasts the low packed 64-bit integer from <code>a</code> to all …\nBroadcasts the low double-precision (64-bit) …\nBroadcasts 128 bits of integer data from a to all 128-bit …\nBroadcasts the low single-precision (32-bit) …\nBroadcasts the low packed 16-bit integer from a to all …\nShifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …\nShifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …\nCasts vector of type __m128d to type __m256d; the upper …\nCasts vector of type __m256d to type __m128d.\nCast vector of type <code>__m256d</code> to type <code>__m256h</code>. This …\nCast vector of type __m256d to type __m256.\nCasts vector of type __m256d to type __m256i.\nCast vector of type <code>__m128h</code> to type <code>__m256h</code>. The upper 8 …\nCast vector of type <code>__m256h</code> to type <code>__m128h</code>. This …\nCast vector of type <code>__m256h</code> to type <code>__m256d</code>. This …\nCast vector of type <code>__m256h</code> to type <code>__m256</code>. This intrinsic …\nCast vector of type <code>__m256h</code> to type <code>__m256i</code>. This …\nCasts vector of type __m128 to type __m256; the upper 128 …\nCasts vector of type __m256 to type __m128.\nCast vector of type __m256 to type __m256d.\nCast vector of type <code>__m256</code> to type <code>__m256h</code>. This intrinsic …\nCasts vector of type __m256 to type __m256i.\nCasts vector of type __m128i to type __m256i; the upper …\nCasts vector of type __m256i to type __m256d.\nCast vector of type <code>__m256i</code> to type <code>__m256h</code>. This …\nCasts vector of type __m256i to type __m256.\nCasts vector of type __m256i to type __m128i.\nRounds packed double-precision (64-bit) floating point …\nRounds packed single-precision (32-bit) floating point …\nPerforms a carry-less multiplication of two 64-bit …\nCompare packed signed 16-bit integers in a and b based on …\nCompare packed signed 32-bit integers in a and b based on …\nCompare packed signed 64-bit integers in a and b based on …\nCompare packed signed 8-bit integers in a and b based on …\nCompare packed unsigned 16-bit integers in a and b based …\nCompare packed unsigned 32-bit integers in a and b based …\nCompare packed unsigned 64-bit integers in a and b based …\nCompare packed unsigned 8-bit integers in a and b based on …\nCompares packed double-precision (64-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompares packed single-precision (32-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.\nCompare packed signed 16-bit integers in a and b for …\nCompares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.\nCompare packed 32-bit integers in a and b for equality, …\nCompares packed 64-bit integers in <code>a</code> and <code>b</code> for equality.\nCompare packed 64-bit integers in a and b for equality, …\nCompares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompares packed 16-bit integers in <code>a</code> and <code>b</code> for …\nCompare packed signed 16-bit integers in a and b for …\nCompares packed 32-bit integers in <code>a</code> and <code>b</code> for …\nCompare packed signed 32-bit integers in a and b for …\nCompares packed 64-bit integers in <code>a</code> and <code>b</code> for …\nCompare packed signed 64-bit integers in a and b for …\nCompares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for not-equal, …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nMultiply packed complex numbers in a by the complex …\nTest each 32-bit element of a for equality with all other …\nTest each 64-bit element of a for equality with all other …\nCompute the complex conjugates of complex numbers in a, …\nSign-extend 16-bit integers to 32-bit integers.\nSign-extend 16-bit integers to 64-bit integers.\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed 32-bit integers in a to packed 16-bit …\nSign-extend 32-bit integers to 64-bit integers.\nConvert packed 32-bit integers in a to packed 8-bit …\nConverts packed 32-bit integers in <code>a</code> to packed …\nConvert packed signed 32-bit integers in a to packed …\nConverts packed 32-bit integers in <code>a</code> to packed …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nSign-extend 8-bit integers to 16-bit integers.\nSign-extend 8-bit integers to 32-bit integers.\nSign-extend 8-bit integers to 64-bit integers.\nZeroes extend packed unsigned 16-bit integers in <code>a</code> to …\nZero-extend the lower four unsigned 16-bit integers in <code>a</code> …\nConvert packed unsigned 16-bit integers in a to packed …\nZero-extend unsigned 32-bit integers in <code>a</code> to 64-bit …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nZero-extend unsigned 8-bit integers in <code>a</code> to 16-bit …\nZero-extend the lower eight unsigned 8-bit integers in <code>a</code> …\nZero-extend the lower four unsigned 8-bit integers in <code>a</code> to …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed BF16 (16-bit) floating-point even-indexed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed BF16 (16-bit) floating-point odd-indexed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed BF16 (16-bit) floating-point elements in a …\nConverts packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConverts packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConverts the 8 x 16-bit half-precision float values in the …\nConverts packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed single-precision (32-bit) floating-point …\nConverts the 8 x 32-bit float values in the 256-bit vector …\nReturns the first element of the input vector of …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nCopy the lower half-precision (16-bit) floating-point …\nReturns the first element of the input vector of <code>[8 x i32]</code>.\nReturns the first element of the input vector of …\nConverts packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConverts packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nCompute the sum of absolute differences (SADs) of …\nComputes the division of each of the 4 packed 64-bit …\nDivide packed half-precision (16-bit) floating-point …\nComputes the division of each of the 8 packed 32-bit …\nConditionally multiplies the packed single-precision …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of signed 8-bit …\nMultiply groups of 4 adjacent pairs of signed 8-bit …\nMultiply groups of 4 adjacent pairs of signed 8-bit …\nMultiply groups of 4 adjacent pairs of signed 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of unsigned 16-bit …\nMultiply groups of 2 adjacent pairs of unsigned 16-bit …\nMultiply groups of 2 adjacent pairs of unsigned 16-bit …\nMultiply groups of 2 adjacent pairs of unsigned 16-bit …\nExtracts a 16-bit integer from <code>a</code>, selected with <code>INDEX</code>. …\nExtracts a 32-bit integer from <code>a</code>, selected with <code>INDEX</code>.\nExtracts a 64-bit integer from <code>a</code>, selected with <code>INDEX</code>.\nExtracts an 8-bit integer from <code>a</code>, selected with <code>INDEX</code>. …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtracts 128 bits (composed of 4 packed single-precision …\nExtracts 128 bits (composed of integer data) from <code>a</code>, …\nExtract 128 bits (composed of 4 packed single-precision …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtracts 128 bits (of integer data) from <code>a</code> selected with …\nExtract 128 bits (composed of 4 packed 32-bit integers) …\nExtracts 128 bits (composed of 2 packed 64-bit integers) …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nRounds packed double-precision (64-bit) floating point …\nRounds packed single-precision (32-bit) floating point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nTest packed double-precision (64-bit) floating-point …\nTest packed half-precision (16-bit) floating-point …\nTest packed single-precision (32-bit) floating-point …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nPerforms an affine transformation on the packed bytes in x.\nPerforms an affine transformation on the inverted packed …\nPerforms a multiplication in GF(2^8) on the packed bytes. …\nHorizontally adds adjacent pairs of 16-bit integers in <code>a</code> …\nHorizontally adds adjacent pairs of 32-bit integers in <code>a</code> …\nHorizontal addition of adjacent pairs in the two packed …\nHorizontal addition of adjacent pairs in the two packed …\nHorizontally adds adjacent pairs of 16-bit integers in <code>a</code> …\nHorizontally subtract adjacent pairs of 16-bit integers in …\nHorizontally subtract adjacent pairs of 32-bit integers in …\nHorizontal subtraction of adjacent pairs in the two packed …\nHorizontal subtraction of adjacent pairs in the two packed …\nHorizontally subtract adjacent pairs of 16-bit integers in …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nStores 8 32-bit integer elements from a to memory starting …\nScatter 64-bit integers from a into memory using 32-bit …\nStores 4 double-precision (64-bit) floating-point elements …\nStores 8 single-precision (32-bit) floating-point elements …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nStores 4 32-bit integer elements from a to memory starting …\nStores 4 64-bit integer elements from a to memory starting …\nStores 4 double-precision (64-bit) floating-point elements …\nStores 4 single-precision (32-bit) floating-point elements …\nCopies <code>a</code> to result, and inserts the 16-bit integer <code>i</code> into …\nCopies <code>a</code> to result, and inserts the 32-bit integer <code>i</code> into …\nCopies <code>a</code> to result, and insert the 64-bit integer <code>i</code> into …\nCopies <code>a</code> to result, and inserts the 8-bit integer <code>i</code> into …\nCopies <code>a</code> to result, then inserts 128 bits (composed of 2 …\nCopies <code>a</code> to result, then inserts 128 bits (composed of 4 …\nCopies <code>a</code> to result, then inserts 128 bits from <code>b</code> into …\nCopy a to dst, then insert 128 bits (composed of 4 packed …\nCopy a to dst, then insert 128 bits (composed of 2 packed …\nCopies <code>a</code> to <code>dst</code>, then insert 128 bits (of integer data) …\nCopy a to dst, then insert 128 bits (composed of 4 packed …\nCopy a to dst, then insert 128 bits (composed of 2 packed …\nLoads 256-bits of integer data from unaligned memory into …\nLoad 256-bits (composed of 8 packed 32-bit integers) from …\nLoad 256-bits (composed of 4 packed 64-bit integers) from …\nLoads 256-bits (composed of 4 packed double-precision …\nLoad 256-bits (composed of 16 packed half-precision …\nLoads 256-bits (composed of 8 packed single-precision …\nLoads 256-bits of integer data from memory into result. …\nLoads two 128-bit values (composed of 4 packed …\nLoads two 128-bit values (composed of 2 packed …\nLoads two 128-bit values (composed of integer data) from …\nLoad 256-bits (composed of 16 packed 16-bit integers) from …\nLoad 256-bits (composed of 8 packed 32-bit integers) from …\nLoad 256-bits (composed of 4 packed 64-bit integers) from …\nLoad 256-bits (composed of 32 packed 8-bit integers) from …\nLoads 256-bits (composed of 4 packed double-precision …\nLoad 256-bits (composed of 16 packed half-precision …\nLoads 256-bits (composed of 8 packed single-precision …\nLoads 256-bits of integer data from memory into result. …\nCounts the number of leading zero bits in each packed …\nCounts the number of leading zero bits in each packed …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiplies packed signed 16-bit integers in <code>a</code> and <code>b</code>, …\nVertically multiplies each unsigned 8-bit integer from <code>a</code> …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nCompute the absolute value of packed signed 16-bit …\nCompute the absolute value of packed signed 32-bit …\nCompute the absolute value of packed signed 64-bit …\nCompute the absolute value of packed signed 8-bit integers …\nAdd packed 16-bit integers in a and b, and store the …\nAdd packed 32-bit integers in a and b, and store the …\nAdd packed 64-bit integers in a and b, and store the …\nAdd packed 8-bit integers in a and b, and store the …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd packed signed 16-bit integers in a and b using …\nAdd packed signed 8-bit integers in a and b using …\nAdd packed unsigned 16-bit integers in a and b using …\nAdd packed unsigned 8-bit integers in a and b using …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenate pairs of 16-byte blocks in a and b into a …\nPerforms element-by-element bitwise AND between packed …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed double-precision …\nCompute the bitwise AND of packed single-precision …\nCompute the bitwise NOT of packed 32-bit integers in a and …\nCompute the bitwise NOT of packed 64-bit integers in a and …\nCompute the bitwise NOT of packed double-precision …\nCompute the bitwise NOT of packed single-precision …\nAverage packed unsigned 16-bit integers in a and b, and …\nAverage packed unsigned 8-bit integers in a and b, and …\nConsiders the input <code>b</code> as packed 64-bit integers and <code>c</code> as …\nBlend packed 16-bit integers from a and b using control …\nBlend packed 32-bit integers from a and b using control …\nBlend packed 64-bit integers from a and b using control …\nBlend packed 8-bit integers from a and b using control …\nBlend packed double-precision (64-bit) floating-point …\nBlend packed half-precision (16-bit) floating-point …\nBlend packed single-precision (32-bit) floating-point …\nBroadcasts the lower 2 packed single-precision (32-bit) …\nBroadcast the 4 packed single-precision (32-bit) …\nBroadcasts the 2 packed double-precision (64-bit) …\nBroadcasts the lower 2 packed 32-bit integers from a to …\nBroadcast the 4 packed 32-bit integers from a to all …\nBroadcasts the 2 packed 64-bit integers from a to all …\nBroadcast the low packed 8-bit integer from a to all …\nBroadcast the low packed 32-bit integer from a to all …\nBroadcast the low packed 64-bit integer from a to all …\nBroadcast the low double-precision (64-bit) floating-point …\nBroadcast the low single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nCompare packed signed 16-bit integers in a and b based on …\nCompare packed signed 32-bit integers in a and b based on …\nCompare packed signed 64-bit integers in a and b based on …\nCompare packed signed 8-bit integers in a and b based on …\nCompare packed unsigned 16-bit integers in a and b based …\nCompare packed unsigned 32-bit integers in a and b based …\nCompare packed unsigned 64-bit integers in a and b based …\nCompare packed unsigned 8-bit integers in a and b based on …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for equality, …\nCompare packed 64-bit integers in a and b for equality, …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for not-equal, …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nMultiply packed complex numbers in a by the complex …\nContiguously store the active 16-bit integers in a (those …\nContiguously store the active 32-bit integers in a (those …\nContiguously store the active 64-bit integers in a (those …\nContiguously store the active 8-bit integers in a (those …\nContiguously store the active double-precision (64-bit) …\nContiguously store the active single-precision (32-bit) …\nContiguously store the active 16-bit integers in a (those …\nContiguously store the active 32-bit integers in a (those …\nContiguously store the active 64-bit integers in a (those …\nContiguously store the active 8-bit integers in a (those …\nContiguously store the active double-precision (64-bit) …\nContiguously store the active single-precision (32-bit) …\nTest each 32-bit element of a for equality with all other …\nTest each 64-bit element of a for equality with all other …\nCompute the complex conjugates of complex numbers in a, …\nConvert packed single-precision (32-bit) floating-point …\nSign extend packed 16-bit integers in a to packed 32-bit …\nSign extend packed 16-bit integers in a to packed 64-bit …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed 32-bit integers in a to packed 16-bit …\nSign extend packed 32-bit integers in a to packed 64-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed 32-bit integers in a to packed 16-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nSign extend packed 8-bit integers in a to packed 16-bit …\nSign extend packed 8-bit integers in a to packed 32-bit …\nSign extend packed 8-bit integers in the low 4 bytes of a …\nZero extend packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 16-bit integers in the low 8 …\nConvert packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in the low 8 …\nZero extend packed unsigned 8-bit integers in the low 4 …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed BF16 (16-bit) floating-point elements in a …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nCompute the sum of absolute differences (SADs) of …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nLoad contiguous active 16-bit integers from a (those with …\nLoad contiguous active 32-bit integers from a (those with …\nLoad contiguous active 64-bit integers from a (those with …\nLoad contiguous active 8-bit integers from a (those with …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nLoad contiguous active 16-bit integers from unaligned …\nLoad contiguous active 32-bit integers from unaligned …\nLoad contiguous active 64-bit integers from unaligned …\nLoad contiguous active 8-bit integers from unaligned …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nExtract 128 bits (composed of 4 packed single-precision …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtract 128 bits (composed of 4 packed 32-bit integers) …\nExtracts 128 bits (composed of 2 packed 64-bit integers) …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nTest packed double-precision (64-bit) floating-point …\nTest packed half-precision (16-bit) floating-point …\nTest packed single-precision (32-bit) floating-point …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nPerforms an affine transformation on the packed bytes in x.\nPerforms an affine transformation on the inverted packed …\nPerforms a multiplication in GF(2^8) on the packed bytes. …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nStores 8 32-bit integer elements from a to memory starting …\nStores 4 64-bit integer elements from a to memory starting …\nStores 4 double-precision (64-bit) floating-point elements …\nStores 8 single-precision (32-bit) floating-point elements …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nReturns values from <code>slice</code> at offsets determined by …\nStores 4 32-bit integer elements from a to memory starting …\nStores 4 64-bit integer elements from a to memory starting …\nStores 4 double-precision (64-bit) floating-point elements …\nStores 4 single-precision (32-bit) floating-point elements …\nCopy a to tmp, then insert 128 bits (composed of 4 packed …\nCopy a to tmp, then insert 128 bits (composed of 2 packed …\nCopy a to tmp, then insert 128 bits (composed of 4 packed …\nCopy a to tmp, then insert 128 bits (composed of 2 packed …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nLoad packed 16-bit integers from memory into dst using …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed 8-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nCounts the number of leading zero bits in each packed …\nCounts the number of leading zero bits in each packed …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply packed unsigned 8-bit integers in a by packed …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nMove packed 16-bit integers from a into dst using …\nMove packed 32-bit integers from a to dst using writemask …\nMove packed 64-bit integers from a to dst using writemask …\nMove packed 8-bit integers from a into dst using writemask …\nMove packed double-precision (64-bit) floating-point …\nMove packed single-precision (32-bit) floating-point …\nDuplicate even-indexed double-precision (64-bit) …\nDuplicate odd-indexed single-precision (32-bit) …\nDuplicate even-indexed single-precision (32-bit) …\nMultiply the low signed 32-bit integers from each packed …\nMultiply the low unsigned 32-bit integers from each packed …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the packed signed 16-bit integers in a and b, …\nMultiply the packed unsigned 16-bit integers in a and b, …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply the packed 16-bit integers in a and b, producing …\nMultiply the packed 32-bit integers in a and b, producing …\nMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing …\nFor each 64-bit element in b, select 8 unaligned bytes …\nCompute the bitwise OR of packed 32-bit integers in a and …\nCompute the bitwise OR of packed 64-bit integers in a and …\nCompute the bitwise OR of packed double-precision (64-bit) …\nCompute the bitwise OR of packed single-precision (32-bit) …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 64-bit integers in a within 256-bit lanes using …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle 16-bit integers in a across lanes using the …\nShuffle 32-bit integers in a across lanes using the …\nShuffle 64-bit integers in a across lanes using the …\nShuffle 8-bit integers in a across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nFor each packed 16-bit integer maps the value to the …\nFor each packed 32-bit integer maps the value to the …\nFor each packed 64-bit integer maps the value to the …\nFor each packed 8-bit integer maps the value to the number …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed 16-bit …\nReduce the packed 16-bit integers in a by addition using …\nReduce the packed 8-bit integers in a by addition using …\nReduce the packed 16-bit integers in a by bitwise AND …\nReduce the packed 8-bit integers in a by bitwise AND using …\nReduce the packed 16-bit integers in a by maximum using …\nReduce the packed 8-bit integers in a by maximum using …\nReduce the packed unsigned 16-bit integers in a by maximum …\nReduce the packed unsigned 8-bit integers in a by maximum …\nReduce the packed 16-bit integers in a by minimum using …\nReduce the packed 8-bit integers in a by minimum using …\nReduce the packed unsigned 16-bit integers in a by minimum …\nReduce the packed unsigned 8-bit integers in a by minimum …\nReduce the packed 16-bit integers in a by multiplication …\nReduce the packed 8-bit integers in a by multiplication …\nReduce the packed 16-bit integers in a by bitwise OR using …\nReduce the packed 8-bit integers in a by bitwise OR using …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nBroadcast 16-bit integer a to all elements of dst using …\nBroadcast 32-bit integer a to all elements of dst using …\nBroadcast 64-bit integer a to all elements of dst using …\nBroadcast 8-bit integer a to all elements of dst using …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffle 32-bit integers in a within 128-bit lanes using …\nShuffle 8-bit integers in a within 128-bit lanes using the …\nShuffle 128-bits (composed of 4 single-precision (32-bit) …\nShuffle 128-bits (composed of 2 double-precision (64-bit) …\nShuffle 128-bits (composed of 4 32-bit integers) selected …\nShuffle 128-bits (composed of 2 64-bit integers) selected …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in the high 64 bits of 128-bit …\nShuffle 16-bit integers in the low 64 bits of 128-bit …\nShift packed 16-bit integers in a left by count while …\nShift packed 32-bit integers in a left by count while …\nShift packed 64-bit integers in a left by count while …\nShift packed 16-bit integers in a left by imm8 while …\nShift packed 32-bit integers in a left by imm8 while …\nShift packed 64-bit integers in a left by imm8 while …\nShift packed 16-bit integers in a left by the amount …\nShift packed 32-bit integers in a left by the amount …\nShift packed 64-bit integers in a left by the amount …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nStore packed 32-bit integers from a into memory using …\nStore packed 64-bit integers from a into memory using …\nStore packed double-precision (64-bit) floating-point …\nStore packed single-precision (32-bit) floating-point …\nStore packed 16-bit integers from a into memory using …\nStore packed 32-bit integers from a into memory using …\nStore packed 64-bit integers from a into memory using …\nStore packed 8-bit integers from a into memory using …\nStore packed double-precision (64-bit) floating-point …\nStore packed single-precision (32-bit) floating-point …\nSubtract packed 16-bit integers in b from packed 16-bit …\nSubtract packed 32-bit integers in b from packed 32-bit …\nSubtract packed 64-bit integers in b from packed 64-bit …\nSubtract packed 8-bit integers in b from packed 8-bit …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract packed signed 16-bit integers in b from packed …\nSubtract packed signed 8-bit integers in b from packed …\nSubtract packed unsigned 16-bit integers in b from packed …\nSubtract packed unsigned 8-bit integers in b from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nCompute the bitwise AND of packed 16-bit integers in a and …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed 8-bit integers in a and …\nCompute the bitwise NAND of packed 16-bit integers in a …\nCompute the bitwise NAND of packed 32-bit integers in a …\nCompute the bitwise NAND of packed 64-bit integers in a …\nCompute the bitwise NAND of packed 8-bit integers in a and …\nUnpack and interleave 16-bit integers from the high half …\nUnpack and interleave 32-bit integers from the high half …\nUnpack and interleave 64-bit integers from the high half …\nUnpack and interleave 8-bit integers from the high half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nUnpack and interleave 16-bit integers from the low half of …\nUnpack and interleave 32-bit integers from the low half of …\nUnpack and interleave 64-bit integers from the low half of …\nUnpack and interleave 8-bit integers from the low half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nCompute the bitwise XOR of packed double-precision …\nCompute the bitwise XOR of packed single-precision …\nLoads packed 32-bit integers from memory pointed by …\nLoads packed 64-bit integers from memory pointed by …\nLoads packed double-precision (64-bit) floating-point …\nLoads packed single-precision (32-bit) floating-point …\nStores packed 32-bit integers from <code>a</code> into memory pointed …\nStores packed 64-bit integers from <code>a</code> into memory pointed …\nStores packed double-precision (64-bit) floating-point …\nStores packed single-precision (32-bit) floating-point …\nCompute the absolute value of packed signed 16-bit …\nCompute the absolute value of packed signed 32-bit …\nCompute the absolute value of packed signed 64-bit …\nCompute the absolute value of packed signed 8-bit integers …\nAdd packed 16-bit integers in a and b, and store the …\nAdd packed 32-bit integers in a and b, and store the …\nAdd packed 64-bit integers in a and b, and store the …\nAdd packed 8-bit integers in a and b, and store the …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd packed signed 16-bit integers in a and b using …\nAdd packed signed 8-bit integers in a and b using …\nAdd packed unsigned 16-bit integers in a and b using …\nAdd packed unsigned 8-bit integers in a and b using …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenate a and b into a 64-byte immediate result, shift …\nConcatenate pairs of 16-byte blocks in a and b into a …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed double-precision …\nCompute the bitwise AND of packed single-precision …\nCompute the bitwise NOT of packed 32-bit integers in a and …\nCompute the bitwise NOT of packed 64-bit integers in a and …\nCompute the bitwise NOT of packed double-precision …\nCompute the bitwise NOT of packed single-precision …\nAverage packed unsigned 16-bit integers in a and b, and …\nAverage packed unsigned 8-bit integers in a and b, and …\nBroadcasts the lower 2 packed single-precision (32-bit) …\nBroadcast the 4 packed single-precision (32-bit) …\nBroadcasts the 2 packed double-precision (64-bit) …\nBroadcasts the lower 2 packed 32-bit integers from a to …\nBroadcast the 4 packed 32-bit integers from a to all …\nBroadcasts the 2 packed 64-bit integers from a to all …\nBroadcast the low packed 8-bit integer from a to all …\nBroadcast the low packed 32-bit integer from a to all …\nBroadcast the low packed 64-bit integer from a to all …\nBroadcast the low double-precision (64-bit) floating-point …\nBroadcast the low single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nMultiply packed complex numbers in a by the complex …\nContiguously store the active 16-bit integers in a (those …\nContiguously store the active 32-bit integers in a (those …\nContiguously store the active 64-bit integers in a (those …\nContiguously store the active 8-bit integers in a (those …\nContiguously store the active double-precision (64-bit) …\nContiguously store the active single-precision (32-bit) …\nTest each 32-bit element of a for equality with all other …\nTest each 64-bit element of a for equality with all other …\nCompute the complex conjugates of complex numbers in a, …\nConvert packed single-precision (32-bit) floating-point …\nSign extend packed 16-bit integers in a to packed 32-bit …\nSign extend packed 16-bit integers in a to packed 64-bit …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed 32-bit integers in a to packed 16-bit …\nSign extend packed 32-bit integers in a to packed 64-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nSign extend packed 8-bit integers in a to packed 16-bit …\nSign extend packed 8-bit integers in a to packed 32-bit …\nSign extend packed 8-bit integers in the low 4 bytes of a …\nZero extend packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 16-bit integers in the low 8 …\nConvert packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in the low 8 …\nZero extend packed unsigned 8-bit integers in the low 4 …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed BF16 (16-bit) floating-point elements in a …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nCompute the sum of absolute differences (SADs) of …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nLoad contiguous active 16-bit integers from a (those with …\nLoad contiguous active 32-bit integers from a (those with …\nLoad contiguous active 64-bit integers from a (those with …\nLoad contiguous active 8-bit integers from a (those with …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nLoad contiguous active 16-bit integers from unaligned …\nLoad contiguous active 32-bit integers from unaligned …\nLoad contiguous active 64-bit integers from unaligned …\nLoad contiguous active 8-bit integers from unaligned …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nExtract 128 bits (composed of 4 packed single-precision …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtract 128 bits (composed of 4 packed 32-bit integers) …\nExtracts 128 bits (composed of 2 packed 64-bit integers) …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nPerforms an affine transformation on the packed bytes in x.\nPerforms an affine transformation on the inverted packed …\nPerforms a multiplication in GF(2^8) on the packed bytes. …\nCopy a to tmp, then insert 128 bits (composed of 4 packed …\nCopy a to tmp, then insert 128 bits (composed of 2 packed …\nCopy a to tmp, then insert 128 bits (composed of 4 packed …\nCopy a to tmp, then insert 128 bits (composed of 2 packed …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nLoad packed 16-bit integers from memory into dst using …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed 8-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nCounts the number of leading zero bits in each packed …\nCounts the number of leading zero bits in each packed …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply packed unsigned 8-bit integers in a by packed …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nMove packed 16-bit integers from a into dst using zeromask …\nMove packed 32-bit integers from a into dst using zeromask …\nMove packed 64-bit integers from a into dst using zeromask …\nMove packed 8-bit integers from a into dst using zeromask …\nMove packed double-precision (64-bit) floating-point …\nMove packed single-precision (32-bit) floating-point …\nDuplicate even-indexed double-precision (64-bit) …\nDuplicate odd-indexed single-precision (32-bit) …\nDuplicate even-indexed single-precision (32-bit) …\nMultiply the low signed 32-bit integers from each packed …\nMultiply the low unsigned 32-bit integers from each packed …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the packed signed 16-bit integers in a and b, …\nMultiply the packed unsigned 16-bit integers in a and b, …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply the packed 16-bit integers in a and b, producing …\nMultiply the packed 32-bit integers in a and b, producing …\nMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing …\nFor each 64-bit element in b, select 8 unaligned bytes …\nCompute the bitwise OR of packed 32-bit integers in a and …\nCompute the bitwise OR of packed 64-bit integers in a and …\nCompute the bitwise OR of packed double-precision (64-bit) …\nCompute the bitwise OR of packed single-precision (32-bit) …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 64-bit integers in a within 256-bit lanes using …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle 16-bit integers in a across lanes using the …\nShuffle 32-bit integers in a across lanes using the …\nShuffle 64-bit integers in a across lanes using the …\nShuffle 8-bit integers in a across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nFor each packed 16-bit integer maps the value to the …\nFor each packed 32-bit integer maps the value to the …\nFor each packed 64-bit integer maps the value to the …\nFor each packed 8-bit integer maps the value to the number …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed 16-bit …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nBroadcast 32-bit integer a to all elements of dst using …\nBroadcast 64-bit integer a to all elements of dst using …\nBroadcast 8-bit integer a to all elements of dst using …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffle 32-bit integers in a within 128-bit lanes using …\nShuffle packed 8-bit integers in a according to shuffle …\nShuffle 128-bits (composed of 4 single-precision (32-bit) …\nShuffle 128-bits (composed of 2 double-precision (64-bit) …\nShuffle 128-bits (composed of 4 32-bit integers) selected …\nShuffle 128-bits (composed of 2 64-bit integers) selected …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in the high 64 bits of 128-bit …\nShuffle 16-bit integers in the low 64 bits of 128-bit …\nShift packed 16-bit integers in a left by count while …\nShift packed 32-bit integers in a left by count while …\nShift packed 64-bit integers in a left by count while …\nShift packed 16-bit integers in a left by imm8 while …\nShift packed 32-bit integers in a left by imm8 while …\nShift packed 64-bit integers in a left by imm8 while …\nShift packed 16-bit integers in a left by the amount …\nShift packed 32-bit integers in a left by the amount …\nShift packed 64-bit integers in a left by the amount …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nSubtract packed 16-bit integers in b from packed 16-bit …\nSubtract packed 32-bit integers in b from packed 32-bit …\nSubtract packed 64-bit integers in b from packed 64-bit …\nSubtract packed 8-bit integers in b from packed 8-bit …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract packed signed 16-bit integers in b from packed …\nSubtract packed signed 8-bit integers in b from packed …\nSubtract packed unsigned 16-bit integers in b from packed …\nSubtract packed unsigned 8-bit integers in b from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nUnpack and interleave 16-bit integers from the high half …\nUnpack and interleave 32-bit integers from the high half …\nUnpack and interleave 64-bit integers from the high half …\nUnpack and interleave 8-bit integers from the high half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nUnpack and interleave 16-bit integers from the low half of …\nUnpack and interleave 32-bit integers from the low half of …\nUnpack and interleave 64-bit integers from the low half of …\nUnpack and interleave 8-bit integers from the low half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nCompute the bitwise XOR of packed double-precision …\nCompute the bitwise XOR of packed single-precision …\nCompares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …\nCompares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …\nCompare packed signed 64-bit integers in a and b, and …\nCompares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the …\nCompares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …\nCompares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …\nCompares packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompares packed single-precision (32-bit) floating-point …\nCompares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …\nCompares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …\nCompare packed signed 64-bit integers in a and b, and …\nCompares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the …\nCompares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …\nCompares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …\nCompares packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompares packed single-precision (32-bit) floating-point …\nLoads 8 32-bit integer elements from memory starting at …\nLoads 4 64-bit integer elements from memory starting at …\nLoads 4 double-precision (64-bit) floating-point elements …\nLoads 8 single-precision (32-bit) floating-point elements …\nLoads 4 32-bit integer elements from memory starting at …\nLoads 4 64-bit integer elements from memory starting at …\nLoads 4 double-precision (64-bit) floating-point elements …\nLoads 4 single-precision (32-bit) floating-point elements …\nDuplicate even-indexed double-precision (64-bit) …\nDuplicate odd-indexed single-precision (32-bit) …\nDuplicate even-indexed single-precision (32-bit) …\nCreates mask from the most significant bit of each 8-bit …\nSets each bit of the returned mask based on the most …\nSets each bit of the returned mask based on the most …\nSet each bit of mask register k based on the most …\nSet each bit of mask register k based on the most …\nSet each bit of mask register k based on the most …\nSet each bit of mask register k based on the most …\nSet each packed 16-bit integer in dst to all ones or all …\nSet each packed 32-bit integer in dst to all ones or all …\nSet each packed 64-bit integer in dst to all ones or all …\nSet each packed 8-bit integer in dst to all ones or all …\nComputes the sum of absolute differences (SADs) of …\nMultiplies the low 32-bit integers from each packed 64-bit …\nMultiplies the low unsigned 32-bit integers from each …\nMultiply packed complex numbers in a and b, and store the …\nMultiplies packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiplies packed single-precision (32-bit) floating-point …\nMultiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, producing\nMultiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, …\nMultiplies packed 16-bit integers in <code>a</code> and <code>b</code>, producing …\nMultiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, producing\nMultiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, producing\nMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing …\nFor each 64-bit element in b, select 8 unaligned bytes …\nCompute the bitwise OR of packed 32-bit integers in a and …\nCompute the bitwise OR of packed 64-bit integers in a and …\nComputes the bitwise OR packed double-precision (64-bit) …\nComputes the bitwise OR packed single-precision (32-bit) …\nComputes the bitwise OR of 256 bits (representing integer …\nConverts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …\nConverts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …\nConverts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …\nConverts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …\nShuffles 256 bits (composed of 4 packed double-precision …\nShuffles 256 bits (composed of 8 packed single-precision …\nShuffles 128-bits (composed of integer data) selected by …\nShuffles 128-bits of integer data selected by <code>imm8</code> from <code>a</code> …\nPermutes 64-bit integers from <code>a</code> using control mask <code>imm8</code>.\nShuffles 64-bit floating-point elements in <code>a</code> across lanes …\nShuffles double-precision (64-bit) floating-point elements …\nShuffles single-precision (32-bit) floating-point elements …\nPermutes packed 32-bit integers from <code>a</code> according to the …\nShuffles eight 32-bit floating-point elements in <code>a</code> across …\nShuffles double-precision (64-bit) floating-point elements …\nShuffles single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle half-precision (16-bit) floating-point elements in …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 64-bit integers in a within 256-bit lanes using …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle 16-bit integers in a across lanes using the …\nShuffle 32-bit integers in a across lanes using the …\nShuffle 64-bit integers in a across lanes using the …\nShuffle 8-bit integers in a across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle half-precision (16-bit) floating-point elements in …\nShuffle single-precision (32-bit) floating-point elements …\nFor each packed 16-bit integer maps the value to the …\nFor each packed 32-bit integer maps the value to the …\nFor each packed 64-bit integer maps the value to the …\nFor each packed 8-bit integer maps the value to the number …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed 16-bit …\nComputes the approximate reciprocal of packed …\nReduce the packed 16-bit integers in a by addition. …\nReduce the packed 8-bit integers in a by addition. Returns …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed 16-bit integers in a by bitwise AND. …\nReduce the packed 8-bit integers in a by bitwise AND. …\nReduce the packed 16-bit integers in a by maximum. Returns …\nReduce the packed 8-bit integers in a by maximum. Returns …\nReduce the packed unsigned 16-bit integers in a by …\nReduce the packed unsigned 8-bit integers in a by maximum. …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed 16-bit integers in a by minimum. Returns …\nReduce the packed 8-bit integers in a by minimum. Returns …\nReduce the packed unsigned 16-bit integers in a by …\nReduce the packed unsigned 8-bit integers in a by minimum. …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed 16-bit integers in a by multiplication. …\nReduce the packed 8-bit integers in a by multiplication. …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed 16-bit integers in a by bitwise OR. …\nReduce the packed 8-bit integers in a by bitwise OR. …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRounds packed double-precision (64-bit) floating point …\nRounds packed single-precision (32-bit) floating point …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nComputes the approximate reciprocal square root of packed …\nComputes the absolute differences of packed unsigned 8-bit …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nBroadcasts 16-bit integer <code>a</code> to all elements of returned …\nBroadcasts 32-bit integer <code>a</code> to all elements of returned …\nBroadcasts 64-bit integer <code>a</code> to all elements of returned …\nBroadcasts 8-bit integer <code>a</code> to all elements of returned …\nBroadcasts double-precision (64-bit) floating-point value <code>a</code>…\nBroadcast the half-precision (16-bit) floating-point value …\nBroadcasts single-precision (32-bit) floating-point value <code>a</code>…\nSets packed 16-bit integers in returned vector with the …\nSets packed 32-bit integers in returned vector with the …\nSets packed 64-bit integers in returned vector with the …\nSets packed 8-bit integers in returned vector with the …\nSets packed __m256 returned vector with the supplied …\nSets packed __m256d returned vector with the supplied …\nSets packed __m256i returned vector with the supplied …\nSets packed double-precision (64-bit) floating-point …\nSet packed half-precision (16-bit) floating-point elements …\nSets packed single-precision (32-bit) floating-point …\nSets packed 16-bit integers in returned vector with the …\nSets packed 32-bit integers in returned vector with the …\nSets packed 64-bit integers in returned vector with the …\nSets packed 8-bit integers in returned vector with the …\nSets packed __m256 returned vector with the supplied …\nSets packed __m256d returned vector with the supplied …\nSets packed __m256i returned vector with the supplied …\nSets packed double-precision (64-bit) floating-point …\nSet packed half-precision (16-bit) floating-point elements …\nSets packed single-precision (32-bit) floating-point …\nReturns vector of type __m256d with all elements set to …\nReturn vector of type __m256h with all elements set to …\nReturns vector of type __m256 with all elements set to …\nReturns vector of type __m256i with all elements set to …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffles 32-bit integers in 128-bit lanes of <code>a</code> using the …\nShuffles bytes from <code>a</code> according to the content of <code>b</code>.\nShuffle 128-bits (composed of 4 single-precision (32-bit) …\nShuffle 128-bits (composed of 2 double-precision (64-bit) …\nShuffle 128-bits (composed of 4 32-bit integers) selected …\nShuffle 128-bits (composed of 2 64-bit integers) selected …\nShuffles double-precision (64-bit) floating-point elements …\nShuffles single-precision (32-bit) floating-point elements …\nShuffles 16-bit integers in the high 64 bits of 128-bit …\nShuffles 16-bit integers in the low 64 bits of 128-bit …\nNegates packed 16-bit integers in <code>a</code> when the corresponding …\nNegates packed 32-bit integers in <code>a</code> when the corresponding …\nNegates packed 8-bit integers in <code>a</code> when the corresponding …\nShifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …\nShift packed 16-bit integers in a left by the amount …\nShifts packed 32-bit integers in <code>a</code> left by the amount …\nShifts packed 64-bit integers in <code>a</code> left by the amount …")