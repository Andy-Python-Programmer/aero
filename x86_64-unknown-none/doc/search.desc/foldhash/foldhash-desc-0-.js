searchState.loadedDescShard("foldhash", 0, "This crate provides foldhash, a fast, non-cryptographic, …\nA random seed intended to be shared by many different …\nThe foldhash implementation optimized for speed.\nReturns the argument unchanged.\nGenerates a new <code>SharedSeed</code> from a single 64-bit seed.\nReturns the globally shared fixed <code>SharedSeed</code> as used by …\nReturns the globally shared randomly initialized <code>SharedSeed</code>…\nCalls <code>U::from(self)</code>.\nThe foldhash implementation optimized for quality.\nA <code>BuildHasher</code> for <code>fast::FoldHasher</code> that always has the …\nA <code>Hasher</code> instance implementing foldhash, optimized for …\nA <code>BuildHasher</code> for <code>fast::FoldHasher</code> that is randomly …\nA <code>BuildHasher</code> for <code>fast::FoldHasher</code> that is randomly …\nGenerates a fixed <code>SeedableRandomState</code>, similar to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a random <code>SeedableRandomState</code>, similar to …\nInitializes this <code>FoldHasher</code> with the given per-hasher seed …\nGenerates a <code>SeedableRandomState</code> with the given per-hasher …\nCreates a <code>FixedState</code> with the given per-hasher-seed.\nA <code>BuildHasher</code> for <code>quality::FoldHasher</code> that always has the …\nA <code>Hasher</code> instance implementing foldhash, optimized for …\nA <code>BuildHasher</code> for <code>quality::FoldHasher</code> that is randomly …\nA <code>BuildHasher</code> for <code>quality::FoldHasher</code> that is randomly …\nGenerates a fixed <code>SeedableRandomState</code>, similar to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a random <code>SeedableRandomState</code>, similar to …\nInitializes this <code>FoldHasher</code> with the given per-hasher seed …\nGenerates a <code>SeedableRandomState</code> with the given per-hasher …\nCreates a <code>FixedState</code> with the given per-hasher seed.")