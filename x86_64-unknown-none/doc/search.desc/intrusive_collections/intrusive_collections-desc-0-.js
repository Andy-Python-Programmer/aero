searchState.loadedDescShard("intrusive_collections", 0, "Intrusive collections for Rust.\nTrait for a adapter which allows a type to be inserted …\nAn endpoint of a range of keys.\nThe default implementation of <code>LinkOps</code> associated with a …\nThe <code>PointerOps</code> type used by an <code>Adapter</code> generated by …\nAn exclusive bound.\nAn inclusive bound.\nType of the key returned by <code>get_key</code>.\nExtension of the <code>Adapter</code> trait to provide a way of …\nBase trait for link operations.\nCollection-specific link operations which allow an object …\nThe link pointer type.\nThe associated constant that represents <code>Ops::default()</code>.\nThe default link operations.\nPointer type which owns an instance of a value.\nTrait for pointer conversion operations.\nCollection-specific pointer conversions which allow an …\nAn infinite endpoint. Indicates that there is no bound in …\nUnchecked shared pointer\nObject type which is inserted into an intrusive collection.\nAttempts to acquire ownership of a link so that it can be …\nUnsafe macro to get a raw pointer to an outer object from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>UnsafeRef</code> from a <code>Box</code>\nConstructs an owned pointer from a raw pointer.\nCreates an <code>UnsafeRef</code> from a raw pointer\nGets the key for the given object.\nGets a reference to the link for the given object.\nGets a reference to an object from a reference to a link …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts an <code>UnsafeRef</code> into a <code>Box</code>\nConsumes the owned pointer and returns a raw pointer to …\nConverts an <code>UnsafeRef</code> into a raw pointer\nMacro to generate an implementation of <code>Adapter</code> for a given …\nReturns a reference to the link operations.\nReturns a reference to the mutable link operations.\nIntrusive doubly-linked list.\nConstructs an instance of <code>DefaultPointerOps</code>.\nCalculates the offset of the specified field from the …\nReturns a reference to the pointer converter.\nIntrusive red-black tree.\nReleases ownership of a link that was previously acquired …\nIntrusive singly-linked list.\nIntrusive xor doubly-linked list which uses less memory …\nIntrusive atomic link that allows an object to be inserted …\nDefault <code>AtomicLinkOps</code> implementation for <code>LinkedList</code>.\nA cursor which provides read-only access to a <code>LinkedList</code>.\nA cursor which provides mutable access to a <code>LinkedList</code>.\nA cursor with ownership over the <code>LinkedList</code> it points into.\nAn iterator which consumes a <code>LinkedList</code>.\nAn iterator over references to the items of a <code>LinkedList</code>.\nIntrusive link that allows an object to be inserted into a …\nDefault <code>LinkOps</code> implementation for <code>LinkedList</code>.\nAn intrusive doubly-linked list.\nLink operations for <code>LinkedList</code>.\nReturns a read-only cursor pointing to the current element.\nReturns a read-only cursor pointing to the current element.\nReturns a <code>Cursor</code> pointing to the last element of the list. …\nReturns a <code>CursorMut</code> pointing to the last element of the …\nReturns a <code>CursorOwning</code> pointing to the last element of the …\nRemoves all elements from the <code>LinkedList</code>.\nClones and returns the pointer that points to the element …\nReturns a null <code>Cursor</code> for this list.\nCreates a <code>Cursor</code> from a pointer to an element.\nReturns a null <code>CursorMut</code> for this list.\nCreates a <code>CursorMut</code> from a pointer to an element.\nReturns a null <code>CursorOwning</code> for this list.\nCreates a <code>CursorOwning</code> from a pointer to an element.\nEmpties the <code>LinkedList</code> without unlinking or freeing …\nForcibly unlinks an object from a <code>LinkedList</code>.\nForcibly unlinks an object from a <code>LinkedList</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>Cursor</code> pointing to the first element of the …\nReturns a <code>CursorMut</code> pointing to the first element of the …\nReturns a <code>CursorOwning</code> pointing to the first element of …\nReturns a reference to the object that the cursor is …\nReturns a reference to the object that the cursor is …\nInserts a new element into the <code>LinkedList</code> after the …\nInserts a new element into the <code>LinkedList</code> before the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the inner <code>LinkedList</code>.\nConsumes <code>CursorMut</code> and returns a reference to the object …\nReturns <code>true</code> if the <code>LinkedList</code> is empty.\nChecks whether the <code>Link</code> is linked into a <code>LinkedList</code>.\nChecks whether the <code>AtomicLink</code> is linked into a <code>LinkedList</code>.\nChecks if the cursor is currently pointing to the null …\nChecks if the cursor is currently pointing to the null …\nGets an iterator over the objects in the <code>LinkedList</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nCreates a new <code>Link</code>.\nCreates a new <code>AtomicLink</code>.\nCreates an empty <code>LinkedList</code>.\nReturns the “next” link pointer of <code>ptr</code>.\nReturns a cursor pointing to the next element of the …\nReturns a cursor pointing to the next element of the …\nReturns a cursor pointing to the previous element of the …\nReturns a cursor pointing to the previous element of the …\nRemoves the last element of the <code>LinkedList</code>.\nRemoves the first element of the <code>LinkedList</code>.\nReturns the “prev” link pointer of <code>ptr</code>.\nInserts a new element at the end of the <code>LinkedList</code>.\nInserts a new element at the start of the <code>LinkedList</code>.\nRemoves the current element from the <code>LinkedList</code>.\nRemoves the current element from the <code>LinkedList</code> and …\nSets the “next” link pointer of <code>ptr</code>.\nSets the “prev” link pointer of <code>ptr</code>.\nInserts the elements from the given <code>LinkedList</code> after the …\nMoves all element from the given <code>LinkedList</code> before the …\nSplits the list into two after the current element. This …\nSplits the list into two before the current element. This …\nTakes all the elements out of the <code>LinkedList</code>, leaving it …\nPerform action with mutable reference to the cursor.\nIntrusive link that allows an object to be inserted into a …\nDefault <code>LinkOps</code> implementation for <code>RBTree</code>.\nThe color of a red-black tree node.\nA cursor which provides read-only access to a <code>RBTree</code>.\nA cursor which provides mutable access to a <code>RBTree</code>.\nA cursor with ownership over the <code>RBTree</code> it points into.\nAn entry in a <code>RBTree</code>.\nA cursor pointing to a slot in which an element can be …\nAn iterator which consumes a <code>RBTree</code>.\nAn iterator over references to the items of a <code>RBTree</code>.\nIntrusive link that allows an object to be inserted into a …\nDefault <code>LinkOps</code> implementation for <code>RBTree</code>.\nAn occupied entry.\nAn intrusive red-black tree.\nLink operations for <code>RBTree</code>.\nA vacant entry.\nReturns a read-only cursor pointing to the current element.\nReturns a read-only cursor pointing to the current element.\nReturns a <code>Cursor</code> pointing to the last element of the tree. …\nReturns a <code>CursorMut</code> pointing to the last element of the …\nReturns a <code>CursorOwning</code> pointing to the last element of the …\nRemoves all elements from the <code>RBTree</code>.\nClones and returns the pointer that points to the element …\nReturns the color of <code>ptr</code>.\nReturns a null <code>Cursor</code> for this tree.\nCreates a <code>Cursor</code> from a pointer to an element.\nReturns a null <code>CursorMut</code> for this tree.\nCreates a <code>CursorMut</code> from a pointer to an element.\nReturns a null <code>CursorOwning</code> for this tree.\nCreates a <code>CursorOwning</code> from a pointer to an element.\nReturns an <code>Entry</code> for the given key which contains a …\nEmpties the <code>RBTree</code> without unlinking or freeing objects in …\nReturns a <code>Cursor</code> pointing to an element with the given …\nReturns a <code>CursorMut</code> pointing to an element with the given …\nsuch element is found then a null cursor is returned.\nForcibly unlinks an object from a <code>RBTree</code>.\nForcibly unlinks an object from a <code>RBTree</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>Cursor</code> pointing to the first element of the …\nReturns a <code>CursorMut</code> pointing to the first element of the …\nReturns a <code>CursorOwning</code> pointing to the first element of …\nReturns a reference to the object that the cursor is …\nReturns a reference to the object that the cursor is …\nInserts a new element into the <code>RBTree</code>.\nInserts a new element into the <code>RBTree</code>.\nInserts a new element into the <code>RBTree</code> at the location …\nInserts a new element into the <code>RBTree</code> after the current …\nInserts a new element into the <code>RBTree</code> before the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the inner <code>RBTree</code>.\nConsumes <code>CursorMut</code> and returns a reference to the object …\nReturns <code>true</code> if the <code>RBTree</code> is empty.\nChecks whether the <code>Link</code> is linked into a <code>RBTree</code>.\nChecks whether the <code>AtomicLink</code> is linked into a <code>RBTree</code>.\nChecks if the cursor is currently pointing to the null …\nChecks if the cursor is currently pointing to the null …\nGets an iterator over the objects in the <code>RBTree</code>.\nReturns the left child of <code>ptr</code>.\nReturns a <code>Cursor</code> pointing to the lowest element whose key …\nReturns a <code>CursorMut</code> pointing to the first element whose …\nReturns a <code>CursorOwning</code> pointing to the first element whose …\nMoves the cursor to the next element of the <code>RBTree</code>.\nMoves the cursor to the next element of the <code>RBTree</code>.\nMoves the cursor to the previous element of the <code>RBTree</code>.\nMoves the cursor to the previous element of the <code>RBTree</code>.\nCreates a new <code>Link</code>.\nCreates a new <code>AtomicLink</code>.\nCreates an empty <code>RBTree</code>.\nInserts an element into the <code>RBTree</code> if the entry is vacant, …\nCalls the given function and inserts the result into the …\nReturns the parent of <code>ptr</code>.\nReturns a cursor pointing to the next element of the <code>RBTree</code>…\nReturns a cursor pointing to the next element of the <code>RBTree</code>…\nReturns a cursor pointing to the previous element of the …\nReturns a cursor pointing to the previous element of the …\nConstructs a double-ended iterator over a sub-range of …\nRemoves the current element from the <code>RBTree</code>.\nRemoves the current element from the <code>RBTree</code> and inserts …\nReturns the right child of <code>ptr</code>.\nSets the color of <code>ptr</code>.\nSets the left child of <code>ptr</code>.\nSets the parent of <code>ptr</code>.\nSets the right child of <code>ptr</code>.\nTakes all the elements out of the <code>RBTree</code>, leaving it …\nReturns a <code>Cursor</code> pointing to the last element whose key is …\nReturns a <code>CursorMut</code> pointing to the last element whose key …\nReturns a <code>CursorOwning</code> pointing to the last element whose …\nPerform action with mutable reference to the cursor.\nIntrusive link that allows an object to be inserted into a …\nDefault <code>AtomicLinkOps</code> implementation for <code>LinkedList</code>.\nA cursor which provides read-only access to a …\nA cursor which provides mutable access to a …\nA cursor with ownership over the <code>SinglyLinkedList</code> it …\nAn iterator which consumes a <code>SinglyLinkedList</code>.\nAn iterator over references to the items of a …\nIntrusive link that allows an object to be inserted into a …\nDefault <code>LinkOps</code> implementation for <code>SinglyLinkedList</code>.\nAn intrusive singly-linked list.\nLink operations for <code>SinglyLinkedList</code>.\nReturns a read-only cursor pointing to the current element.\nReturns a read-only cursor pointing to the current element.\nRemoves all elements from the <code>SinglyLinkedList</code>.\nClones and returns the pointer that points to the element …\nReturns a null <code>Cursor</code> for this list.\nCreates a <code>Cursor</code> from a pointer to an element.\nReturns a null <code>CursorMut</code> for this list.\nCreates a <code>CursorMut</code> from a pointer to an element.\nReturns a null <code>CursorOwning</code> for this list.\nCreates a <code>CursorOwning</code> from a pointer to an element.\nEmpties the <code>SinglyLinkedList</code> without unlinking or freeing …\nForcibly unlinks an object from a <code>SinglyLinkedList</code>.\nForcibly unlinks an object from a <code>SinglyLinkedList</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>Cursor</code> pointing to the first element of the …\nReturns a <code>CursorMut</code> pointing to the first element of the …\nReturns a <code>CursorOwning</code> pointing to the first element of …\nReturns a reference to the object that the cursor is …\nReturns a reference to the object that the cursor is …\nInserts a new element into the <code>SinglyLinkedList</code> after the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the inner <code>SinglyLinkedList</code>.\nConsumes <code>CursorMut</code> and returns a reference to the object …\nReturns <code>true</code> if the <code>SinglyLinkedList</code> is empty.\nChecks whether the <code>Link</code> is linked into a <code>SinglyLinkedList</code>.\nChecks whether the <code>AtomicLink</code> is linked into a …\nChecks if the cursor is currently pointing to the null …\nChecks if the cursor is currently pointing to the null …\nGets an iterator over the objects in the <code>SinglyLinkedList</code>.\nMoves the cursor to the next element of the …\nMoves the cursor to the next element of the …\nCreates a new <code>Link</code>.\nCreates a new <code>AtomicLink</code>.\nCreates an empty <code>SinglyLinkedList</code>.\nReturns the “next” link pointer of <code>ptr</code>.\nReturns a cursor pointing to the next element of the …\nReturns a cursor pointing to the next element of the …\nRemoves the first element of the <code>SinglyLinkedList</code>.\nInserts a new element at the start of the <code>SinglyLinkedList</code>.\nRemoves the next element from the <code>SinglyLinkedList</code>.\nRemoves the next element from the <code>SinglyLinkedList</code> and …\nSets the “next” link pointer of <code>ptr</code>.\nInserts the elements from the given <code>SinglyLinkedList</code> after …\nSplits the list into two after the current element. This …\nTakes all the elements out of the <code>SinglyLinkedList</code>, …\nPerform action with mutable reference to the cursor.\nIntrusive link that allows an object to be inserted into a …\nDefault <code>AtomicLinkOps</code> implementation for <code>LinkedList</code>.\nA cursor which provides read-only access to a <code>XorLinkedList</code>…\nA cursor which provides mutable access to a <code>XorLinkedList</code>.\nA cursor with ownership over the <code>XorLinkedList</code> it points …\nAn iterator which consumes a <code>XorLinkedList</code>.\nAn iterator over references to the items of a <code>XorLinkedList</code>…\nIntrusive link that allows an object to be inserted into a …\nDefault <code>LinkOps</code> implementation for <code>XorLinkedList</code>.\nIntrusive xor doubly-linked list which uses less memory …\nLink operations for <code>XorLinkedList</code>.\nReturns a read-only cursor pointing to the current element.\nReturns a read-only cursor pointing to the current element.\nReturns a <code>Cursor</code> pointing to the last element of the list. …\nReturns a <code>CursorMut</code> pointing to the last element of the …\nReturns a <code>CursorOwning</code> pointing to the last element of the …\nRemoves all elements from the <code>XorLinkedList</code>.\nClones and returns the pointer that points to the element …\nReturns a null <code>Cursor</code> for this list.\nCreates a <code>Cursor</code> from a pointer to an element and a …\nCreates a <code>Cursor</code> from a pointer to an element and a …\nReturns a null <code>CursorMut</code> for this list.\nCreates a <code>CursorMut</code> from a pointer to an element and a …\nCreates a <code>CursorMut</code> from a pointer to an element and a …\nReturns a null <code>CursorOwning</code> for this list.\nCreates a <code>CursorOwning</code> from a pointer to an element and a …\nCreates a <code>CursorOwning</code> from a pointer to an element and a …\nEmpties the <code>XorLinkedList</code> without unlinking or freeing …\nForcibly unlinks an object from a <code>XorLinkedList</code>.\nForcibly unlinks an object from a <code>XorLinkedList</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>Cursor</code> pointing to the first element of the …\nReturns a <code>CursorMut</code> pointing to the first element of the …\nReturns a <code>CursorOwning</code> pointing to the first element of …\nReturns a reference to the object that the cursor is …\nReturns a reference to the object that the cursor is …\nInserts a new element into the <code>XorLinkedList</code> after the …\nInserts a new element into the <code>XorLinkedList</code> before the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the inner <code>XorLinkedList</code>.\nConsumes <code>CursorMut</code> and returns a reference to the object …\nReturns <code>true</code> if the <code>XorLinkedList</code> is empty.\nChecks whether the <code>Link</code> is linked into a <code>XorLinkedList</code>.\nChecks whether the <code>Link</code> is linked into a <code>XorLinkedList</code>.\nChecks if the cursor is currently pointing to the null …\nChecks if the cursor is currently pointing to the null …\nGets an iterator over the objects in the <code>XorLinkedList</code>.\nMoves the cursor to the next element of the <code>XorLinkedList</code>.\nMoves the cursor to the next element of the <code>XorLinkedList</code>.\nMoves the cursor to the previous element of the …\nMoves the cursor to the previous element of the …\nCreates a new <code>Link</code>.\nCreates a new <code>Link</code>.\nCreates an empty <code>XorLinkedList</code>.\nReturns the “next” link pointer of <code>ptr</code>.\nReturns a cursor pointing to the next element of the …\nReturns a cursor pointing to the next element of the …\nReturns a cursor pointing to the previous element of the …\nReturns a cursor pointing to the previous element of the …\nRemoves the last element of the <code>XorLinkedList</code>.\nRemoves the first element of the <code>XorLinkedList</code>.\nReturns the “prev” link pointer of <code>ptr</code>.\nInserts a new element at the end of the <code>XorLinkedList</code>.\nInserts a new element at the start of the <code>XorLinkedList</code>.\nRemoves the current element from the <code>XorLinkedList</code>.\nReplaces the “next” or “prev” link pointer of <code>ptr</code>.\nRemoves the current element from the <code>XorLinkedList</code> and …\nReverses the list in-place.\nAssigns the “prev” and “next” link pointers of <code>ptr</code>.\nInserts the elements from the given <code>XorLinkedList</code> after …\nMoves all element from the given <code>XorLinkedList</code> before the …\nSplits the list into two after the current element. This …\nSplits the list into two before the current element. This …\nTakes all the elements out of the <code>XorLinkedList</code>, leaving …\nPerform action with mutable reference to the cursor.")