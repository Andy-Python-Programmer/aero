searchState.loadedDescShard("vte", 0, "Parser for implementing virtual terminal emulators\nImmutable subparameter iterator.\nParser for raw <em>VTE</em> protocol which delegates actions to a …\nPerforms actions requested by the Parser\nAdvance the parser state.\nPartially advance the parser state.\nANSI Terminal Stream Parsing.\nA final character has arrived for a CSI sequence\nThe final character of an escape sequence has arrived.\nExecute a C0 or C1 control function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInvoked when a final character arrives in first part of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no parameters present.\nReturns an iterator over all parameters and subparameters.\nReturns the number of parameters.\nCreate a new Parser\nCreate a new Parser with a custom size for the Operating …\nDispatch an operating system command.\nDraw a character to the screen and update states.\nPass bytes as part of a device control string to the …\nWhether the parser should terminate prematurely.\nCalled when a device control string is terminated.\nClear above cursor.\nClear entire line.\nClear entire terminal.\nClear all stops.\nTerminal character attributes.\nThe background color.\nSet indexed background color.\nCursor is a vertical bar <code>⎸</code>.\nClear below cursor.\nBlack.\nBlink cursor fast.\nBlink cursor slowly.\nCursor is a block like <code>▒</code>.\nBlue.\nBold text.\nBright black.\nBright blue.\nBright cyan.\nThe bright foreground color.\nBright green.\nBright magenta.\nBright red.\nBright white.\nBright yellow.\nC0 set of 7-bit control characters (from ANSI X3.4-1977).\nCancel blink.\nCancel bold.\nCancel bold and dim.\nCancel text hiding.\nCancel italic.\nCancel inversion.\nCancel strikeout.\nCancel all underlines.\nIdentifiers which can be assigned to a graphic character …\nMode for clearing terminal.\nSelect 80 or 132 columns per page (DECCOLM).\nClear stop under cursor.\nColor for the cursor itself.\nTerminal cursor shape.\nTerminal cursor configuration.\nCyan.\nReport <code>Esc</code>, <code>alt</code> + <code>key</code>, <code>ctrl</code> + <code>key</code>, <code>ctrl</code> + <code>alt</code> + <code>key</code>, <code>shift</code>\nDashed underlined text.\nSCP’s second parameter value of 1.\nSCP’s first parameter value of 0. Behavior is …\nRemove the given flags from the active ones.\nDim or secondary color.\nDim black.\nDim blue.\nDim cyan.\nDim foreground.\nDim green.\nDim magenta.\nDim red.\nDim white.\nDim yellow.\nDotted underlined text.\nUnderlined twice.\nEnables this feature for all keys including the exceptions …\nEnables this feature except for keys with well-known …\nThe foreground color.\nSet indexed foreground color.\nDefault set, is designated as ASCII at startup.\nGreen.\nType that handles actions from the parser.\nInvisible cursor.\nDo not display characters.\nCursor is a box like <code>☐</code>.\nSCP’s second parameter value of 0 (the default). …\nIRM Insert Mode.\nItalic text.\nA set of `kitty keyboard protocol’ modes.\nDescribes how the new <code>KeyboardModes</code> should be applied.\nSCP’s first parameter value of 1 which sets character …\nClear left of cursor.\nMode for clearing line.\nMagenta.\nWrapper for the ANSI modes.\nXTMODKEYS modifyOtherKeys state.\nNo keyboard protocol mode is set.\nKnown ANSI mode.\nKnown private mode.\nStandard colors.\nANSI modes.\nPrivate DEC modes.\nSCP’s second parameter value of 2.\nWrapper for the private DEC modes.\nThe processor wraps a <code>crate::Parser</code> to ultimately call …\nReport every key as an escape sequence.\nAdditionally report shifted key an dbase layout key.\nReport the text generated by the key event.\nReport key presses, release, and repetition alongside the …\nSCP’s first parameter value of 2 which sets character …\nRed.\nReplace the active flags with the new ones.\nReset the state.\nClear all special abilities.\nInvert colors.\nClear right of cursor.\nClear ‘saved’ lines (scrollback).\nSCP control’s first parameter which determines character …\nSCP control’s second parameter which determines update …\nStandard or common character sets which can be designated …\nStrikeout text.\nThe mode is handled automatically by <code>Processor</code>.\nMode for clearing tab stops.\nInterface for creating timeouts and checking their expiry.\nUndercurled text.\nCursor is an underscore like <code>_</code>.\nUnderline text.\nUnderline color.\nMerge the given flags with currently active ones.\nUnidentified publc mode.\nUnknown private mode.\nWhite.\nYellow.\nProcess a new byte from the PTY.\nGet a flags value with all known bits set.\nBackspace <code>count</code> characters.\nRing the bell.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCarriage return.\nClear current line.\nClear screen.\nClear tab stops.\nClear the current timeout.\nLoad data from clipboard.\nStore data into clipboard.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAssign a graphic character set to G0, G1, G2 or G3.\nWhether all set bits in a source flags value are also set …\nRun the decaln routine.\nDelete <code>count</code> chars.\nDelete <code>count</code> lines.\nReport device status.\nThe intersection of a source flags value with the …\nRespond to a color query escape sequence.\nGet a flags value with all bits unset.\nErase <code>count</code> chars in current line following cursor.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nSet cursor to position.\nSet cursor to specific column.\nSet cursor to specific row.\nIdentifier for the given hyperlink.\nIdentify the terminal (should write back to the pty …\nA character to be displayed.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert blank characters in current line starting from …\nInsert <code>count</code> blank lines.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLinefeed.\nSwitch/Map character to the active charset. Ascii is the …\nMove cursor backward <code>cols</code>.\nMove backward <code>count</code> tabs.\nMove cursor down <code>rows</code>.\nMove cursor down <code>rows</code> and set to column 1.\nMove cursor forward <code>cols</code>.\nMove forward <code>count</code> tabs.\nMove cursor up <code>rows</code>.\nMove cursor up <code>rows</code> and set to column 1.\nNewline.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns whether a timeout is currently active and has not …\nPop the given amount of keyboard modes from the keyboard …\nPop the last title from the stack.\nPush keyboard mode into the keyboard mode stack.\nPush a title onto the stack.\nPut <code>count</code> tabs.\nGet the raw value of the mode.\nGet the raw value of the mode.\nThe intersection of a source flags value with the …\nReport current keyboard mode.\nDECRPM - report mode.\nReport XTerm’s <code>ModifyOtherKeys</code> state.\nDECRPM - report private mode.\nReset an indexed color to original value.\nReset terminal state.\nRestore cursor position.\nReverse Index.\nSave current cursor position.\nScroll down <code>rows</code> rows.\nScroll up <code>rows</code> rows.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet one of the graphic character sets, G0 to G3, as the …\nSet an indexed color value.\nSet the cursor shape.\nSet the cursor style.\nSet current position as a tabstop.\nSet hyperlink.\nSet the <code>keyboard mode</code> using the given <code>behavior</code>.\nDECKPAM - Set keypad to applications mode (ESCape instead …\nSet mode.\nSet XTerm’s <code>ModifyOtherKeys</code> option.\nSet mouse cursor icon.\nSet private mode.\nDECSTBM - Set the terminal scrolling region.\nSet tab stops at every <code>interval</code>.\nSets the timeout for the next synchronized update.\nOSC to set window title.\nEnd a synchronized update.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSubstitute char under cursor.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nNumber of bytes in the synchronization buffer.\nSynchronized update timeout.\nSet a terminal attribute.\nReport text area size in characters.\nReport text area size in pixels.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDECKPNM - Set keypad to numeric mode (digits instead of …\nUnset mode.\nUnset private mode.\nResource identifier of the hyperlink.\nAcknowledge, usually sent by terminal in response to ETX.\nBell, triggers the bell, buzzer, or beeper on the terminal.\nBackspace, can be used to define overstruck characters.\nCancel (makes VT100 abort current escape sequence if any).\nCarriage Return, move to first character of current line.\nDevice Control 2, causes ASR-33 to activate paper-tape …\nDevice Control 4, causes ASR-33 to deactivate paper-tape …\nDelete, should be ignored by terminal.\nData Link Escape, interpret next control character …\nEnd of Medium.\nEnquiry, causes terminal to send ANSWER-BACK ID.\nEnd of Transmission.\nPrefix to an escape sequence.\nEnd of Transmission block.\nEnd of Text, causes some terminal to respond with ACK or …\nForm Feed, move to next form or page.\nFile Separator.\nGroup Separator.\nHorizontal Tabulation, move to next predetermined position.\nLinefeed, move to same position on next line (see also NL).\nNegative Acknowledge, used sometimes with ETX and ACK.\nNull filler, terminal should ignore this character.\nRecord Separator (sent by VT132 in block-transfer mode).\nShift In, switch to G0 (normal half of character set).\nShift Out, switch to G1 (other half of character set).\nStart of Header.\nStart of Text, implied end of header.\nSubstitute (VT100 uses this to display parity errors).\nSynchronous Idle, used to maintain timing in Sync …\nUnit Separator.\nVertical Tabulation, move to next predetermined line.\n(DC2) Terminal must pause and refrain from transmitting.\n(DC1) Terminal is allowed to resume transmitting.\nIndicates an alias of/shortcut to something is to be …\nIndicates that the something can be scrolled in any …\nIndicates that a cell or set of cells may be selected. …\nIndicates that the item/column can be resized …\nA context menu is available for the object under the …\nIndicates something is to be copied. Often rendered as an …\nA simple crosshair (e.g., short line segments resembling a …\nDescribes the appearance of the (usually mouse) cursor …\nThe platform-dependent default cursor. Often rendered as …\nThe east border to be moved.\nThe east and west borders to be moved.\nIndicates that something can be grabbed (dragged to be …\nIndicates that something is being grabbed (dragged to be …\nHelp is available for the object under the cursor. Often …\nIndicates something is to be moved.\nThe north border to be moved.\nThe north-east corner to be moved.\nThe north-east and south-west corners to be moved.\nIndicates that the dragged item cannot be dropped at the …\nIndicates that the requested action will not be carried …\nThe south and north borders to be moved.\nThe north-west corner to be moved.\nThe north-west and south-east corners to be moved.\nAn error which could be returned when parsing <code>CursorIcon</code>.\nThe cursor is a pointer that indicates a link. Often …\nA progress indicator. The program is performing some …\nIndicates that the item/row can be resized vertically. …\nThe south border to be moved.\nThe south-east corner to be moved.\nThe south-west corner to be moved.\nIndicates text that may be selected. Often rendered as an …\nIndicates vertical-text that may be selected. Often …\nThe west border to be moved.\nIndicates that the program is busy and the user should …\nIndicates that something can be zoomed in. Often rendered …\nIndicates that something can be zoomed in. Often rendered …\nA list of alternative names for the cursor icon as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a string slice into <code>CursorIcon</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the cursor icon as defined in w3c standard.")