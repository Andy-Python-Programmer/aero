searchState.loadedDescShard("arrayvec", 0, "<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>: …\nA string with a fixed capacity.\nA vector with a fixed capacity.\nError value indicating insufficient capacity\nA draining iterator for <code>ArrayVec</code>.\nBy-value iterator for <code>ArrayVec</code>.\nReturn a raw mutable pointer to the vector’s buffer.\nReturn a raw mutable pointer to the string’s buffer.\nReturn a mutable slice containing all elements of the …\nReturns the remaining items of this iterator as a mutable …\nReturn a mutable string slice of the whole <code>ArrayString</code>.\nReturn a raw pointer to the vector’s buffer.\nReturn a raw pointer to the string’s buffer.\nReturn a slice containing all elements of the vector.\nReturns the remaining items of this iterator as a slice.\nReturn a string slice of the whole <code>ArrayString</code>.\nReturn the capacity of the <code>ArrayVec</code>.\nReturn the capacity of the <code>ArrayString</code>.\nRemove all elements in the vector.\nMake the string empty.\nReturn an empty array\nReturn an empty <code>ArrayString</code>\nCreate a draining iterator that removes the specified …\nExtract the overflowing element\nExtend the <code>ArrayVec</code> with an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>ArrayString</code> from a <code>str</code>.\nReturns the argument unchanged.\nCreate a new <code>ArrayString</code> from a byte string literal.\nCreate an <code>ArrayVec</code> from an iterator.\nInsert <code>element</code> at position <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner fixed size array, if it is full to its …\nReturn the inner fixed size array.\nReturns whether the <code>ArrayVec</code> is empty.\nReturns whether the string is empty.\nReturn true if the <code>ArrayVec</code> is completely filled to its …\nReturn if the <code>ArrayString</code> is completely filled.\nReturn the number of elements in the <code>ArrayVec</code>.\nReturn the length of the string.\nCreate a new empty <code>ArrayVec</code>.\nCreate a new empty <code>ArrayString</code>.\nCreate a new <code>CapacityError</code> from <code>element</code>.\nCreate a new empty <code>ArrayVec</code> (const fn).\nCreate a new empty <code>ArrayString</code> (const fn).\nRemove the last element in the vector and return it.\nRemoves the last character from the string and returns it.\nRemove the element at <code>index</code> and shift down the following …\nPush <code>element</code> to the end of the vector.\nAdds the given char to the end of the string.\nAdds the given string slice to the end of the string.\nPush <code>element</code> to the end of the vector without checking the …\nReturns the capacity left in the <code>ArrayVec</code>.\nReturns the capacity left in the <code>ArrayString</code>.\nRemove the element at <code>index</code> and shift down the following …\nRemoves a <code>char</code> from this <code>ArrayString</code> at a byte position …\nRetains only the elements specified by the predicate.\nSet the vector’s length without dropping or moving out …\nSet the strings’s length.\nConvert into a <code>CapacityError</code> that does not carry an …\nRemove the element at <code>index</code> and swap the last element into …\nRemove the element at <code>index</code> and swap the last element into …\nReturns the ArrayVec, replacing the original with a new …\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens this <code>ArrayString</code> to the specified length.\nCopy all elements from the slice and append to the <code>ArrayVec</code>…\nInsert <code>element</code> at position <code>index</code>.\nPush <code>element</code> to the end of the vector.\nAdds the given char to the end of the string.\nAdds the given string slice to the end of the string.\nCreate a new <code>ArrayString</code> value fully filled with ASCII …")