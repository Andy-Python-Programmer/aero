(function() {
    var type_impls = Object.fromEntries([["aero_kernel",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Ci128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Ci16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Ci32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Ci64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Ci8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Cisize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Cu128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Cu32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Cu64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-AsBytes-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[u8]</h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">Source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [u8]<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">Source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">Source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">Source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [u8]) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;()&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Binary-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Binary.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Binary\">Binary</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Binary.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Binary\">Binary</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Binary.html#tymethod.fmt\">Read more</a></div></details></div></details>","Binary","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZero%3CT%3E%3E-for-T\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.45.0\">1.45.0</span><a href=\"#impl-BitOr%3CNonZero%3CT%3E%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;&gt; for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; &lt;T as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<NonZero<T>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CT%3E-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.45.0\">1.45.0</span><a href=\"#impl-BitOr%3CT%3E-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;T&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: T) -&gt; &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<T>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.45.0\">1.45.0</span><a href=\"#impl-BitOr-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CT%3E-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.45.0\">1.45.0</span><a href=\"#impl-BitOrAssign%3CT%3E-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOrAssign\">BitOrAssign</a>&lt;T&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a>,\n    <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;T, Output = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: T)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<T>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.45.0\">1.45.0</span><a href=\"#impl-BitOrAssign-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOrAssign\">BitOrAssign</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a>,\n    <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;Output = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Ci128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = i128</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Ci16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = i16</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Ci32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = i32</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Ci64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = i64</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Ci8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = i8</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Cisize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = isize</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Cu128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = u128</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = u16</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Cu32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = u32</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Cu64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = u64</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = u8</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#impl-CheckedBitPattern-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = usize</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">Source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(\n    bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>,\n) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Clone-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Clone.html\" title=\"trait aero_kernel::prelude::rust_2021::Clone\">Clone</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"aero_kernel/prelude/rust_2021/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"aero_kernel/prelude/rust_2021/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Contiguous-for-NonZero%3Cu128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#impl-Contiguous-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/contiguous/trait.Contiguous.html\" title=\"trait bytemuck::contiguous::Contiguous\">Contiguous</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MAX_VALUE\" class=\"constant\">MAX_VALUE</a>: u128 = 340_282_366_920_938_463_463_374_607_431_768_211_455u128</h4></section></summary><div class='docblock'>The upper <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MIN_VALUE\" class=\"constant\">MIN_VALUE</a>: u128 = 1u128</h4></section></summary><div class='docblock'>The lower <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Int\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedtype.Int\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" class=\"associatedtype\">Int</a> = u128</h4></section></summary><div class='docblock'>The primitive integer type with an identical representation to this\ntype. <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#119\">Source</a><a href=\"#method.from_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\" class=\"fn\">from_integer</a>(value: Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>If <code>value</code> is within the range for valid instances of this type,\nreturns <code>Some(converted_value)</code>, otherwise, returns <code>None</code>. <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#154\">Source</a><a href=\"#method.into_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\" class=\"fn\">into_integer</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a></h4></section></summary><div class='docblock'>Perform the conversion from <code>C</code> into the underlying integral type. This\nmostly exists otherwise generic code would need unsafe for the <code>value as integer</code> <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\">Read more</a></div></details></div></details>","Contiguous","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Contiguous-for-NonZero%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#impl-Contiguous-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/contiguous/trait.Contiguous.html\" title=\"trait bytemuck::contiguous::Contiguous\">Contiguous</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MAX_VALUE\" class=\"constant\">MAX_VALUE</a>: u16 = 65_535u16</h4></section></summary><div class='docblock'>The upper <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MIN_VALUE\" class=\"constant\">MIN_VALUE</a>: u16 = 1u16</h4></section></summary><div class='docblock'>The lower <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Int\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedtype.Int\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" class=\"associatedtype\">Int</a> = u16</h4></section></summary><div class='docblock'>The primitive integer type with an identical representation to this\ntype. <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#119\">Source</a><a href=\"#method.from_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\" class=\"fn\">from_integer</a>(value: Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>If <code>value</code> is within the range for valid instances of this type,\nreturns <code>Some(converted_value)</code>, otherwise, returns <code>None</code>. <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#154\">Source</a><a href=\"#method.into_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\" class=\"fn\">into_integer</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a></h4></section></summary><div class='docblock'>Perform the conversion from <code>C</code> into the underlying integral type. This\nmostly exists otherwise generic code would need unsafe for the <code>value as integer</code> <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\">Read more</a></div></details></div></details>","Contiguous","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Contiguous-for-NonZero%3Cu32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#impl-Contiguous-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/contiguous/trait.Contiguous.html\" title=\"trait bytemuck::contiguous::Contiguous\">Contiguous</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MAX_VALUE\" class=\"constant\">MAX_VALUE</a>: u32 = 4_294_967_295u32</h4></section></summary><div class='docblock'>The upper <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MIN_VALUE\" class=\"constant\">MIN_VALUE</a>: u32 = 1u32</h4></section></summary><div class='docblock'>The lower <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Int\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedtype.Int\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" class=\"associatedtype\">Int</a> = u32</h4></section></summary><div class='docblock'>The primitive integer type with an identical representation to this\ntype. <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#119\">Source</a><a href=\"#method.from_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\" class=\"fn\">from_integer</a>(value: Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>If <code>value</code> is within the range for valid instances of this type,\nreturns <code>Some(converted_value)</code>, otherwise, returns <code>None</code>. <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#154\">Source</a><a href=\"#method.into_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\" class=\"fn\">into_integer</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a></h4></section></summary><div class='docblock'>Perform the conversion from <code>C</code> into the underlying integral type. This\nmostly exists otherwise generic code would need unsafe for the <code>value as integer</code> <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\">Read more</a></div></details></div></details>","Contiguous","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Contiguous-for-NonZero%3Cu64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#impl-Contiguous-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/contiguous/trait.Contiguous.html\" title=\"trait bytemuck::contiguous::Contiguous\">Contiguous</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MAX_VALUE\" class=\"constant\">MAX_VALUE</a>: u64 = 18_446_744_073_709_551_615u64</h4></section></summary><div class='docblock'>The upper <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MIN_VALUE\" class=\"constant\">MIN_VALUE</a>: u64 = 1u64</h4></section></summary><div class='docblock'>The lower <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Int\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedtype.Int\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" class=\"associatedtype\">Int</a> = u64</h4></section></summary><div class='docblock'>The primitive integer type with an identical representation to this\ntype. <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#119\">Source</a><a href=\"#method.from_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\" class=\"fn\">from_integer</a>(value: Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>If <code>value</code> is within the range for valid instances of this type,\nreturns <code>Some(converted_value)</code>, otherwise, returns <code>None</code>. <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#154\">Source</a><a href=\"#method.into_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\" class=\"fn\">into_integer</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a></h4></section></summary><div class='docblock'>Perform the conversion from <code>C</code> into the underlying integral type. This\nmostly exists otherwise generic code would need unsafe for the <code>value as integer</code> <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\">Read more</a></div></details></div></details>","Contiguous","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Contiguous-for-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#impl-Contiguous-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/contiguous/trait.Contiguous.html\" title=\"trait bytemuck::contiguous::Contiguous\">Contiguous</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MAX_VALUE\" class=\"constant\">MAX_VALUE</a>: u8 = 255u8</h4></section></summary><div class='docblock'>The upper <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MIN_VALUE\" class=\"constant\">MIN_VALUE</a>: u8 = 1u8</h4></section></summary><div class='docblock'>The lower <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Int\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedtype.Int\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" class=\"associatedtype\">Int</a> = u8</h4></section></summary><div class='docblock'>The primitive integer type with an identical representation to this\ntype. <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#119\">Source</a><a href=\"#method.from_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\" class=\"fn\">from_integer</a>(value: Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>If <code>value</code> is within the range for valid instances of this type,\nreturns <code>Some(converted_value)</code>, otherwise, returns <code>None</code>. <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#154\">Source</a><a href=\"#method.into_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\" class=\"fn\">into_integer</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a></h4></section></summary><div class='docblock'>Perform the conversion from <code>C</code> into the underlying integral type. This\nmostly exists otherwise generic code would need unsafe for the <code>value as integer</code> <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\">Read more</a></div></details></div></details>","Contiguous","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Contiguous-for-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#impl-Contiguous-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/contiguous/trait.Contiguous.html\" title=\"trait bytemuck::contiguous::Contiguous\">Contiguous</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MAX_VALUE\" class=\"constant\">MAX_VALUE</a>: usize = 18_446_744_073_709_551_615usize</h4></section></summary><div class='docblock'>The upper <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedconstant.MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MIN_VALUE\" class=\"constant\">MIN_VALUE</a>: usize = 1usize</h4></section></summary><div class='docblock'>The lower <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Int\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">Source</a><a href=\"#associatedtype.Int\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" class=\"associatedtype\">Int</a> = usize</h4></section></summary><div class='docblock'>The primitive integer type with an identical representation to this\ntype. <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#119\">Source</a><a href=\"#method.from_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\" class=\"fn\">from_integer</a>(value: Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>If <code>value</code> is within the range for valid instances of this type,\nreturns <code>Some(converted_value)</code>, otherwise, returns <code>None</code>. <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#154\">Source</a><a href=\"#method.into_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\" class=\"fn\">into_integer</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a></h4></section></summary><div class='docblock'>Perform the conversion from <code>C</code> into the underlying integral type. This\nmostly exists otherwise generic code would need unsafe for the <code>value as integer</code> <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\">Read more</a></div></details></div></details>","Contiguous","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Debug-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#432-438\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#432-438\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#307-313\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#307-313\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#315-321\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#315-321\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#323-328\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#323-328\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#300-305\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#300-305\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#330-335\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#330-335\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#440-446\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#440-446\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#344-350\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#344-350\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#352-358\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#352-358\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#360-365\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#360-365\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#337-342\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#337-342\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#367-372\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#367-372\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Display-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CAlignment%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><a href=\"#impl-From%3CAlignment%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/ptr/struct.Alignment.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::ptr::Alignment\">Alignment</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(align: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/ptr/struct.Alignment.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::ptr::Alignment\">Alignment</a>) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Alignment>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3CT%3E%3E-for-T\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.31.0\">1.31.0</span><a href=\"#impl-From%3CNonZero%3CT%3E%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;&gt; for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; T</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<NonZero<T>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code> losslessly.</p>\n</div></details></div></details>","From<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(\n    src: &amp;str,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(\n    src: &amp;str,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Hash-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: &amp;mut H)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.84.0\">1.84.0</span><a href=\"#impl-LowerExp-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerExp.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::LowerExp\">LowerExp</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerExp.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::LowerExp\">LowerExp</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerExp","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-LowerHex-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerHex.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::LowerHex\">LowerHex</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerHex.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::LowerHex\">LowerHex</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerHex","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-Neg-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-Neg-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-Neg-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-Neg-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-Neg-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-Neg-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3CT%3E\" class=\"impl\"><a href=\"#impl-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0, const since 1.47.0\">1.28.0 (const: 1.47.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.new\" class=\"fn\">new</a>(n: T) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a non-zero if the given value is not zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0, const since 1.28.0\">1.28.0 (const: 1.28.0)</span><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(n: T) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a non-zero without checking whether the value is non-zero.\nThis results in undefined behavior if the value is zero.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The value must not be zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_mut\" class=\"fn\">from_mut</a>(n: &amp;mut T) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_from_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts a reference to a non-zero mutable reference\nif the referenced value is not zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_mut_unchecked\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_mut_unchecked\" class=\"fn\">from_mut_unchecked</a>(n: &amp;mut T) -&gt; &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_from_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts a mutable reference to a non-zero mutable reference\nwithout checking whether the referenced value is non-zero.\nThis results in undefined behavior if the referenced value is zero.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The referenced value must not be zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0, const since 1.34.0\">1.28.0 (const: 1.34.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.get\" class=\"fn\">get</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained value as a primitive type.</p>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Ci128%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 128u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>i128::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i128&gt;::BITS, i128::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i128::MIN</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i128&gt;::MIN.get(), i128::MIN);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i128::MAX</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i128&gt;::MAX.get(), i128::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i128&gt;::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x13f40000000000000000000000004f76i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x4f7613f4</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">16</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x4f7613f4i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x13f40000000000000000000000004f76</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">16</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12345678901234567890123456789012i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x12907856341290785634129078563412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12345678901234567890123456789012i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x48091e6a2c48091e6a2c48091e6a2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI128;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI128::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI128::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI128;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI128::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI128::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee [<code>i128::abs</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i128&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n[<code>i128::overflowing_abs</code>].</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n[<code>i128::saturating_abs</code>].</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i128::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n[<code>i128::wrapping_abs</code>].</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u128::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i128&gt;::MIN</code>.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See [<code>i128::overflowing_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i128&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i128&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i128::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See [<code>i128::wrapping_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_unsigned\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_unsigned\" class=\"fn\">cast_unsigned</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as an unsigned integer of the same size.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::new(-<span class=\"number\">1i128</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.cast_unsigned(), NonZero::&lt;u128&gt;::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; i128::MAX</code>, or <code>self * rhs &lt; i128::MIN</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i128::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MIN\"><code>NonZero::&lt;i128&gt;::MIN</code></a> or <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Ci16%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 16u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>i16::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i16&gt;::BITS, i16::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i16::MIN</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i16&gt;::MIN.get(), i16::MIN);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i16::MAX</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i16&gt;::MAX.get(), i16::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i16&gt;::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(-<span class=\"number\">0x5ffdi16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x3a</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">4</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x3ai16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(-<span class=\"number\">0x5ffd</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">4</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x3412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI16;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI16::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI16::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI16;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI16::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI16::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee [<code>i16::abs</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i16&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n[<code>i16::overflowing_abs</code>].</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n[<code>i16::saturating_abs</code>].</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i16::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n[<code>i16::wrapping_abs</code>].</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u16::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i16&gt;::MIN</code>.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See [<code>i16::overflowing_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i16&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i16&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i16::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See [<code>i16::wrapping_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_unsigned\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_unsigned\" class=\"fn\">cast_unsigned</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as an unsigned integer of the same size.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::new(-<span class=\"number\">1i16</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.cast_unsigned(), NonZero::&lt;u16&gt;::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; i16::MAX</code>, or <code>self * rhs &lt; i16::MIN</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i16::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MIN\"><code>NonZero::&lt;i16&gt;::MIN</code></a> or <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Ci32%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>i32::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i32&gt;::BITS, i32::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i32::MIN</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i32&gt;::MIN.get(), i32::MIN);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i32::MAX</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i32&gt;::MAX.get(), i32::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i32&gt;::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x10000b3i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0xb301</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0xb301i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x10000b3</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12345678i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x78563412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12345678i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x1e6a2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI32;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI32::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI32;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI32::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee [<code>i32::abs</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i32&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n[<code>i32::overflowing_abs</code>].</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n[<code>i32::saturating_abs</code>].</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i32::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n[<code>i32::wrapping_abs</code>].</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u32::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i32&gt;::MIN</code>.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See [<code>i32::overflowing_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i32&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i32&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i32::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See [<code>i32::wrapping_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_unsigned\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_unsigned\" class=\"fn\">cast_unsigned</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as an unsigned integer of the same size.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::new(-<span class=\"number\">1i32</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.cast_unsigned(), NonZero::&lt;u32&gt;::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; i32::MAX</code>, or <code>self * rhs &lt; i32::MIN</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i32::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MIN\"><code>NonZero::&lt;i32&gt;::MIN</code></a> or <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Ci64%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>i64::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i64&gt;::BITS, i64::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i64::MIN</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i64&gt;::MIN.get(), i64::MIN);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i64::MAX</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i64&gt;::MAX.get(), i64::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i64&gt;::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0xaa00000000006e1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x6e10aa</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x6e10aai64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0xaa00000000006e1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234567890123456i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x5634129078563412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234567890123456i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x6a2c48091e6a2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI64;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI64::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI64::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI64;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI64::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI64::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee [<code>i64::abs</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i64&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n[<code>i64::overflowing_abs</code>].</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n[<code>i64::saturating_abs</code>].</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i64::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n[<code>i64::wrapping_abs</code>].</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u64::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i64&gt;::MIN</code>.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See [<code>i64::overflowing_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i64&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i64&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i64::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See [<code>i64::wrapping_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_unsigned\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_unsigned\" class=\"fn\">cast_unsigned</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as an unsigned integer of the same size.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::new(-<span class=\"number\">1i64</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.cast_unsigned(), NonZero::&lt;u64&gt;::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; i64::MAX</code>, or <code>self * rhs &lt; i64::MIN</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i64::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MIN\"><code>NonZero::&lt;i64&gt;::MIN</code></a> or <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Ci8%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 8u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>i8::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i8&gt;::BITS, i8::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i8::MIN</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i8&gt;::MIN.get(), i8::MIN);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>i8::MAX</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i8&gt;::MAX.get(), i8::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i8&gt;::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(-<span class=\"number\">0x7ei8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0xa</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">2</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0xai8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(-<span class=\"number\">0x7e</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">2</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x12</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI8;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI8::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI8::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroI8;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroI8::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroI8::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ai8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee [<code>i8::abs</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i8&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n[<code>i8::overflowing_abs</code>].</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n[<code>i8::saturating_abs</code>].</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i8::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n[<code>i8::wrapping_abs</code>].</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u8::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i8&gt;::MIN</code>.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See [<code>i8::overflowing_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i8&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i8&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i8::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See [<code>i8::wrapping_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_unsigned\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_unsigned\" class=\"fn\">cast_unsigned</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as an unsigned integer of the same size.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::new(-<span class=\"number\">1i8</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.cast_unsigned(), NonZero::&lt;u8&gt;::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; i8::MAX</code>, or <code>self * rhs &lt; i8::MIN</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i8::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MIN\"><code>NonZero::&lt;i8&gt;::MIN</code></a> or <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;i8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cisize%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>isize::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;isize&gt;::BITS, isize::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to [<code>isize::MIN</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;isize&gt;::MIN.get(), isize::MIN);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>isize::MAX</code>].</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;isize&gt;::MAX.get(), isize::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;isize&gt;::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0xaa00000000006e1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x6e10aa</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x6e10aaisize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0xaa00000000006e1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234567890123456isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x5634129078563412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234567890123456isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x6a2c48091e6a2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroIsize;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Aisize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroIsize::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroIsize::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroIsize;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Aisize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroIsize::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroIsize::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Aisize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Aisize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee [<code>isize::abs</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;isize&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n[<code>isize::overflowing_abs</code>].</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n[<code>isize::saturating_abs</code>].</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(isize::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n[<code>isize::wrapping_abs</code>].</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(usize::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;isize&gt;::MIN</code>.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, bool)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See [<code>isize::overflowing_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;isize&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;isize&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(isize::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See [<code>isize::wrapping_neg</code>]\nfor documentation on overflow behavior.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_unsigned\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_unsigned\" class=\"fn\">cast_unsigned</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as an unsigned integer of the same size.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::new(-<span class=\"number\">1isize</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.cast_unsigned(), NonZero::&lt;usize&gt;::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;isize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; isize::MAX</code>, or <code>self * rhs &lt; isize::MIN</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4isize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(isize::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MIN\"><code>NonZero::&lt;isize&gt;::MIN</code></a> or <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;isize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu128%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unsigned_nonzero_div_ceil</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<p>The result is guaranteed to be non-zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u128</span>).unwrap();\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX).unwrap();\n<span class=\"macro\">assert_eq!</span>(one.div_ceil(max), one);\n\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>).unwrap();\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u128</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(three.div_ceil(two), two);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu128%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 128u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>u128::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u128&gt;::BITS, u128::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u128&gt;::MIN.get(), <span class=\"number\">1u128</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>u128::MAX</code>].</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u128&gt;::MAX.get(), u128::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u128&gt;::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x13f40000000000000000000000004f76u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x4f7613f4</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">16</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x4f7613f4u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x13f40000000000000000000000004f76</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">16</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12345678901234567890123456789012u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x12907856341290785634129078563412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12345678901234567890123456789012u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x48091e6a2c48091e6a2c48091e6a2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU128;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU128::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU128::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU128;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU128::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU128::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, other: u128) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, other: u128) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, other: u128) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self + rhs &gt; u128::MAX</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_next_power_of_two\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u128::ilog2</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u128</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u128</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u128</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u128::ilog10</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u128</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u128</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u128</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.85.0, const since 1.85.0\">1.85.0 (const: 1.85.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_power_of_two\" class=\"fn\">is_power_of_two</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = NonZero::new(<span class=\"number\">8u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.84.0, const since 1.84.0\">1.84.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(ten.isqrt(), three);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_signed\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_signed\" class=\"fn\">cast_signed</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as a signed integer of the same size.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::&lt;u128&gt;::MAX;\n\n<span class=\"macro\">assert_eq!</span>(n.cast_signed(), NonZero::new(-<span class=\"number\">1i128</span>).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; u128::MAX</code>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u128::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu16%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unsigned_nonzero_div_ceil</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<p>The result is guaranteed to be non-zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u16</span>).unwrap();\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX).unwrap();\n<span class=\"macro\">assert_eq!</span>(one.div_ceil(max), one);\n\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>).unwrap();\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u16</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(three.div_ceil(two), two);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu16%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 16u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>u16::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u16&gt;::BITS, u16::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u16&gt;::MIN.get(), <span class=\"number\">1u16</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>u16::MAX</code>].</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u16&gt;::MAX.get(), u16::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u16&gt;::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0xa003u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x3a</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">4</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x3au16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0xa003</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">4</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x3412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU16;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU16::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU16::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU16;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU16::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU16::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, other: u16) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, other: u16) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, other: u16) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self + rhs &gt; u16::MAX</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_next_power_of_two\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u16::ilog2</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u16</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u16</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u16</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u16::ilog10</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u16</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u16</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u16</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.85.0, const since 1.85.0\">1.85.0 (const: 1.85.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_power_of_two\" class=\"fn\">is_power_of_two</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = NonZero::new(<span class=\"number\">8u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.84.0, const since 1.84.0\">1.84.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(ten.isqrt(), three);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_signed\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_signed\" class=\"fn\">cast_signed</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as a signed integer of the same size.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::&lt;u16&gt;::MAX;\n\n<span class=\"macro\">assert_eq!</span>(n.cast_signed(), NonZero::new(-<span class=\"number\">1i16</span>).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; u16::MAX</code>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u16::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu32%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unsigned_nonzero_div_ceil</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<p>The result is guaranteed to be non-zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u32</span>).unwrap();\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX).unwrap();\n<span class=\"macro\">assert_eq!</span>(one.div_ceil(max), one);\n\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>).unwrap();\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u32</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(three.div_ceil(two), two);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu32%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>u32::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u32&gt;::BITS, u32::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u32&gt;::MIN.get(), <span class=\"number\">1u32</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>u32::MAX</code>].</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u32&gt;::MAX.get(), u32::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u32&gt;::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x10000b3u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0xb301</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0xb301u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x10000b3</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12345678u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x78563412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12345678u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x1e6a2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU32;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU32::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU32;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU32::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self + rhs &gt; u32::MAX</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_next_power_of_two\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u32::ilog2</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u32</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u32</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u32</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u32::ilog10</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u32</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u32</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u32</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.85.0, const since 1.85.0\">1.85.0 (const: 1.85.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_power_of_two\" class=\"fn\">is_power_of_two</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = NonZero::new(<span class=\"number\">8u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.84.0, const since 1.84.0\">1.84.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(ten.isqrt(), three);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_signed\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_signed\" class=\"fn\">cast_signed</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as a signed integer of the same size.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::&lt;u32&gt;::MAX;\n\n<span class=\"macro\">assert_eq!</span>(n.cast_signed(), NonZero::new(-<span class=\"number\">1i32</span>).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; u32::MAX</code>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u32::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu64%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unsigned_nonzero_div_ceil</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<p>The result is guaranteed to be non-zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u64</span>).unwrap();\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX).unwrap();\n<span class=\"macro\">assert_eq!</span>(one.div_ceil(max), one);\n\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>).unwrap();\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u64</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(three.div_ceil(two), two);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu64%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>u64::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u64&gt;::BITS, u64::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u64&gt;::MIN.get(), <span class=\"number\">1u64</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>u64::MAX</code>].</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u64&gt;::MAX.get(), u64::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u64&gt;::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0xaa00000000006e1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x6e10aa</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x6e10aau64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0xaa00000000006e1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234567890123456u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x5634129078563412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234567890123456u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x6a2c48091e6a2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU64;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU64::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU64::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU64;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU64::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU64::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, other: u64) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, other: u64) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, other: u64) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self + rhs &gt; u64::MAX</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_next_power_of_two\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u64::ilog2</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u64</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u64</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u64</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u64::ilog10</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u64</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u64</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u64</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.85.0, const since 1.85.0\">1.85.0 (const: 1.85.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_power_of_two\" class=\"fn\">is_power_of_two</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = NonZero::new(<span class=\"number\">8u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.84.0, const since 1.84.0\">1.84.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(ten.isqrt(), three);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_signed\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_signed\" class=\"fn\">cast_signed</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as a signed integer of the same size.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::&lt;u64&gt;::MAX;\n\n<span class=\"macro\">assert_eq!</span>(n.cast_signed(), NonZero::new(-<span class=\"number\">1i64</span>).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; u64::MAX</code>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u64::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu8%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unsigned_nonzero_div_ceil</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<p>The result is guaranteed to be non-zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u8</span>).unwrap();\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX).unwrap();\n<span class=\"macro\">assert_eq!</span>(one.div_ceil(max), one);\n\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>).unwrap();\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u8</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(three.div_ceil(two), two);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cu8%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 8u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>u8::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u8&gt;::BITS, u8::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u8&gt;::MIN.get(), <span class=\"number\">1u8</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>u8::MAX</code>].</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u8&gt;::MAX.get(), u8::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u8&gt;::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x82u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0xa</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">2</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0xau8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x82</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">2</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x12</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x12u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU8;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU8::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU8::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroU8;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroU8::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroU8::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Au8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, other: u8) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, other: u8) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, other: u8) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self + rhs &gt; u8::MAX</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_next_power_of_two\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u8::ilog2</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u8</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u8</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u8</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u8::ilog10</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u8</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u8</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u8</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.85.0, const since 1.85.0\">1.85.0 (const: 1.85.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_power_of_two\" class=\"fn\">is_power_of_two</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = NonZero::new(<span class=\"number\">8u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.84.0, const since 1.84.0\">1.84.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(ten.isqrt(), three);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_signed\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_signed\" class=\"fn\">cast_signed</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as a signed integer of the same size.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::&lt;u8&gt;::MAX;\n\n<span class=\"macro\">assert_eq!</span>(n.cast_signed(), NonZero::new(-<span class=\"number\">1i8</span>).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; u8::MAX</code>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u8::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;u8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cusize%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unsigned_nonzero_div_ceil</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<p>The result is guaranteed to be non-zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1usize</span>).unwrap();\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX).unwrap();\n<span class=\"macro\">assert_eq!</span>(one.div_ceil(max), one);\n\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>).unwrap();\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3usize</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(three.div_ceil(two), two);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZero%3Cusize%3E\" class=\"impl\"><a href=\"#impl-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>usize::BITS</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;usize&gt;::BITS, usize::BITS);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;usize&gt;::MIN.get(), <span class=\"number\">1usize</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>usize::MAX</code>].</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;usize&gt;::MAX.get(), usize::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;usize&gt;::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b0101000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_most_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_most_significant_one\" class=\"fn\">isolate_most_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the most significant bit set.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b_01000000</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_most_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isolate_least_significant_one\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isolate_least_significant_one\" class=\"fn\">isolate_least_significant_one</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isolate_most_least_significant_one</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>self</code> with only the least significant bit set.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isolate_most_least_significant_one)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b_01100100</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b_00000100</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.isolate_least_significant_one(), b);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.86.0, const since 1.86.0\">1.86.0 (const: 1.86.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0xaa00000000006e1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0x6e10aa</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x6e10aausize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = NonZero::new(<span class=\"number\">0xaa00000000006e1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234567890123456usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x5634129078563412</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1234567890123456usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, NonZero::new(<span class=\"number\">0x6a2c48091e6a2c48</span>)<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroUsize;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ausize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroUsize::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroUsize::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">use </span>std::num::NonZeroUsize;\n<span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ausize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(NonZeroUsize::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(NonZeroUsize::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ausize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_bitwise</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_bitwise)]\n</span><span class=\"kw\">let </span>n = NonZero::new(<span class=\"number\">0x1Ausize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, other: usize) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, other: usize) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;usize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, other: usize) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self + rhs &gt; usize::MAX</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_next_power_of_two\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>usize::ilog2</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7usize</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8usize</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9usize</span>)<span class=\"question-mark\">?</span>.ilog2(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>usize::ilog10</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99usize</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100usize</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101usize</span>)<span class=\"question-mark\">?</span>.ilog10(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.85.0, const since 1.85.0\">1.85.0 (const: 1.85.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.is_power_of_two\" class=\"fn\">is_power_of_two</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = NonZero::new(<span class=\"number\">8usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.84.0, const since 1.84.0\">1.84.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ten = NonZero::new(<span class=\"number\">10usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3usize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(ten.isqrt(), three);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_signed\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.88.0, const since 1.88.0\">1.88.0 (const: 1.88.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.cast_signed\" class=\"fn\">cast_signed</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as a signed integer of the same size.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>n = NonZero::&lt;usize&gt;::MAX;\n\n<span class=\"macro\">assert_eq!</span>(n.cast_signed(), NonZero::new(-<span class=\"number\">1isize</span>).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;usize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behavior to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behavior is undefined as soon as\n<code>self * rhs &gt; usize::MAX</code>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(usize::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZero::MAX\"><code>NonZero::&lt;usize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Octal-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Octal.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Octal\">Octal</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Octal.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Octal\">Octal</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Octal.html#tymethod.fmt\">Read more</a></div></details></div></details>","Octal","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Ord-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Ord.html\" title=\"trait aero_kernel::prelude::rust_2021::Ord\">Ord</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Ord.html\" title=\"trait aero_kernel::prelude::rust_2021::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"aero_kernel/prelude/rust_2021/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"aero_kernel/prelude/rust_2021/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"aero_kernel/prelude/rust_2021/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;, max: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"aero_kernel/prelude/rust_2021/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-PartialEq-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.PartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.PartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-PartialOrd-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::Option\">Option</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"aero_kernel/prelude/rust_2021/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Ci128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Ci16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Ci32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Ci64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Ci8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Cisize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#623-630\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Cu128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Cu32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Cu64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#impl-Serialize-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#613-620\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<i8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<isize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u128>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u16>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u32>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u64>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<u8>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZero<usize>>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Ci128%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i128&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: i128,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i128&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>i128</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i128>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Ci16%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i16&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: i16,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i16&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>i16</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i16>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Ci32%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i32&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: i32,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i32&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>i32</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i32>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Ci64%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i64&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: i64,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i64&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>i64</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i64>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci8%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Ci8%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i8&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: i8,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;i8&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>i8</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[i8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i8>","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Cisize%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;isize&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: isize,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;isize&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>isize</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[isize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<isize>","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Cu128%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u128&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: u128,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u128&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>u128</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u128]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u128>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu16%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Cu16%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u16&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: u16,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u16&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>u16</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u16]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u16>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu32%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Cu32%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u32&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: u32,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u32&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>u32</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u32]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u32>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Cu64%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u64&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: u64,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u64&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>u64</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u64]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u64>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu8%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Cu8%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u8&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: u8,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;u8&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>u8</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[u8]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u8>","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Cusize%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;usize&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: usize,\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::TryFrom\">TryFrom</a>&lt;usize&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert [<code>usize</code>]\nto <code><a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;[usize]&gt;</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<usize>","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.84.0\">1.84.0</span><a href=\"#impl-UpperExp-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperExp.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::UpperExp\">UpperExp</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperExp.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::UpperExp\">UpperExp</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperExp","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-UpperHex-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperHex.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::UpperHex\">UpperHex</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperHex.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::UpperHex\">UpperHex</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperHex","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-Copy-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Copy-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Copy.html\" title=\"trait aero_kernel::prelude::rust_2021::Copy\">Copy</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section>","Copy","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-Eq-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Eq-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Eq.html\" title=\"trait aero_kernel::prelude::rust_2021::Eq\">Eq</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Eq.html\" title=\"trait aero_kernel::prelude::rust_2021::Eq\">Eq</a>,</div></h3></section>","Eq","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-Freeze-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Freeze-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Freeze.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Freeze.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Freeze\">Freeze</a>,</div></h3></section>","Freeze","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-NoUninit-for-NonZero%3Ci128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#78\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<section id=\"impl-NoUninit-for-NonZero%3Ci16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#72\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<section id=\"impl-NoUninit-for-NonZero%3Ci32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#74\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<section id=\"impl-NoUninit-for-NonZero%3Ci64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#76\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<section id=\"impl-NoUninit-for-NonZero%3Ci8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#70\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<section id=\"impl-NoUninit-for-NonZero%3Cisize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#80\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<section id=\"impl-NoUninit-for-NonZero%3Cu128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#77\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<section id=\"impl-NoUninit-for-NonZero%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#71\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<section id=\"impl-NoUninit-for-NonZero%3Cu32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#73\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<section id=\"impl-NoUninit-for-NonZero%3Cu64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#75\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<section id=\"impl-NoUninit-for-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#69\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<section id=\"impl-NoUninit-for-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#79\">Source</a><a href=\"#impl-NoUninit-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-PodInOption-for-NonZero%3Ci128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#20\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<section id=\"impl-PodInOption-for-NonZero%3Ci16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#17\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<section id=\"impl-PodInOption-for-NonZero%3Ci32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#18\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<section id=\"impl-PodInOption-for-NonZero%3Ci64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#19\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<section id=\"impl-PodInOption-for-NonZero%3Ci8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#16\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<section id=\"impl-PodInOption-for-NonZero%3Cisize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#21\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<section id=\"impl-PodInOption-for-NonZero%3Cu128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#26\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<section id=\"impl-PodInOption-for-NonZero%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#23\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<section id=\"impl-PodInOption-for-NonZero%3Cu32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#24\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<section id=\"impl-PodInOption-for-NonZero%3Cu64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#25\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<section id=\"impl-PodInOption-for-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#22\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<section id=\"impl-PodInOption-for-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#27\">Source</a><a href=\"#impl-PodInOption-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-RefUnwindSafe-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-RefUnwindSafe-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/panic/trait.RefUnwindSafe.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/panic/trait.RefUnwindSafe.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section>","RefUnwindSafe","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-Send-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Send-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Send.html\" title=\"trait aero_kernel::prelude::rust_2021::Send\">Send</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Send.html\" title=\"trait aero_kernel::prelude::rust_2021::Send\">Send</a>,</div></h3></section>","Send","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-StructuralPartialEq-for-NonZero%3CT%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.StructuralPartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.StructuralPartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::StructuralPartialEq\">StructuralPartialEq</a>,</div></h3></section>","StructuralPartialEq","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-Sync-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Sync-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Sync.html\" title=\"trait aero_kernel::prelude::rust_2021::Sync\">Sync</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Sync.html\" title=\"trait aero_kernel::prelude::rust_2021::Sync\">Sync</a>,</div></h3></section>","Sync","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-Unaligned-for-NonZero%3Ci8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-Unaligned-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.Unaligned.html\" title=\"trait zerocopy::Unaligned\">Unaligned</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section>","Unaligned","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<section id=\"impl-Unaligned-for-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3213-3287\">Source</a><a href=\"#impl-Unaligned-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.Unaligned.html\" title=\"trait zerocopy::Unaligned\">Unaligned</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section>","Unaligned","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<section id=\"impl-Unpin-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Unpin-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Unpin.html\" title=\"trait aero_kernel::prelude::rust_2021::Unpin\">Unpin</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/trait.Unpin.html\" title=\"trait aero_kernel::prelude::rust_2021::Unpin\">Unpin</a>,</div></h3></section>","Unpin","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-UnwindSafe-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-UnwindSafe-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/panic/trait.UnwindSafe.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/panic/trait.UnwindSafe.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section>","UnwindSafe","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-UseCloned-for-NonZero%3CT%3E\" class=\"impl\"><a href=\"#impl-UseCloned-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.UseCloned.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::clone::UseCloned\">UseCloned</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/num/trait.ZeroablePrimitive.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section>","UseCloned","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Ci128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#19\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i128&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI128"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Ci16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#16\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i16&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI16"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Ci32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#17\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i32&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI32"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Ci64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#18\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i64&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI64"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Ci8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#15\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;i8&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroI8"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Cisize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#20\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;isize&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Cu128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#25\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u128&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU128"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#22\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u16&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU16"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Cu32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#23\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u32&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU32"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Cu64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#24\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u64&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU64"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#21\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;u8&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroU8"],["<section id=\"impl-ZeroableInOption-for-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#26\">Source</a><a href=\"#impl-ZeroableInOption-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZero.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZero\">NonZero</a>&lt;usize&gt;</h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[1413892]}