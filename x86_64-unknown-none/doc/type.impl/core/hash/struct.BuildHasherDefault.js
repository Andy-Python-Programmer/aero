(function() {var type_impls = {
"hashbrown":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BuildHasher-for-BuildHasherDefault%3CH%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.7.0\">1.7.0</span><a href=\"#impl-BuildHasher-for-BuildHasherDefault%3CH%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H&gt; BuildHasher for BuildHasherDefault&lt;H&gt;<div class=\"where\">where\n    H: Default + Hasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Hasher\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Hasher\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Hasher</a> = H</h4></section></summary><div class='docblock'>Type of the hasher that will be created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.build_hasher\" class=\"method trait-impl\"><a href=\"#method.build_hasher\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">build_hasher</a>(&amp;self) -&gt; H</h4></section></summary><div class='docblock'>Creates a new hasher. <a>Read more</a></div></details></div></details>","BuildHasher","hashbrown::map::DefaultHashBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BuildHasherDefault%3CH%3E\" class=\"impl\"><a href=\"#impl-BuildHasherDefault%3CH%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H&gt; BuildHasherDefault&lt;H&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new</a>() -&gt; BuildHasherDefault&lt;H&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>build_hasher_default_const_new</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new BuildHasherDefault for Hasher <code>H</code>.</p>\n</div></details></div></details>",0,"hashbrown::map::DefaultHashBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BuildHasherDefault%3CH%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.7.0\">1.7.0</span><a href=\"#impl-Clone-for-BuildHasherDefault%3CH%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H&gt; Clone for BuildHasherDefault&lt;H&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; BuildHasherDefault&lt;H&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","hashbrown::map::DefaultHashBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BuildHasherDefault%3CH%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.9.0\">1.9.0</span><a href=\"#impl-Debug-for-BuildHasherDefault%3CH%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H&gt; Debug for BuildHasherDefault&lt;H&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","hashbrown::map::DefaultHashBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-BuildHasherDefault%3CH%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.7.0\">1.7.0</span><a href=\"#impl-Default-for-BuildHasherDefault%3CH%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H&gt; Default for BuildHasherDefault&lt;H&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; BuildHasherDefault&lt;H&gt;</h4></section></summary><div class='docblock'>Returns the โdefault valueโ for a type. <a>Read more</a></div></details></div></details>","Default","hashbrown::map::DefaultHashBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-BuildHasherDefault%3CH%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.29.0\">1.29.0</span><a href=\"#impl-PartialEq-for-BuildHasherDefault%3CH%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H&gt; PartialEq for BuildHasherDefault&lt;H&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, _other: &amp;BuildHasherDefault&lt;H&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","hashbrown::map::DefaultHashBuilder"],["<section id=\"impl-Eq-for-BuildHasherDefault%3CH%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.29.0\">1.29.0</span><a href=\"#impl-Eq-for-BuildHasherDefault%3CH%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H&gt; Eq for BuildHasherDefault&lt;H&gt;</h3></section>","Eq","hashbrown::map::DefaultHashBuilder"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()