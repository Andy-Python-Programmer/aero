(function() {var type_impls = {
"aero_kernel":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_in</a>(x: T, alloc: A) -&gt; Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Allocates memory in the given allocator then places <code>x</code> into it.</p>\n<p>This doesnâ€™t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>five = Box::new_in(<span class=\"number\">5</span>, System);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_new_in</a>(x: T, alloc: A) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;Box&lt;T, A&gt;, <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/struct.AllocError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::alloc::AllocError\">AllocError</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Allocates memory in the given allocator then places <code>x</code> into it,\nreturning an error if the allocation fails</p>\n<p>This doesnâ€™t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>five = Box::try_new_in(<span class=\"number\">5</span>, System)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_uninit_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_uninit_in</a>(alloc: A) -&gt; Box&lt;<a class=\"union\" href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html\" title=\"union aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents in the provided allocator.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::new_uninit_in(System);\n\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>five.as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_uninit_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_new_uninit_in</a>(alloc: A) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;Box&lt;<a class=\"union\" href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html\" title=\"union aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;, <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/struct.AllocError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::alloc::AllocError\">AllocError</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents in the provided allocator,\nreturning an error if the allocation fails</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::try_new_uninit_in(System)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>five.as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_zeroed_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_zeroed_in</a>(alloc: A) -&gt; Box&lt;<a class=\"union\" href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html\" title=\"union aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes in the provided allocator.</p>\n<p>See <a href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>zero = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::new_zeroed_in(System);\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_zeroed_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_new_zeroed_in</a>(alloc: A) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;Box&lt;<a class=\"union\" href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html\" title=\"union aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;, <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/struct.AllocError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::alloc::AllocError\">AllocError</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes in the provided allocator,\nreturning an error if the allocation fails,</p>\n<p>See <a href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>zero = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::try_new_zeroed_in(System)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pin_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pin_in</a>(x: T, alloc: A) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/pin/struct.Pin.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::pin::Pin\">Pin</a>&lt;Box&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: 'static + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Unpin.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Unpin\"><code>Unpin</code></a>, then\n<code>x</code> will be pinned in memory and unable to be moved.</p>\n<p>Constructing and pinning of the <code>Box</code> can also be done in two steps: <code>Box::pin_in(x, alloc)</code>\ndoes the same as <code>[Box::into_pin]([Box::new_in](x, alloc))</code>. Consider using\n<a href=\"Box::into_pin\"><code>into_pin</code></a> if you already have a <code>Box&lt;T, A&gt;</code>, or if you want to\nconstruct a (pinned) <code>Box</code> in a different way than with [<code>Box::new_in</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_slice</a>(boxed: Box&lt;T, A&gt;) -&gt; Box&lt;[T], A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>box_into_boxed_slice</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code></p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_inner</a>(boxed: Box&lt;T, A&gt;) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>box_into_inner</code>)</span></div></span></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning the wrapped value.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_into_inner)]\n\n</span><span class=\"kw\">let </span>c = Box::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(Box::into_inner(c), <span class=\"number\">5</span>);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3C%5BT%5D,+A%3E\" class=\"impl\"><a href=\"#impl-Box%3C%5BT%5D,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; Box&lt;[T], A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_uninit_slice_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_uninit_slice_in</a>(len: usize, alloc: A) -&gt; Box&lt;[<a class=\"union\" href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html\" title=\"union aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;], A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new boxed slice with uninitialized contents in the provided allocator.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = Box::&lt;[u32], <span class=\"kw\">_</span>&gt;::new_uninit_slice_in(<span class=\"number\">3</span>, System);\n\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>values[<span class=\"number\">0</span>].as_mut_ptr().write(<span class=\"number\">1</span>);\n    values[<span class=\"number\">1</span>].as_mut_ptr().write(<span class=\"number\">2</span>);\n    values[<span class=\"number\">2</span>].as_mut_ptr().write(<span class=\"number\">3</span>);\n\n    values.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_zeroed_slice_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_zeroed_slice_in</a>(len: usize, alloc: A) -&gt; Box&lt;[<a class=\"union\" href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html\" title=\"union aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;], A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new boxed slice with uninitialized contents in the provided allocator,\nwith the memory being filled with <code>0</code> bytes.</p>\n<p>See <a href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>values = Box::&lt;[u32], <span class=\"kw\">_</span>&gt;::new_zeroed_slice_in(<span class=\"number\">3</span>, System);\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{ values.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3CMaybeUninit%3CT%3E,+A%3E\" class=\"impl\"><a href=\"#impl-Box%3CMaybeUninit%3CT%3E,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; Box&lt;<a class=\"union\" href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html\" title=\"union aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.assume_init\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">assume_init</a>(self) -&gt; Box&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts to <code>Box&lt;T, A&gt;</code>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>As with <a href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html#method.assume_init\" title=\"method aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit::assume_init\"><code>MaybeUninit::assume_init</code></a>,\nit is up to the caller to guarantee that the value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32&gt;::new_uninit();\n\n<span class=\"kw\">let </span>five: Box&lt;u32&gt; = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>five.as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write</a>(boxed: Box&lt;<a class=\"union\" href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html\" title=\"union aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;, value: T) -&gt; Box&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Writes the value and converts to <code>Box&lt;T, A&gt;</code>.</p>\n<p>This method converts the box similarly to [<code>Box::assume_init</code>] but\nwrites <code>value</code> into it before conversion thus guaranteeing safety.\nIn some scenarios use of this method may improve performance because\nthe compiler may be able to optimize copying from stack.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span>big_box = Box::&lt;[usize; <span class=\"number\">1024</span>]&gt;::new_uninit();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = [<span class=\"number\">0</span>; <span class=\"number\">1024</span>];\n<span class=\"kw\">for </span>(i, place) <span class=\"kw\">in </span>array.iter_mut().enumerate() {\n    <span class=\"kw-2\">*</span>place = i;\n}\n\n<span class=\"comment\">// The optimizer may be able to elide this copy, so previous code writes\n// to heap directly.\n</span><span class=\"kw\">let </span>big_box = Box::write(big_box, array);\n\n<span class=\"kw\">for </span>(i, x) <span class=\"kw\">in </span>big_box.iter().enumerate() {\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, i);\n}</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3C%5BMaybeUninit%3CT%3E%5D,+A%3E\" class=\"impl\"><a href=\"#impl-Box%3C%5BMaybeUninit%3CT%3E%5D,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; Box&lt;[<a class=\"union\" href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html\" title=\"union aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;], A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.assume_init\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">assume_init</a>(self) -&gt; Box&lt;[T], A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts to <code>Box&lt;[T], A&gt;</code>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>As with <a href=\"aero_kernel/prelude/rust_2021/_core/mem/union.MaybeUninit.html#method.assume_init\" title=\"method aero_kernel::prelude::rust_2021::_core::mem::MaybeUninit::assume_init\"><code>MaybeUninit::assume_init</code></a>,\nit is up to the caller to guarantee that the values\nreally are in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = Box::&lt;[u32]&gt;::new_uninit_slice(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>values[<span class=\"number\">0</span>].as_mut_ptr().write(<span class=\"number\">1</span>);\n    values[<span class=\"number\">1</span>].as_mut_ptr().write(<span class=\"number\">2</span>);\n    values[<span class=\"number\">2</span>].as_mut_ptr().write(<span class=\"number\">3</span>);\n\n    values.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_in\" class=\"method\"><span class=\"since rightside\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/92521\" title=\"Tracking issue for const_box\">unstable</a></span><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_raw_in</a>(raw: *mut T, alloc: A) -&gt; Box&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a box from a raw pointer in the given allocator.</p>\n<p>After calling this function, the raw pointer is owned by the\nresulting <code>Box</code>. Specifically, the <code>Box</code> destructor will call\nthe destructor of <code>T</code> and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the <a href=\"self#memory-layout\">memory layout</a> used by <code>Box</code> .</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>This function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>Recreate a <code>Box</code> which was previously converted to a raw pointer\nusing [<code>Box::into_raw_with_allocator</code>]:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>x = Box::new_in(<span class=\"number\">5</span>, System);\n<span class=\"kw\">let </span>(ptr, alloc) = Box::into_raw_with_allocator(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw_in(ptr, alloc) };</code></pre></div>\n<p>Manually create a <code>Box</code> from scratch by using the system allocator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, slice_ptr_get)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Allocator, Layout, System};\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>ptr = System.allocate(Layout::new::&lt;i32&gt;())<span class=\"question-mark\">?</span>.as_mut_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i32;\n    <span class=\"comment\">// In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    </span>ptr.write(<span class=\"number\">5</span>);\n    <span class=\"kw\">let </span>x = Box::from_raw_in(ptr, System);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">into_raw</a>(b: Box&lt;T, A&gt;) -&gt; *mut T</h4></section></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning a wrapped raw pointer.</p>\n<p>The pointer will be properly aligned and non-null.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Box</code>. In particular, the\ncaller should properly destroy <code>T</code> and release the memory, taking\ninto account the <a href=\"self#memory-layout\">memory layout</a> used by <code>Box</code>. The easiest way to\ndo this is to convert the raw pointer back into a <code>Box</code> with the\n[<code>Box::from_raw</code>] function, allowing the <code>Box</code> destructor to perform\nthe cleanup.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::into_raw(b)</code> instead of <code>b.into_raw()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<p>Converting the raw pointer back into a <code>Box</code> with [<code>Box::from_raw</code>]\nfor automatic cleanup:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw(ptr) };</code></pre></div>\n<p>Manual cleanup by explicitly running the destructor and deallocating\nthe memory:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{dealloc, Layout};\n<span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">unsafe </span>{\n    ptr::drop_in_place(ptr);\n    dealloc(ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8, Layout::new::&lt;String&gt;());\n}</code></pre></div>\n<p>Note: This is equivalent to the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">unsafe </span>{\n    drop(Box::from_raw(ptr));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_with_allocator\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_raw_with_allocator</a>(b: Box&lt;T, A&gt;) -&gt; (*mut T, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning a wrapped raw pointer and the allocator.</p>\n<p>The pointer will be properly aligned and non-null.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Box</code>. In particular, the\ncaller should properly destroy <code>T</code> and release the memory, taking\ninto account the <a href=\"self#memory-layout\">memory layout</a> used by <code>Box</code>. The easiest way to\ndo this is to convert the raw pointer back into a <code>Box</code> with the\n[<code>Box::from_raw_in</code>] function, allowing the <code>Box</code> destructor to perform\nthe cleanup.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::into_raw_with_allocator(b)</code> instead of <code>b.into_raw_with_allocator()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<p>Converting the raw pointer back into a <code>Box</code> with [<code>Box::from_raw_in</code>]\nfor automatic cleanup:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>x = Box::new_in(String::from(<span class=\"string\">\"Hello\"</span>), System);\n<span class=\"kw\">let </span>(ptr, alloc) = Box::into_raw_with_allocator(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw_in(ptr, alloc) };</code></pre></div>\n<p>Manual cleanup by explicitly running the destructor and deallocating\nthe memory:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Allocator, Layout, System};\n<span class=\"kw\">use </span>std::ptr::{<span class=\"self\">self</span>, NonNull};\n\n<span class=\"kw\">let </span>x = Box::new_in(String::from(<span class=\"string\">\"Hello\"</span>), System);\n<span class=\"kw\">let </span>(ptr, alloc) = Box::into_raw_with_allocator(x);\n<span class=\"kw\">unsafe </span>{\n    ptr::drop_in_place(ptr);\n    <span class=\"kw\">let </span>non_null = NonNull::new_unchecked(ptr);\n    alloc.deallocate(non_null.cast(), Layout::new::&lt;String&gt;());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><span class=\"since rightside\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/92521\" title=\"Tracking issue for const_box\">unstable</a></span><h4 class=\"code-header\">pub fn <a class=\"fn\">allocator</a>(b: &amp;Box&lt;T, A&gt;) -&gt; &amp;A</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::allocator(&amp;b)</code> instead of <code>b.allocator()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.26.0\">1.26.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">leak</a>&lt;'a&gt;(b: Box&lt;T, A&gt;) -&gt; &amp;'a mut T<div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Box</code>, returning a mutable reference,\n<code>&amp;'a mut T</code>. Note that the type <code>T</code> must outlive the chosen lifetime\n<code>'a</code>. If the type has only static references, or none at all, then this\nmay be chosen to be <code>'static</code>.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe programâ€™s life. Dropping the returned reference will cause a memory\nleak. If this is not acceptable, the reference should first be wrapped\nwith the [<code>Box::from_raw</code>] function producing a <code>Box</code>. This <code>Box</code> can\nthen be dropped which will properly destroy <code>T</code> and release the\nallocated memory.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::leak(b)</code> instead of <code>b.leak()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">41</span>);\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>usize = Box::leak(x);\n<span class=\"kw-2\">*</span>static_ref += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>static_ref, <span class=\"number\">42</span>);</code></pre></div>\n<p>Unsized data:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"kw\">let </span>static_ref = Box::leak(x);\nstatic_ref[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>static_ref, [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_pin\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.63.0, const unstable\">1.63.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/92521\" title=\"Tracking issue for const_box\">unstable</a>)</span><h4 class=\"code-header\">pub fn <a class=\"fn\">into_pin</a>(boxed: Box&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/pin/struct.Pin.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::pin::Pin\">Pin</a>&lt;Box&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Unpin.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Unpin\"><code>Unpin</code></a>, then\n<code>*boxed</code> will be pinned in memory and unable to be moved.</p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n<p>This is also available via <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::From\"><code>From</code></a>.</p>\n<p>Constructing and pinning a <code>Box</code> with <code>Box::into_pin([Box::new](x))</code>\ncan also be written more concisely using <code>[Box::pin](x)</code>.\nThis <code>into_pin</code> method is useful if you already have a <code>Box&lt;T&gt;</code>, or you are\nconstructing a (pinned) <code>Box</code> in a different way than with [<code>Box::new</code>].</p>\n<h5 id=\"notes\"><a href=\"#notes\">Notes</a></h5>\n<p>Itâ€™s not recommended that crates add an impl like <code>From&lt;Box&lt;T&gt;&gt; for Pin&lt;T&gt;</code>,\nas itâ€™ll introduce an ambiguity when calling <code>Pin::from</code>.\nA demonstration of such a poor impl is shown below.</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo; <span class=\"comment\">// A type defined in this crate.\n</span><span class=\"kw\">impl </span>From&lt;Box&lt;()&gt;&gt; <span class=\"kw\">for </span>Pin&lt;Foo&gt; {\n    <span class=\"kw\">fn </span>from(<span class=\"kw\">_</span>: Box&lt;()&gt;) -&gt; Pin&lt;Foo&gt; {\n        Pin::new(Foo)\n    }\n}\n\n<span class=\"kw\">let </span>foo = Box::new(());\n<span class=\"kw\">let </span>bar = Pin::from(foo);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3Cdyn+Any,+A%3E\" class=\"impl\"><a href=\"#impl-Box%3Cdyn+Any,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; Box&lt;dyn <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;Box&lt;T, A&gt;, Box&lt;dyn <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a>, A&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the box to a concrete type.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(value: Box&lt;<span class=\"kw\">dyn </span>Any&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(string) = value.downcast::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, string.len(), string);\n    }\n}\n\n<span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(<span class=\"number\">0i8</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_unchecked\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">downcast_unchecked</a>&lt;T&gt;(self) -&gt; Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>)</span></div></span></summary><div class=\"docblock\"><p>Downcasts the box to a concrete type.</p>\n<p>For a safe alternative see <a href=\"Self::downcast\"><code>downcast</code></a>.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre></div>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details>",0,"aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3Cdyn+Any+%2B+Send,+A%3E\" class=\"impl\"><a href=\"#impl-Box%3Cdyn+Any+%2B+Send,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; Box&lt;dyn <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Send.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Send\">Send</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;Box&lt;T, A&gt;, Box&lt;dyn <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Send.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Send\">Send</a>, A&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the box to a concrete type.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(value: Box&lt;<span class=\"kw\">dyn </span>Any + Send&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(string) = value.downcast::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, string.len(), string);\n    }\n}\n\n<span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(<span class=\"number\">0i8</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_unchecked\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">downcast_unchecked</a>&lt;T&gt;(self) -&gt; Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>)</span></div></span></summary><div class=\"docblock\"><p>Downcasts the box to a concrete type.</p>\n<p>For a safe alternative see <a href=\"Self::downcast\"><code>downcast</code></a>.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any + Send&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre></div>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details>",0,"aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E\" class=\"impl\"><a href=\"#impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; Box&lt;dyn <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Send.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Send\">Send</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sync.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sync\">Sync</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.51.0\">1.51.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;Box&lt;T, A&gt;, Box&lt;dyn <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Send.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Send\">Send</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sync.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sync\">Sync</a>, A&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the box to a concrete type.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(value: Box&lt;<span class=\"kw\">dyn </span>Any + Send + Sync&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(string) = value.downcast::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, string.len(), string);\n    }\n}\n\n<span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(<span class=\"number\">0i8</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_unchecked\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">downcast_unchecked</a>&lt;T&gt;(self) -&gt; Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/any/trait.Any.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>)</span></div></span></summary><div class=\"docblock\"><p>Downcasts the box to a concrete type.</p>\n<p>For a safe alternative see <a href=\"Self::downcast\"><code>downcast</code></a>.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any + Send + Sync&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre></div>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details>",0,"aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-__Deref-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Deref.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Deref\">Deref</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;T</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Drop-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Drop.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Drop\">Drop</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<section id=\"impl-FusedIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.26.0\">1.26.0</span><a href=\"#impl-FusedIterator-for-Box%3CI,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.FusedIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::FusedIterator\">FusedIterator</a> for Box&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.FusedIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::FusedIterator\">FusedIterator</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section>","FusedIterator","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<section id=\"impl-CoerceUnsized%3CBox%3CU,+A%3E%3E-for-Box%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-CoerceUnsized%3CBox%3CU,+A%3E%3E-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.CoerceUnsized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::CoerceUnsized\">CoerceUnsized</a>&lt;Box&lt;U, A&gt;&gt; for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Unsize.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    U: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section>","CoerceUnsized<Box<U, A>>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Debug-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Debug\">Debug</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DoubleEndedIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-DoubleEndedIterator-for-Box%3CI,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for Box&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_back\" class=\"method trait-impl\"><a href=\"#method.next_back\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#tymethod.next_back\" class=\"fn\">next_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class='docblock'>Removes and returns an element from the end of the iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#tymethod.next_back\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth_back\" class=\"method trait-impl\"><a href=\"#method.nth_back\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.nth_back\" class=\"fn\">nth_back</a>(&amp;mut self, n: usize) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class='docblock'>Returns the <code>n</code>th element from the end of the iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.nth_back\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance_back_by\" class=\"method trait-impl\"><a href=\"#method.advance_back_by\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.advance_back_by\" class=\"fn\">advance_back_by</a>(&amp;mut self, n: usize) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroUsize.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize\">NonZeroUsize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>)</span></div></span><div class='docblock'>Advances the iterator from the back by <code>n</code> elements. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.advance_back_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_rfold\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.27.0\">1.27.0</span><a href=\"#method.try_rfold\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.try_rfold\" class=\"fn\">try_rfold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class='docblock'>This is the reverse version of <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.try_fold\" title=\"method aero_kernel::prelude::rust_2021::_core::iter::Iterator::try_fold\"><code>Iterator::try_fold()</code></a>: it takes\nelements starting from the back of the iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.try_rfold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rfold\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.27.0\">1.27.0</span><a href=\"#method.rfold\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.rfold\" class=\"fn\">rfold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>An iterator method that reduces the iteratorâ€™s elements to a single,\nfinal value, starting from the back. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.rfold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rfind\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.27.0\">1.27.0</span><a href=\"#method.rfind\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.rfind\" class=\"fn\">rfind</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><div class='docblock'>Searches for an element of an iterator from the back that satisfies a predicate. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.DoubleEndedIterator.html#method.rfind\">Read more</a></div></details></div></details>","DoubleEndedIterator","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#impl-AsMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.AsMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::AsMut\">AsMut</a>&lt;T&gt; for Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut T</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<T>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialOrd-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Box&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a href=\"#method.lt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;Box&lt;T, A&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a href=\"#method.le\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;Box&lt;T, A&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a href=\"#method.ge\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;Box&lt;T, A&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a href=\"#method.gt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;Box&lt;T, A&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details>","PartialOrd","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-DerefMut-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.DerefMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::DerefMut\">DerefMut</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut T</h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Display-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Display\">Display</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#impl-AsRef%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.AsRef.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::AsRef\">AsRef</a>&lt;T&gt; for Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;T</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<T>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hasher-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.22.0\">1.22.0</span><a href=\"#impl-Hasher-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\">Hasher</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\">Hasher</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.finish\" class=\"method trait-impl\"><a href=\"#method.finish\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#tymethod.finish\" class=\"fn\">finish</a>(&amp;self) -&gt; u64</h4></section></summary><div class='docblock'>Returns the hash value for the values written so far. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#tymethod.finish\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, bytes: &amp;[u8])</h4></section></summary><div class='docblock'>Writes some data into this <code>Hasher</code>. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u8\" class=\"method trait-impl\"><a href=\"#method.write_u8\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_u8\" class=\"fn\">write_u8</a>(&amp;mut self, i: u8)</h4></section></summary><div class='docblock'>Writes a single <code>u8</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u16\" class=\"method trait-impl\"><a href=\"#method.write_u16\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_u16\" class=\"fn\">write_u16</a>(&amp;mut self, i: u16)</h4></section></summary><div class='docblock'>Writes a single <code>u16</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u32\" class=\"method trait-impl\"><a href=\"#method.write_u32\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_u32\" class=\"fn\">write_u32</a>(&amp;mut self, i: u32)</h4></section></summary><div class='docblock'>Writes a single <code>u32</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u64\" class=\"method trait-impl\"><a href=\"#method.write_u64\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_u64\" class=\"fn\">write_u64</a>(&amp;mut self, i: u64)</h4></section></summary><div class='docblock'>Writes a single <code>u64</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_u128\" class=\"method trait-impl\"><a href=\"#method.write_u128\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_u128\" class=\"fn\">write_u128</a>(&amp;mut self, i: u128)</h4></section></summary><div class='docblock'>Writes a single <code>u128</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_usize\" class=\"method trait-impl\"><a href=\"#method.write_usize\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_usize\" class=\"fn\">write_usize</a>(&amp;mut self, i: usize)</h4></section></summary><div class='docblock'>Writes a single <code>usize</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i8\" class=\"method trait-impl\"><a href=\"#method.write_i8\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_i8\" class=\"fn\">write_i8</a>(&amp;mut self, i: i8)</h4></section></summary><div class='docblock'>Writes a single <code>i8</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i16\" class=\"method trait-impl\"><a href=\"#method.write_i16\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_i16\" class=\"fn\">write_i16</a>(&amp;mut self, i: i16)</h4></section></summary><div class='docblock'>Writes a single <code>i16</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i32\" class=\"method trait-impl\"><a href=\"#method.write_i32\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_i32\" class=\"fn\">write_i32</a>(&amp;mut self, i: i32)</h4></section></summary><div class='docblock'>Writes a single <code>i32</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i64\" class=\"method trait-impl\"><a href=\"#method.write_i64\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_i64\" class=\"fn\">write_i64</a>(&amp;mut self, i: i64)</h4></section></summary><div class='docblock'>Writes a single <code>i64</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_i128\" class=\"method trait-impl\"><a href=\"#method.write_i128\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_i128\" class=\"fn\">write_i128</a>(&amp;mut self, i: i128)</h4></section></summary><div class='docblock'>Writes a single <code>i128</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_isize\" class=\"method trait-impl\"><a href=\"#method.write_isize\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_isize\" class=\"fn\">write_isize</a>(&amp;mut self, i: isize)</h4></section></summary><div class='docblock'>Writes a single <code>isize</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_length_prefix\" class=\"method trait-impl\"><a href=\"#method.write_length_prefix\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_length_prefix\" class=\"fn\">write_length_prefix</a>(&amp;mut self, len: usize)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>hasher_prefixfree_extras</code>)</span></div></span><div class='docblock'>Writes a length prefix into this hasher, as part of being prefix-free. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_length_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_str\" class=\"method trait-impl\"><a href=\"#method.write_str\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;str)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>hasher_prefixfree_extras</code>)</span></div></span><div class='docblock'>Writes a single <code>str</code> into this hasher. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html#method.write_str\">Read more</a></div></details></div></details>","Hasher","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.1.0\">1.1.0</span><a href=\"#impl-Borrow%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/borrow/trait.Borrow.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::borrow::Borrow\">Borrow</a>&lt;T&gt; for Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;T</h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"aero_kernel/prelude/rust_2021/_core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<T>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Pointer-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Pointer.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Pointer\">Pointer</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Pointer","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Hash-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hash\">Hash</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: &amp;mut H)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3Cstr,+A%3E%3E-for-Box%3C%5Bu8%5D,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.19.0\">1.19.0</span><a href=\"#impl-From%3CBox%3Cstr,+A%3E%3E-for-Box%3C%5Bu8%5D,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::From\">From</a>&lt;Box&lt;str, A&gt;&gt; for Box&lt;[u8], A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: Box&lt;str, A&gt;) -&gt; Box&lt;[u8], A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code></p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// create a Box&lt;str&gt; which will be used to create a Box&lt;[u8]&gt;\n</span><span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>boxed_str: Box&lt;[u8]&gt; = Box::from(boxed);\n\n<span class=\"comment\">// create a &amp;[u8] which will be used to create a Box&lt;[u8]&gt;\n</span><span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>];\n<span class=\"kw\">let </span>boxed_slice = Box::from(slice);\n\n<span class=\"macro\">assert_eq!</span>(boxed_slice, boxed_str);</code></pre></div>\n</div></details></div></details>","From<Box<str, A>>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.20.0\">1.20.0</span><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::From\">From</a>&lt;Vec&lt;T, A&gt;&gt; for Box&lt;[T], A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: Vec&lt;T, A&gt;) -&gt; Box&lt;[T], A&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a vector into a boxed slice.</p>\n<p>If <code>v</code> has excess capacity, its items will be moved into a\nnewly-allocated buffer with exactly the right capacity.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Box::from(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice());</code></pre></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(Box::from(vec), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice());</code></pre></div>\n</div></details></div></details>","From<Vec<T, A>>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Ord-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">Ord</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Box&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.max\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.min\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#method.clamp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Box%3C%5BT%5D,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#impl-Clone-for-Box%3C%5BT%5D,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::clone::Clone\">Clone</a> for Box&lt;[T], A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Box&lt;[T], A&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;Box&lt;[T], A&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Clone-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::clone::Clone\">Clone</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Box&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a new box with a <code>clone()</code> of this boxâ€™s contents.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>y = x.clone();\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// But they are unique objects\n</span><span class=\"macro\">assert_ne!</span>(<span class=\"kw-2\">&amp;*</span>x <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>i32, <span class=\"kw-2\">&amp;*</span>y <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>i32);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Box&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Copies <code>source</code>â€™s contents into <code>self</code> without creating a new allocation.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = Box::new(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;*</span>y;\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no allocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, <span class=\"kw-2\">&amp;*</span>y);</code></pre></div>\n</div></details></div></details>","Clone","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.1.0\">1.1.0</span><a href=\"#impl-BorrowMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/borrow/trait.BorrowMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut T</h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"aero_kernel/prelude/rust_2021/_core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<T>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<section id=\"impl-Eq-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Eq-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Eq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Eq\">Eq</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Eq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>&lt;Args&gt; for Box&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Tuple.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_mut\" class=\"method trait-impl\"><a href=\"#method.call_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">extern &quot;rust-call&quot; fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html#tymethod.call_mut\" class=\"fn\">call_mut</a>(\n    &amp;mut self,\n    args: Args\n) -&gt; &lt;Box&lt;F, A&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::FnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>)</span></div></span><div class='docblock'>Performs the call operation.</div></details></div></details>","FnMut<Args>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Future-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.36.0\">1.36.0</span><a href=\"#impl-Future-for-Box%3CF,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;F, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/future/trait.Future.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::future::Future\">Future</a> for Box&lt;F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/future/trait.Future.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::future::Future\">Future</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Unpin.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/future/trait.Future.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/future/trait.Future.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/future/trait.Future.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::future::Future::Output\">Output</a></h4></section></summary><div class='docblock'>The type of value produced on completion.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll\" class=\"method trait-impl\"><a href=\"#method.poll\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/future/trait.Future.html#tymethod.poll\" class=\"fn\">poll</a>(\n    self: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/pin/struct.Pin.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::pin::Pin\">Pin</a>&lt;&amp;mut Box&lt;F, A&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/task/struct.Context.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::task::Context\">Context</a>&lt;'_&gt;\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/task/enum.Poll.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::task::Poll\">Poll</a>&lt;&lt;Box&lt;F, A&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/future/trait.Future.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/future/trait.Future.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::future::Future::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available. <a href=\"aero_kernel/prelude/rust_2021/_core/future/trait.Future.html#tymethod.poll\">Read more</a></div></details></div></details>","Future","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<section id=\"impl-Unpin-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0\">1.33.0</span><a href=\"#impl-Unpin-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Unpin.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Unpin\">Unpin</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a> + 'static,\n    T: ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h3></section>","Unpin","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E\" class=\"impl\"><a href=\"#impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;G, R, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Coroutine\">Coroutine</a>&lt;R&gt; for Box&lt;G, A&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Coroutine\">Coroutine</a>&lt;R&gt; + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Unpin.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Yield\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Coroutine::Yield\">Yield</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>)</span></div></span><div class='docblock'>The type of value this coroutine yields. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#associatedtype.Yield\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Return\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#associatedtype.Return\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Coroutine::Return\">Return</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>)</span></div></span><div class='docblock'>The type of value this coroutine returns. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#associatedtype.Return\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resume\" class=\"method trait-impl\"><a href=\"#method.resume\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#tymethod.resume\" class=\"fn\">resume</a>(\n    self: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/pin/struct.Pin.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::pin::Pin\">Pin</a>&lt;&amp;mut Box&lt;G, A&gt;&gt;,\n    arg: R\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/ops/enum.CoroutineState.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::ops::CoroutineState\">CoroutineState</a>&lt;&lt;Box&lt;G, A&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Coroutine::Yield\">Yield</a>, &lt;Box&lt;G, A&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#associatedtype.Return\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Coroutine::Return\">Return</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>)</span></div></span><div class='docblock'>Resumes the execution of this coroutine. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Coroutine.html#tymethod.resume\">Read more</a></div></details></div></details>","Coroutine<R>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialEq-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialEq\">PartialEq</a> for Box&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialEq\">PartialEq</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Box&lt;T, A&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a href=\"#method.ne\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;Box&lt;T, A&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Fn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-Fn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Fn.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Fn\">Fn</a>&lt;Args&gt; for Box&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Tuple.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Fn.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Fn\">Fn</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">Â§</a><h4 class=\"code-header\">extern &quot;rust-call&quot; fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Fn.html#tymethod.call\" class=\"fn\">call</a>(\n    &amp;self,\n    args: Args\n) -&gt; &lt;Box&lt;F, A&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::FnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>)</span></div></span><div class='docblock'>Performs the call operation.</div></details></div></details>","Fn<Args>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnOnce\">FnOnce</a>&lt;Args&gt; for Box&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Tuple.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnOnce\">FnOnce</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::FnOnce::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after the call operator is used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_once\" class=\"method trait-impl\"><a href=\"#method.call_once\" class=\"anchor\">Â§</a><h4 class=\"code-header\">extern &quot;rust-call&quot; fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html#tymethod.call_once\" class=\"fn\">call_once</a>(\n    self,\n    args: Args\n) -&gt; &lt;Box&lt;F, A&gt; as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnOnce.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::FnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>)</span></div></span><div class='docblock'>Performs the call operation.</div></details></div></details>","FnOnce<Args>","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExactSizeIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-ExactSizeIterator-for-Box%3CI,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.ExactSizeIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::ExactSizeIterator\">ExactSizeIterator</a> for Box&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.ExactSizeIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::ExactSizeIterator\">ExactSizeIterator</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a href=\"#method.len\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.ExactSizeIterator.html#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; usize</h4></section></summary><div class='docblock'>Returns the exact remaining length of the iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.ExactSizeIterator.html#method.len\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a href=\"#method.is_empty\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.ExactSizeIterator.html#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; bool</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>exact_size_is_empty</code>)</span></div></span><div class='docblock'>Returns <code>true</code> if the iterator is empty. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.ExactSizeIterator.html#method.is_empty\">Read more</a></div></details></div></details>","ExactSizeIterator","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Iterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Iterator-for-Box%3CI,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a> for Box&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a> + ?<a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/alloc/trait.Allocator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next\" class=\"method trait-impl\"><a href=\"#method.next\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#tymethod.next\" class=\"fn\">next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class='docblock'>Advances the iterator and returns the next value. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#tymethod.next\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (usize, <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;usize&gt;)</h4></section></summary><div class='docblock'>Returns the bounds on the remaining length of the iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth\" class=\"method trait-impl\"><a href=\"#method.nth\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.nth\" class=\"fn\">nth</a>(&amp;mut self, n: usize) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class='docblock'>Returns the <code>n</code>th element of the iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.nth\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last\" class=\"method trait-impl\"><a href=\"#method.last\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.last\" class=\"fn\">last</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class='docblock'>Consumes the iterator, returning the last element. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.last\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_chunk\" class=\"method trait-impl\"><a href=\"#method.next_chunk\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.next_chunk\" class=\"fn\">next_chunk</a>&lt;const N: usize&gt;(\n    &amp;mut self\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;[Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>; N], <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/array/struct.IntoIter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::array::IntoIter\">IntoIter</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>, N&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_next_chunk</code>)</span></div></span><div class='docblock'>Advances the iterator and returns an array containing the next <code>N</code> values. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.next_chunk\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.count\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.count\" class=\"fn\">count</a>(self) -&gt; usize<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Consumes the iterator, counting the number of iterations and returning it. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.count\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance_by\" class=\"method trait-impl\"><a href=\"#method.advance_by\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.advance_by\" class=\"fn\">advance_by</a>(&amp;mut self, n: usize) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroUsize.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize\">NonZeroUsize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>)</span></div></span><div class='docblock'>Advances the iterator by <code>n</code> elements. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.advance_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.step_by\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#method.step_by\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.step_by\" class=\"fn\">step_by</a>(self, step: usize) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.StepBy.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::StepBy\">StepBy</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StepBy&lt;Self&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.step_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.chain\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.chain\" class=\"fn\">chain</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Chain.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Chain\">Chain</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain&lt;Self, &lt;U as IntoIterator&gt;::IntoIter&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&lt;Item = Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes two iterators and creates a new iterator over both in sequence. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.zip\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Zip.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Zip\">Zip</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Zip&lt;Self, &lt;U as IntoIterator&gt;::IntoIter&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,</div></h4></section></summary><div class='docblock'>â€˜Zips upâ€™ two iterators into a single iterator of pairs. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.zip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersperse_with\" class=\"method trait-impl\"><a href=\"#method.intersperse_with\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.intersperse_with\" class=\"fn\">intersperse_with</a>&lt;G&gt;(self, separator: G) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.IntersperseWith.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::IntersperseWith\">IntersperseWith</a>&lt;Self, G&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntersperseWith&lt;Self, G&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>() -&gt; Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_intersperse</code>)</span></div></span><div class='docblock'>Creates a new iterator which places an item generated by <code>separator</code>\nbetween adjacent items of the original iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.intersperse_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.map\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.map\" class=\"fn\">map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Map.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Map\">Map</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Map&lt;Self, F&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>Takes a closure and creates an iterator which calls that closure on each\nelement. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.for_each\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.for_each\" class=\"fn\">for_each</a>&lt;F&gt;(self, f: F)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class='docblock'>Calls a closure on each element of an iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.filter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Filter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Filter\">Filter</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Filter&lt;Self, P&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><div class='docblock'>Creates an iterator which uses a closure to determine if an element\nshould be yielded. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.filter\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.filter_map\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.filter_map\" class=\"fn\">filter_map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.FilterMap.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::FilterMap\">FilterMap</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FilterMap&lt;Self, F&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator that both filters and maps. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.filter_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enumerate\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.enumerate\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.enumerate\" class=\"fn\">enumerate</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Enumerate.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Enumerate\">Enumerate</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Enumerate&lt;Self&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator which gives the current iteration count as well as\nthe next value. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.enumerate\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peekable\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.peekable\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.peekable\" class=\"fn\">peekable</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Peekable.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Peekable\">Peekable</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Peekable&lt;Self&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator which can use the <a href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Peekable.html#method.peek\" title=\"method aero_kernel::prelude::rust_2021::_core::iter::Peekable::peek\"><code>peek</code></a> and <a href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Peekable.html#method.peek_mut\" title=\"method aero_kernel::prelude::rust_2021::_core::iter::Peekable::peek_mut\"><code>peek_mut</code></a> methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.peekable\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip_while\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.skip_while\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.skip_while\" class=\"fn\">skip_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.SkipWhile.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::SkipWhile\">SkipWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SkipWhile&lt;Self, P&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><div class='docblock'>Creates an iterator that <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.skip\" title=\"method aero_kernel::prelude::rust_2021::_core::iter::Iterator::skip\"><code>skip</code></a>s elements based on a predicate. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.skip_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_while\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.take_while\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.take_while\" class=\"fn\">take_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.TakeWhile.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::TakeWhile\">TakeWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TakeWhile&lt;Self, P&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><div class='docblock'>Creates an iterator that yields elements based on a predicate. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.take_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_while\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.57.0\">1.57.0</span><a href=\"#method.map_while\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.map_while\" class=\"fn\">map_while</a>&lt;B, P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.MapWhile.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::MapWhile\">MapWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWhile&lt;Self, P&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator that both yields elements based on a predicate and maps. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.map_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.skip\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.skip\" class=\"fn\">skip</a>(self, n: usize) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Skip.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Skip\">Skip</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Skip&lt;Self&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator that skips the first <code>n</code> elements. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.skip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.take\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.take\" class=\"fn\">take</a>(self, n: usize) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Take.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take&lt;Self&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator that yields the first <code>n</code> elements, or fewer\nif the underlying iterator ends sooner. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.take\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scan\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.scan\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.scan\" class=\"fn\">scan</a>&lt;St, B, F&gt;(self, initial_state: St, f: F) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Scan.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Scan\">Scan</a>&lt;Self, St, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Scan&lt;Self, St, F&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;mut St, Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class='docblock'>An iterator adapter which, like <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.fold\" title=\"method aero_kernel::prelude::rust_2021::_core::iter::Iterator::fold\"><code>fold</code></a>, holds internal state, but\nunlike <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.fold\" title=\"method aero_kernel::prelude::rust_2021::_core::iter::Iterator::fold\"><code>fold</code></a>, produces a new iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.scan\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.flat_map\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.flat_map\" class=\"fn\">flat_map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.FlatMap.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::FlatMap\">FlatMap</a>&lt;Self, U, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FlatMap&lt;Self, U, F&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; U,</div></h4></section></summary><div class='docblock'>Creates an iterator that works like map, but flattens nested structure. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.flat_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_windows\" class=\"method trait-impl\"><a href=\"#method.map_windows\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.map_windows\" class=\"fn\">map_windows</a>&lt;F, R, const N: usize&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.MapWindows.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::MapWindows\">MapWindows</a>&lt;Self, F, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWindows&lt;Self, F, N&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;[Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>; N]) -&gt; R,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_map_windows</code>)</span></div></span><div class='docblock'>Calls the given function <code>f</code> for each contiguous window of size <code>N</code> over\n<code>self</code> and returns an iterator over the outputs of <code>f</code>. Like <a href=\"slice::windows\"><code>slice::windows()</code></a>,\nthe windows during mapping overlap as well. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.map_windows\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fuse\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.fuse\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.fuse\" class=\"fn\">fuse</a>(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Fuse.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Fuse\">Fuse</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Fuse&lt;Self&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator which ends after the first <a href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::_core::option::Option::None\"><code>None</code></a>. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.fuse\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.inspect\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Inspect.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Inspect\">Inspect</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Inspect&lt;Self, F&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class='docblock'>Does something with each element of an iterator, passing the value on. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.inspect\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.by_ref\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Borrows an iterator, rather than consuming it. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.collect\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.collect\" class=\"fn\">collect</a>&lt;B&gt;(self) -&gt; B<div class=\"where\">where\n    B: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.FromIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::FromIterator\">FromIterator</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transforms an iterator into a collection. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.collect\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_into\" class=\"method trait-impl\"><a href=\"#method.collect_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.collect_into\" class=\"fn\">collect_into</a>&lt;E&gt;(self, collection: &amp;mut E) -&gt; &amp;mut E<div class=\"where\">where\n    E: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_collect_into</code>)</span></div></span><div class='docblock'>Collects all the items from an iterator into a collection. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.collect_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partition\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.partition\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.partition\" class=\"fn\">partition</a>&lt;B, F&gt;(self, f: F) -&gt; (B, B)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    B: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/default/trait.Default.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::default::Default\">Default</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><div class='docblock'>Consumes an iterator, creating two collections from it. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.partition\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_partitioned\" class=\"method trait-impl\"><a href=\"#method.is_partitioned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.is_partitioned\" class=\"fn\">is_partitioned</a>&lt;P&gt;(self, predicate: P) -&gt; bool<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_is_partitioned</code>)</span></div></span><div class='docblock'>Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return <code>true</code> precede all those that return <code>false</code>. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.is_partitioned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_fold\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.27.0\">1.27.0</span><a href=\"#method.try_fold\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.try_fold\" class=\"fn\">try_fold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class='docblock'>An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.try_fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_for_each\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.27.0\">1.27.0</span><a href=\"#method.try_for_each\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.try_for_each\" class=\"fn\">try_for_each</a>&lt;F, R&gt;(&amp;mut self, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&lt;Output = ()&gt;,</div></h4></section></summary><div class='docblock'>An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.try_for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.fold\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.fold\" class=\"fn\">fold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>Folds every element into an accumulator by applying an operation,\nreturning the final result. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reduce\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.51.0\">1.51.0</span><a href=\"#method.reduce\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.reduce\" class=\"fn\">reduce</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><div class='docblock'>Reduces the elements to a single one, by repeatedly applying a reducing\noperation. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reduce\" class=\"method trait-impl\"><a href=\"#method.try_reduce\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.try_reduce\" class=\"fn\">try_reduce</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Residual.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;&lt;R as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Try::Output\">Output</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Residual.html#associatedtype.TryType\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Residual.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iterator_try_reduce</code>)</span></div></span><div class='docblock'>Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.try_reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.all\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.all\" class=\"fn\">all</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; bool<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><div class='docblock'>Tests if every element of the iterator matches a predicate. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.any\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.any\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.any\" class=\"fn\">any</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; bool<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><div class='docblock'>Tests if any element of the iterator matches a predicate. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.any\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.find\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.find\" class=\"fn\">find</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><div class='docblock'>Searches for an element of an iterator that satisfies a predicate. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.find\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_map\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.30.0\">1.30.0</span><a href=\"#method.find_map\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.find_map\" class=\"fn\">find_map</a>&lt;B, F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;B&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class='docblock'>Applies function to the elements of iterator and returns\nthe first non-none result. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.find_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_find\" class=\"method trait-impl\"><a href=\"#method.try_find\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.try_find\" class=\"fn\">try_find</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Residual.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Residual.html#associatedtype.TryType\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&lt;Output = bool&gt;,\n    &lt;R as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Try.html#associatedtype.Residual\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.Residual.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_find</code>)</span></div></span><div class='docblock'>Applies function to the elements of iterator and returns\nthe first true result or the first error. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.try_find\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.position\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.position\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.position\" class=\"fn\">position</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;usize&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><div class='docblock'>Searches for an element in an iterator, returning its index. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.position\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by_key\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.6.0\">1.6.0</span><a href=\"#method.max_by_key\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.max_by_key\" class=\"fn\">max_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>Returns the element that gives the maximum value from the\nspecified function. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.max_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.15.0\">1.15.0</span><a href=\"#method.max_by\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.max_by\" class=\"fn\">max_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class='docblock'>Returns the element that gives the maximum value with respect to the\nspecified comparison function. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.max_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by_key\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.6.0\">1.6.0</span><a href=\"#method.min_by_key\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.min_by_key\" class=\"fn\">min_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class='docblock'>Returns the element that gives the minimum value from the\nspecified function. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.min_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.15.0\">1.15.0</span><a href=\"#method.min_by\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.min_by\" class=\"fn\">min_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class='docblock'>Returns the element that gives the minimum value with respect to the\nspecified comparison function. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.min_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unzip\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.unzip\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.unzip\" class=\"fn\">unzip</a>&lt;A, B, FromA, FromB&gt;(self) -&gt; (FromA, FromB)<div class=\"where\">where\n    FromA: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/default/trait.Default.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::default::Default\">Default</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Extend\">Extend</a>&lt;A&gt;,\n    FromB: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/default/trait.Default.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::default::Default\">Default</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Extend\">Extend</a>&lt;B&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a>&lt;Item = (A, B)&gt;,</div></h4></section></summary><div class='docblock'>Converts an iterator of pairs into a pair of containers. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.unzip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copied\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.36.0\">1.36.0</span><a href=\"#method.copied\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.copied\" class=\"fn\">copied</a>&lt;'a, T&gt;(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Copied.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Copied\">Copied</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Copied&lt;Self&gt;\">â“˜</a><div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Copy.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Copy\">Copy</a>,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a T&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator which copies all of its elements. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.copied\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cloned\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.cloned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.cloned\" class=\"fn\">cloned</a>&lt;'a, T&gt;(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.Cloned.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::Cloned\">Cloned</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Cloned&lt;Self&gt;\">â“˜</a><div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::clone::Clone\">Clone</a>,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a T&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator which <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#tymethod.clone\" title=\"method aero_kernel::prelude::rust_2021::_core::clone::Clone::clone\"><code>clone</code></a>s all of its elements. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.cloned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.array_chunks\" class=\"method trait-impl\"><a href=\"#method.array_chunks\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.array_chunks\" class=\"fn\">array_chunks</a>&lt;const N: usize&gt;(self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/iter/struct.ArrayChunks.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::iter::ArrayChunks\">ArrayChunks</a>&lt;Self, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ArrayChunks&lt;Self, N&gt;\">â“˜</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_array_chunks</code>)</span></div></span><div class='docblock'>Returns an iterator over <code>N</code> elements of the iterator at a time. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.array_chunks\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.11.0\">1.11.0</span><a href=\"#method.sum\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.sum\" class=\"fn\">sum</a>&lt;S&gt;(self) -&gt; S<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Sum.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Sum\">Sum</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class='docblock'>Sums the elements of an iterator. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.11.0\">1.11.0</span><a href=\"#method.product\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.product\" class=\"fn\">product</a>&lt;P&gt;(self) -&gt; P<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Product.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Product\">Product</a>&lt;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class='docblock'>Iterates over the entire iterator, multiplying all the elements <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.product\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp_by\" class=\"method trait-impl\"><a href=\"#method.cmp_by\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.cmp_by\" class=\"fn\">cmp_by</a>&lt;I, F&gt;(self, other: I, cmp: F) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>)</span></div></span><div class='docblock'><a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.partial_cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.partial_cmp\" class=\"fn\">partial_cmp</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'><a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">Lexicographically</a> compares the <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\"><code>PartialOrd</code></a> elements of\nthis <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> with those of another. The comparison works like short-circuit\nevaluation, returning a result without comparing the remaining elements.\nAs soon as an order can be determined, the evaluation stops and a result is returned. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp_by\" class=\"method trait-impl\"><a href=\"#method.partial_cmp_by\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.partial_cmp_by\" class=\"fn\">partial_cmp_by</a>&lt;I, F&gt;(self, other: I, partial_cmp: F) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>)</span></div></span><div class='docblock'><a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.partial_cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.eq\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.eq\" class=\"fn\">eq</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.eq\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_by\" class=\"method trait-impl\"><a href=\"#method.eq_by\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.eq_by\" class=\"fn\">eq_by</a>&lt;I, F&gt;(self, other: I, eq: F) -&gt; bool<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>) -&gt; bool,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>)</span></div></span><div class='docblock'>Determines if the elements of this <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother with respect to the specified equality function. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.eq_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.ne\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.ne\" class=\"fn\">ne</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> are not equal to those of\nanother. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.lt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.lt\" class=\"fn\">lt</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> are <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">lexicographically</a>\nless than those of another. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.le\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.le\" class=\"fn\">le</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> are <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">lexicographically</a>\nless or equal to those of another. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.gt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.gt\" class=\"fn\">gt</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> are <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">lexicographically</a>\ngreater than those of another. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.5.0\">1.5.0</span><a href=\"#method.ge\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.ge\" class=\"fn\">ge</a>&lt;I&gt;(self, other: I) -&gt; bool<div class=\"where\">where\n    I: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Determines if the elements of this <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Iterator\"><code>Iterator</code></a> are <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">lexicographically</a>\ngreater than or equal to those of another. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sorted_by\" class=\"method trait-impl\"><a href=\"#method.is_sorted_by\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.is_sorted_by\" class=\"fn\">is_sorted_by</a>&lt;F&gt;(self, compare: F) -&gt; bool<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>)</span></div></span><div class='docblock'>Checks if the elements of this iterator are sorted using the given comparator function. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.is_sorted_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sorted_by_key\" class=\"method trait-impl\"><a href=\"#method.is_sorted_by_key\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.is_sorted_by_key\" class=\"fn\">is_sorted_by_key</a>&lt;F, K&gt;(self, f: F) -&gt; bool<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.FnMut.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#associatedtype.Item\" title=\"type aero_kernel::prelude::rust_2021::_core::iter::Iterator::Item\">Item</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>)</span></div></span><div class='docblock'>Checks if the elements of this iterator are sorted using the given key extraction\nfunction. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.is_sorted_by_key\">Read more</a></div></details></div></details>","Iterator","aero_kernel::net::RawPacket","aero_kernel::utils::dma::DmaBuffer"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()