(function() {var type_impls = {
"aero_kernel":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(A,+B)%3E-for-(ExtendA,+ExtendB)\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.56.0\">1.56.0</span><a href=\"#impl-Extend%3C(A,+B)%3E-for-(ExtendA,+ExtendB)\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A, B, ExtendA, ExtendB&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Extend\">Extend</a>&lt;(A, B)&gt; for (ExtendA, ExtendB)<div class=\"where\">where\n    ExtendA: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Extend\">Extend</a>&lt;A&gt;,\n    ExtendB: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::Extend\">Extend</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, into_iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.IntoIterator.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::iter::IntoIterator\">IntoIterator</a>&lt;Item = (A, B)&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Allows to <code>extend</code> a tuple of collections that also implement <code>Extend</code>.</p>\n<p>See also: <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Iterator.html#method.unzip\" title=\"method aero_kernel::prelude::rust_2021::_core::iter::Iterator::unzip\"><code>Iterator::unzip</code></a></p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tuple = (<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>]);\ntuple.extend([(<span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">5</span>), (<span class=\"number\">6</span>, <span class=\"number\">7</span>)]);\n<span class=\"macro\">assert_eq!</span>(tuple.<span class=\"number\">0</span>, [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(tuple.<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]);\n\n<span class=\"comment\">// also allows for arbitrarily nested tuples as elements\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>nested_tuple = (<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>], (<span class=\"macro\">vec!</span>[<span class=\"number\">2</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">3</span>]));\nnested_tuple.extend([(<span class=\"number\">4</span>, (<span class=\"number\">5</span>, <span class=\"number\">6</span>)), (<span class=\"number\">7</span>, (<span class=\"number\">8</span>, <span class=\"number\">9</span>))]);\n\n<span class=\"kw\">let </span>(a, (b, c)) = nested_tuple;\n<span class=\"macro\">assert_eq!</span>(a, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>]);\n<span class=\"macro\">assert_eq!</span>(b, [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]);\n<span class=\"macro\">assert_eq!</span>(c, [<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a href=\"#method.extend_one\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: (A, B))</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a href=\"#method.extend_reserve\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: usize)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"aero_kernel/prelude/rust_2021/_core/iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(A, B)>","aero_kernel::arch::x86_64::tls::ProcFsCpuFeature","aero_kernel::fs::block::PageCacheKey","aero_kernel::fs::cache::INodeCacheKey","aero_kernel::fs::cache::DirCacheKey","aero_kernel::fs::MountKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::From\">From</a>&lt;[T; 2]&gt; for (T, T)</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: [T; 2]) -&gt; (T, T)</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[T; 2]>","aero_kernel::arch::x86_64::tls::ProcFsCpuFeature","aero_kernel::fs::block::PageCacheKey","aero_kernel::fs::cache::INodeCacheKey","aero_kernel::fs::cache::DirCacheKey","aero_kernel::fs::MountKey"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()