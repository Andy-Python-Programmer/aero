(function() {var type_impls = {
"aero_kernel":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZeroU64\" class=\"impl\"><a href=\"#impl-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0, const since 1.28.0\">1.28.0 (const: 1.28.0)</span><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(n: u64) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class=\"docblock\"><p>Creates a non-zero without checking whether the value is non-zero.\nThis results in undefined behaviour if the value is zero.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>The value must not be zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0, const since 1.47.0\">1.28.0 (const: 1.47.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.new\" class=\"fn\">new</a>(n: u64) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a non-zero if the given value is not zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0, const since 1.34.0\">1.28.0 (const: 1.34.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.get\" class=\"fn\">get</a>(self) -&gt; u64</h4></section></summary><div class=\"docblock\"><p>Returns the value as a primitive type.</p>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZeroU64\" class=\"impl\"><a href=\"#impl-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = std::num::NonZeroU64::new(u64::MAX).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = std::num::NonZeroU64::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZeroU64\" class=\"impl\"><a href=\"#impl-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, other: u64) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::_core::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZeroU64::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZeroU64::new(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZeroU64::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, other: u64) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZeroU64::MAX\"><code>NonZeroU64::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZeroU64::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZeroU64::new(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZeroU64::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, other: u64) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self + rhs &gt; u64::MAX</code>.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZeroU64::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZeroU64::new(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.checked_next_power_of_two\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to n.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::_core::option::Option::None\"><code>None</code></a>\nif the next power of two is greater than the typeโs maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZeroU64::new(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZeroU64::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZeroU64::new(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZeroU64::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u64::ilog2</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZeroU64::new(<span class=\"number\">7</span>).unwrap().ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZeroU64::new(<span class=\"number\">8</span>).unwrap().ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZeroU64::new(<span class=\"number\">9</span>).unwrap().ilog2(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; u32</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n[<code>u64::ilog10</code>],\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZeroU64::new(<span class=\"number\">99</span>).unwrap().ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZeroU64::new(<span class=\"number\">100</span>).unwrap().ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZeroU64::new(<span class=\"number\">101</span>).unwrap().ilog10(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"since rightside\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span><h4 class=\"code-header\">pub fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n\n</span><span class=\"kw\">let </span>one = NonZeroU64::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZeroU64::new(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZeroU64::new(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZeroU64\" class=\"impl\"><a href=\"#impl-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::_core::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZeroU64::new(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZeroU64::new(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZeroU64::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZeroU64::MAX\"><code>NonZeroU64::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZeroU64::new(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZeroU64::new(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZeroU64::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; u64::MAX</code>.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZeroU64::new(<span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZeroU64::new(<span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: u32) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html#variant.None\" title=\"variant aero_kernel::prelude::rust_2021::_core::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZeroU64::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZeroU64::new(<span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZeroU64::new(u64::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: u32) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#associatedconstant.MAX\" title=\"associated constant aero_kernel::prelude::rust_2021::_core::num::NonZeroU64::MAX\"><code>NonZeroU64::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZeroU64::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZeroU64::new(<span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZeroU64::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZeroU64\" class=\"impl\"><a href=\"#impl-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span><h4 class=\"code-header\">pub const fn <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#tymethod.is_power_of_two\" class=\"fn\">is_power_of_two</a>(self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = std::num::NonZeroU64::new(<span class=\"number\">8</span>).unwrap();\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = std::num::NonZeroU64::new(<span class=\"number\">10</span>).unwrap();\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZeroU64\" class=\"impl\"><a href=\"#impl-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZeroU64::MIN.get(), <span class=\"number\">1u64</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to [<code>u64::MAX</code>].</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZeroU64::MAX.get(), u64::MAX);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonZeroU64\" class=\"impl\"><a href=\"#impl-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"since rightside\" title=\"Stable since Rust version 1.67.0\">1.67.0</span><h4 class=\"code-header\">pub const <a href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: u32 = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to [<code>u64::BITS</code>].</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"macro\">assert_eq!</span>(NonZeroU64::BITS, u64::BITS);</code></pre></div>\n</div></details></div></details>",0,"aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-PartialOrd-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Binary-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Binary.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Binary\">Binary</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-LowerHex-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerHex.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::LowerHex\">LowerHex</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Clone-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"aero_kernel/prelude/rust_2021/_core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.45.0\">1.45.0</span><a href=\"#impl-BitOr-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>) -&gt; &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Cu64%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.45.0\">1.45.0</span><a href=\"#impl-BitOr%3Cu64%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;u64&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: u64) -&gt; &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOr\">BitOr</a>&lt;u64&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type aero_kernel::prelude::rust_2021::_core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<u64>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<section id=\"impl-StructuralEq-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-StructuralEq-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.StructuralEq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::StructuralEq\">StructuralEq</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section>","StructuralEq","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-UpperHex-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperHex.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::UpperHex\">UpperHex</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.35.0\">1.35.0</span><a href=\"#impl-FromStr-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.ParseIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a href=\"#method.from_str\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;str) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#associatedtype.Err\" title=\"type aero_kernel::prelude::rust_2021::_core::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"aero_kernel/prelude/rust_2021/_core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.45.0\">1.45.0</span><a href=\"#impl-BitOrAssign-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOrAssign\">BitOrAssign</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Cu64%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.45.0\">1.45.0</span><a href=\"#impl-BitOrAssign%3Cu64%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::ops::BitOrAssign\">BitOrAssign</a>&lt;u64&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: u64)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"aero_kernel/prelude/rust_2021/_core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<u64>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<section id=\"impl-Eq-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Eq-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Eq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section>","Eq","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Hash-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: &amp;mut __H)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hasher.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"aero_kernel/prelude/rust_2021/_core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Ord-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/enum.Ordering.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.max\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.min\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#method.clamp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Sized.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialOrd.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-PartialEq-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Display-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<section id=\"impl-StructuralPartialEq-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-StructuralPartialEq-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.StructuralPartialEq.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section>","StructuralPartialEq","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Debug-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Octal-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Octal.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::fmt::Octal\">Octal</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Formatter.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;(), <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/fmt/struct.Error.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroU16%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZeroU16%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU16.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU16\">NonZeroU16</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU16.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU16\">NonZeroU16</a>) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>NonZeroU16</code> to <code>NonZeroU64</code> losslessly.</p>\n</div></details></div></details>","From<NonZeroU16>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroU8%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZeroU8%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU8.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU8\">NonZeroU8</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU8.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU8\">NonZeroU8</a>) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>NonZeroU8</code> to <code>NonZeroU64</code> losslessly.</p>\n</div></details></div></details>","From<NonZeroU8>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroU32%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><a href=\"#impl-From%3CNonZeroU32%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU32.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU32.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>NonZeroU32</code> to <code>NonZeroU64</code> losslessly.</p>\n</div></details></div></details>","From<NonZeroU32>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<section id=\"impl-Copy-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.28.0\">1.28.0</span><a href=\"#impl-Copy-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/marker/trait.Copy.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section>","Copy","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZeroI16%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZeroI16%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI16.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI16\">NonZeroI16</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI16.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI16\">NonZeroI16</a>\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI16.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI16\">NonZeroI16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::_core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZeroI16>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZeroIsize%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZeroIsize%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroIsize.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize\">NonZeroIsize</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroIsize.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize\">NonZeroIsize</a>\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroIsize.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroIsize\">NonZeroIsize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::_core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZeroIsize>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZeroI32%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZeroI32%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI32.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI32\">NonZeroI32</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI32.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI32\">NonZeroI32</a>\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI32.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI32\">NonZeroI32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::_core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZeroI32>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZeroI8%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZeroI8%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI8.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI8\">NonZeroI8</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI8.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI8\">NonZeroI8</a>\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI8.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI8\">NonZeroI8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::_core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZeroI8>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZeroI64%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZeroI64%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI64\">NonZeroI64</a>\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI64\">NonZeroI64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::_core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZeroI64>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><a href=\"#impl-TryFrom%3Cu64%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;u64&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: u64\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;u64&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::_core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code>u64</code> to <code>NonZeroU64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u64>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZeroI128%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZeroI128%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI128.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI128\">NonZeroI128</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI128.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI128\">NonZeroI128</a>\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroI128.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroI128\">NonZeroI128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::_core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZeroI128>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZeroU128%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZeroU128%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU128.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU128\">NonZeroU128</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU128.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU128\">NonZeroU128</a>\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU128.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU128\">NonZeroU128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::_core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZeroU128>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNonZeroUsize%3E-for-NonZeroU64\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.49.0\">1.49.0</span><a href=\"#impl-TryFrom%3CNonZeroUsize%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroUsize.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize\">NonZeroUsize</a>&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroUsize.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize\">NonZeroUsize</a>\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html\" title=\"trait aero_kernel::prelude::rust_2021::_core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroUsize.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroUsize\">NonZeroUsize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type aero_kernel::prelude::rust_2021::_core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"aero_kernel/prelude/rust_2021/_core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.TryFromIntError.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NonZeroUsize>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NonZeroU64\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#337-342\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#337-342\">source</a><a href=\"#method.deserialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a>, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NonZeroU64\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#548-555\">source</a><a href=\"#impl-Serialize-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#548-555\">source</a><a href=\"#method.serialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/result/enum.Result.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<section id=\"impl-NoUninit-for-NonZeroU64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/no_uninit.rs.html#75\">source</a><a href=\"#impl-NoUninit-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/no_uninit/trait.NoUninit.html\" title=\"trait bytemuck::no_uninit::NoUninit\">NoUninit</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section>","NoUninit","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBitPattern-for-NonZeroU64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">source</a><a href=\"#impl-CheckedBitPattern-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bits\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = u64</h4></section></summary><div class='docblock'><code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> except for\nthe possible invalid bit patterns being checked during\n<a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" title=\"associated function bytemuck::checked::CheckedBitPattern::is_valid_bit_pattern\"><code>is_valid_bit_pattern</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_bit_pattern\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/checked.rs.html#188-201\">source</a><a href=\"#method.is_valid_bit_pattern\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"bytemuck/checked/trait.CheckedBitPattern.html#tymethod.is_valid_bit_pattern\" class=\"fn\">is_valid_bit_pattern</a>(bits: &amp;&lt;<a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a> as <a class=\"trait\" href=\"bytemuck/checked/trait.CheckedBitPattern.html\" title=\"trait bytemuck::checked::CheckedBitPattern\">CheckedBitPattern</a>&gt;::<a class=\"associatedtype\" href=\"bytemuck/checked/trait.CheckedBitPattern.html#associatedtype.Bits\" title=\"type bytemuck::checked::CheckedBitPattern::Bits\">Bits</a>) -&gt; bool</h4></section></summary><div class='docblock'>If this function returns true, then it must be valid to reinterpret <code>bits</code>\nas <code>&amp;Self</code>.</div></details></div></details>","CheckedBitPattern","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<section id=\"impl-PodInOption-for-NonZeroU64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod_in_option.rs.html#25\">source</a><a href=\"#impl-PodInOption-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod_in_option/trait.PodInOption.html\" title=\"trait bytemuck::pod_in_option::PodInOption\">PodInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section>","PodInOption","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Contiguous-for-NonZeroU64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">source</a><a href=\"#impl-Contiguous-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/contiguous/trait.Contiguous.html\" title=\"trait bytemuck::contiguous::Contiguous\">Contiguous</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Int\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Int\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" class=\"associatedtype\">Int</a> = u64</h4></section></summary><div class='docblock'>The primitive integer type with an identical representation to this\ntype. <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">source</a><a href=\"#associatedconstant.MAX_VALUE\" class=\"anchor\">ยง</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MAX_VALUE\" class=\"constant\">MAX_VALUE</a>: u64 = 18_446_744_073_709_551_615u64</h4></section></summary><div class='docblock'>The upper <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#179-202\">source</a><a href=\"#associatedconstant.MIN_VALUE\" class=\"anchor\">ยง</a><h4 class=\"code-header\">const <a href=\"bytemuck/contiguous/trait.Contiguous.html#associatedconstant.MIN_VALUE\" class=\"constant\">MIN_VALUE</a>: u64 = 1u64</h4></section></summary><div class='docblock'>The lower <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#119\">source</a><a href=\"#method.from_integer\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\" class=\"fn\">from_integer</a>(value: Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a>) -&gt; <a class=\"enum\" href=\"aero_kernel/prelude/rust_2021/_core/option/enum.Option.html\" title=\"enum aero_kernel::prelude::rust_2021::_core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>If <code>value</code> is within the range for valid instances of this type,\nreturns <code>Some(converted_value)</code>, otherwise, returns <code>None</code>. <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.from_integer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/contiguous.rs.html#154\">source</a><a href=\"#method.into_integer\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\" class=\"fn\">into_integer</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"bytemuck/contiguous/trait.Contiguous.html#associatedtype.Int\" title=\"type bytemuck::contiguous::Contiguous::Int\">Int</a></h4></section></summary><div class='docblock'>Perform the conversion from <code>C</code> into the underlying integral type. This\nmostly exists otherwise generic code would need unsafe for the <code>value as integer</code> <a href=\"bytemuck/contiguous/trait.Contiguous.html#method.into_integer\">Read more</a></div></details></div></details>","Contiguous","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"],["<section id=\"impl-ZeroableInOption-for-NonZeroU64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable_in_option.rs.html#24\">source</a><a href=\"#impl-ZeroableInOption-for-NonZeroU64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable_in_option/trait.ZeroableInOption.html\" title=\"trait bytemuck::zeroable_in_option::ZeroableInOption\">ZeroableInOption</a> for <a class=\"struct\" href=\"aero_kernel/prelude/rust_2021/_core/num/struct.NonZeroU64.html\" title=\"struct aero_kernel::prelude::rust_2021::_core::num::NonZeroU64\">NonZeroU64</a></h3></section>","ZeroableInOption","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulong","aero_kernel::prelude::rust_2021::_core::ffi::NonZero_c_ulonglong"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()