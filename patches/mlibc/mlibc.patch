From d33a19a85fd625a2acf53f95f32c369b7f91e230 Mon Sep 17 00:00:00 2001
From: Anhad Singh <andypythonappdeveloper@gmail.com>
Date: Thu, 3 Aug 2023 16:36:12 +1000
Subject: [PATCH] socket: implement shutdown(2)

Signed-off-by: Anhad Singh <andypythonappdeveloper@gmail.com>
---
 options/glibc/generic/execinfo.cpp            |  5 ++--
 options/posix/generic/sys-socket-stubs.cpp    |  9 ++++++--
 options/posix/include/mlibc/posix-sysdeps.hpp |  1 +
 sysdeps/aero/generic/signals.cpp              | 19 ++++++---------
 sysdeps/aero/generic/sockets.cpp              | 23 +++++++++++++++++++
 sysdeps/aero/include/aero/syscall.h           |  3 +++
 6 files changed, 44 insertions(+), 16 deletions(-)

diff --git a/options/glibc/generic/execinfo.cpp b/options/glibc/generic/execinfo.cpp
index 3474615..aaf593a 100644
--- a/options/glibc/generic/execinfo.cpp
+++ b/options/glibc/generic/execinfo.cpp
@@ -1,9 +1,10 @@
 #include <execinfo.h>
 #include <bits/ensure.h>
+#include <mlibc/charset.hpp>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "backtrace: Not implemented" << frg::endlog;
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git a/options/posix/generic/sys-socket-stubs.cpp b/options/posix/generic/sys-socket-stubs.cpp
index 1674945..037a994 100644
--- a/options/posix/generic/sys-socket-stubs.cpp
+++ b/options/posix/generic/sys-socket-stubs.cpp
@@ -187,8 +187,13 @@ int setsockopt(int fd, int layer, int number,
 	return mlibc::sys_setsockopt(fd, layer, number, buffer, size);
 }
 
-int shutdown(int, int) {
-	mlibc::infoLogger() << "mlibc: shutdown() is a no-op!" << frg::endlog;
+int shutdown(int sockfd, int how) {
+	auto sysdep = MLIBC_CHECK_OR_ENOSYS(mlibc::sys_shutdown, -1);
+	if(int e = sysdep(sockfd, how); e) {
+		errno = e;
+		return -1;
+	}
+
 	return 0;
 }
 
diff --git a/options/posix/include/mlibc/posix-sysdeps.hpp b/options/posix/include/mlibc/posix-sysdeps.hpp
index 9918188..c694079 100644
--- a/options/posix/include/mlibc/posix-sysdeps.hpp
+++ b/options/posix/include/mlibc/posix-sysdeps.hpp
@@ -159,6 +159,7 @@ int sys_vm_unmap(void *pointer, size_t size);
 		void *__restrict buffer, socklen_t *__restrict size);
 [[gnu::weak]] int sys_setsockopt(int fd, int layer, int number,
 		const void *buffer, socklen_t size);
+[[gnu::weak]] int sys_shutdown(int sockfd, int how);
 [[gnu::weak]] int sys_sigprocmask(int how, const sigset_t *__restrict set,
 		sigset_t *__restrict retrieve);
 [[gnu::weak]] int sys_sigaction(int, const struct sigaction *__restrict,
diff --git a/sysdeps/aero/generic/signals.cpp b/sysdeps/aero/generic/signals.cpp
index a6f69ff..611db69 100644
--- a/sysdeps/aero/generic/signals.cpp
+++ b/sysdeps/aero/generic/signals.cpp
@@ -29,25 +29,20 @@ int sys_sigaction(int how, const struct sigaction *__restrict action,
 #endif
 
     auto sigreturn = (sc_word_t)__mlibc_signal_restore;
-
-    auto res = syscall(SYS_SIGACTION, how, (sc_word_t)action, sigreturn,
+    auto ret = syscall(SYS_SIGACTION, how, (sc_word_t)action, sigreturn,
                        (sc_word_t)old_action);
 
-    if (res < 0) {
-        return -res;
-    }
-
+    if(int e = sc_error(ret); e)
+        return e;
     return 0;
 }
 
 int sys_sigprocmask(int how, const sigset_t *__restrict set,
                     sigset_t *__restrict retrieve) {
-    auto result = syscall(SYS_SIGPROCMASK, how, set, retrieve);
 
-    if (result < 0) {
-        return -result;
-    }
-
-    return 0;
+    auto ret = syscall(SYS_SIGPROCMASK, how, set, retrieve);
+    if(int e = sc_error(ret); e)
+		return e;
+	return 0;
 }
 } // namespace mlibc
\ No newline at end of file
diff --git a/sysdeps/aero/generic/sockets.cpp b/sysdeps/aero/generic/sockets.cpp
index 2db218c..ed3fc06 100644
--- a/sysdeps/aero/generic/sockets.cpp
+++ b/sysdeps/aero/generic/sockets.cpp
@@ -221,6 +221,29 @@ int sys_setsockopt(int fd, int layer, int number, const void *buffer,
     }
 }
 
+int sys_shutdown(int sockfd, int how) {
+    auto ret = syscall(SYS_SOCK_SHUTDOWN, sockfd, how);
+    if(int e = sc_error(ret); e)
+        return e;
+    return 0;    
+}
+
+int sys_peername(int fd, struct sockaddr *addr_ptr, socklen_t max_addr_length, socklen_t *actual_length) {
+	auto ret = syscall(SYS_GETPEERNAME, fd, addr_ptr, &max_addr_length);
+	if (int e = sc_error(ret); e)
+		return e;
+	*actual_length = max_addr_length;
+	return 0;
+}
+
+int sys_sockname(int fd, struct sockaddr *addr_ptr, socklen_t max_addr_length, socklen_t *actual_length) {
+	auto ret = syscall(SYS_GETSOCKNAME, fd, addr_ptr, &max_addr_length);
+	if (int e = sc_error(ret); e)
+		return e;
+	*actual_length = max_addr_length;
+	return 0;
+}
+
 int sys_if_nametoindex(const char *name, unsigned int *ret) {
     int fd = 0;
     int r = sys_socket(AF_INET, SOCK_DGRAM | SOCK_CLOEXEC, AF_UNSPEC, &fd);
diff --git a/sysdeps/aero/include/aero/syscall.h b/sysdeps/aero/include/aero/syscall.h
index d8bf99e..39c5b65 100644
--- a/sysdeps/aero/include/aero/syscall.h
+++ b/sysdeps/aero/include/aero/syscall.h
@@ -79,6 +79,9 @@
 #define SYS_SETPGID 72
 #define SYS_SETSID 73
 #define SYS_GETPGID 74
+#define SYS_SOCK_SHUTDOWN 75
+#define SYS_GETPEERNAME 76
+#define SYS_GETSOCKNAME 77
 
 // Invalid syscall used to trigger a log error in the kernel (as a hint)
 // so, that we can implement the syscall in the kernel.
-- 
2.42.0

