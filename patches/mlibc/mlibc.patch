From 1f388ec59a355c18a21aa23226159d90fcb35912 Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Thu, 10 Feb 2022 19:12:25 +1100
Subject: [PATCH] yes

Signed-off-by: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
---
 .gitignore                          |  3 ++
 options/rtdl/generic/linker.cpp     |  2 +-
 sysdeps/aero/generic/aero.cpp       | 12 ++++-
 sysdeps/aero/generic/filesystem.cpp | 79 ++++++++++++++++++++++++++---
 sysdeps/aero/generic/signals.cpp    |  8 ++-
 sysdeps/aero/include/aero/syscall.h | 12 +++++
 6 files changed, 103 insertions(+), 13 deletions(-)

diff --git a/.gitignore b/.gitignore
index dbb35e8b..20c8d4c3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,6 @@ subprojects/cxxshim
 subprojects/frigg
 .vscode
 .clang-format
+
+# clangd cache
+.cache
diff --git a/options/rtdl/generic/linker.cpp b/options/rtdl/generic/linker.cpp
index 53264175..38ba8c9f 100644
--- a/options/rtdl/generic/linker.cpp
+++ b/options/rtdl/generic/linker.cpp
@@ -14,7 +14,7 @@ uintptr_t libraryBase = 0x41000000;
 
 bool verbose = false;
 bool stillSlightlyVerbose = false;
-bool logBaseAddresses = false;
+bool logBaseAddresses = true;
 bool eagerBinding = true;
 
 #if defined(__x86_64__)
diff --git a/sysdeps/aero/generic/aero.cpp b/sysdeps/aero/generic/aero.cpp
index 7de909f5..4281beb9 100644
--- a/sysdeps/aero/generic/aero.cpp
+++ b/sysdeps/aero/generic/aero.cpp
@@ -173,7 +173,15 @@ int sys_getcwd(char *buffer, size_t size) {
     return 0;
 }
 
-int sys_chdir(const char *path) UNIMPLEMENTED("sys_chdir")
+int sys_chdir(const char *path) {
+    auto result = syscall(SYS_CHDIR, path, strlen(path));
+
+    if (result < 0) {
+        return -result;
+    }
+
+    return 0;
+}
 
 int sys_gethostname(char *buffer, size_t bufsize) {
     auto result = syscall(SYS_GETHOSTNAME, buffer, bufsize);
@@ -286,7 +294,7 @@ int sys_execve(const char *path, char *const argv[], char *const envp[]) {
     __builtin_unreachable();
 }
 
-int sys_getentropy(void *buffer, size_t length) UNIMPLEMENTED("sys_getentropy")
+// int sys_getentropy(void *buffer, size_t length) UNIMPLEMENTED("sys_getentropy")
 
 #endif
 } // namespace mlibc
diff --git a/sysdeps/aero/generic/filesystem.cpp b/sysdeps/aero/generic/filesystem.cpp
index 6a13f19c..d34dfce3 100644
--- a/sysdeps/aero/generic/filesystem.cpp
+++ b/sysdeps/aero/generic/filesystem.cpp
@@ -1,3 +1,4 @@
+#include "mlibc/fsfd_target.hpp"
 #include <aero/syscall.h>
 
 #include <sys/ioctl.h>
@@ -84,9 +85,29 @@ int sys_access(const char *filename, int mode) {
 
 int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags,
              struct stat *statbuf) {
-    mlibc::infoLogger() << "sys_stat() is unimplemented" << frg::endlog;
+    auto result = 0;
+
+    switch (fsfdt) {
+        case fsfd_target::path: {
+            result = syscall(SYS_STAT, path, strlen(path), statbuf);
+            break;
+        }
+
+        case fsfd_target::fd: {
+            result = syscall(SYS_FSTAT, fd, statbuf);
+            break;
+        }
+
+        default: {
+			mlibc::infoLogger() << "mlibc warning: sys_stat: unsupported fsfd target" << frg::endlog;
+			return EINVAL;
+        }
+    }
+
+    if (result < 0) {
+        return -result;
+    }    
 
-    memset(statbuf, 0, sizeof(struct stat));
     return 0;
 }
 
@@ -192,10 +213,10 @@ int sys_read_entries(int handle, void *buffer, size_t max_size,
     auto entry = (struct aero_dir_entry *)buffer;
 
     struct dirent dirent = {
-        .d_ino = entry->inode,
-        .d_off = entry->offset,
-        .d_reclen = entry->reclen,
-        .d_type = entry->filetyp,
+        .d_ino = static_cast<ino_t>(entry->inode),
+        .d_off = static_cast<off_t>(entry->offset),
+        .d_reclen = static_cast<unsigned short>(entry->reclen),
+        .d_type = static_cast<unsigned char>(entry->filetyp),
     };
 
     // The reclen is the size of the dirent struct, plus the size of the name.
@@ -214,7 +235,17 @@ int sys_open_dir(const char *path, int *handle) {
 }
 
 int sys_rename(const char *path, const char *new_path) UNIMPLEMENTED("sys_rename")
-int sys_readlink(const char *path, void *buffer, size_t max_size, ssize_t *length) UNIMPLEMENTED("sys_readlink")
+
+int sys_readlink(const char *path, void *buffer, size_t max_size, ssize_t *length) {
+    auto result = syscall(SYS_READ_LINK, path, strlen(path), buffer, max_size);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    *length = result;
+    return 0;
+}
 
 int sys_dup(int fd, int flags, int *newfd) {
     auto result = syscall(SYS_DUP, fd, flags);
@@ -252,7 +283,6 @@ int sys_pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
                 const struct timespec *timeout, const sigset_t *sigmask,
                 int *num_events) {
     mlibc::infoLogger() << "sys_pselect() is not implemented" << frg::endlog;
-    *num_events = 10;
     return 0;
 }
 
@@ -267,4 +297,37 @@ int sys_pipe(int *fds, int flags) {
 
     return 0;
 }
+
+// epoll API syscalls:
+int sys_epoll_create(int flags, int *fd) { 
+    auto result = syscall(SYS_EPOLL_CREATE, flags);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    *fd = result;
+    return 0;
+}
+
+int sys_epoll_ctl(int epfd, int mode, int fd, struct epoll_event *ev) {
+    auto result = syscall(SYS_EPOLL_CTL, epfd, mode, fd, ev);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    return 0;
+}
+
+int sys_eventfd_create(unsigned int initval, int flags, int *fd) {
+    auto result = syscall(SYS_EVENT_FD, initval, flags);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    *fd = result;
+    return 0;
+}
 } // namespace mlibc
diff --git a/sysdeps/aero/generic/signals.cpp b/sysdeps/aero/generic/signals.cpp
index 3527370c..a6f69fff 100644
--- a/sysdeps/aero/generic/signals.cpp
+++ b/sysdeps/aero/generic/signals.cpp
@@ -42,8 +42,12 @@ int sys_sigaction(int how, const struct sigaction *__restrict action,
 
 int sys_sigprocmask(int how, const sigset_t *__restrict set,
                     sigset_t *__restrict retrieve) {
-    mlibc::infoLogger() << "sys_sigprocmask() is not implemented"
-                        << frg::endlog;
+    auto result = syscall(SYS_SIGPROCMASK, how, set, retrieve);
+
+    if (result < 0) {
+        return -result;
+    }
+
     return 0;
 }
 } // namespace mlibc
\ No newline at end of file
diff --git a/sysdeps/aero/include/aero/syscall.h b/sysdeps/aero/include/aero/syscall.h
index 07b1b51b..ef797e40 100644
--- a/sysdeps/aero/include/aero/syscall.h
+++ b/sysdeps/aero/include/aero/syscall.h
@@ -49,6 +49,18 @@
 #define SYS_DUP 42
 #define SYS_FCNTL 43
 #define SYS_DUP2 44
+#define SYS_IPC_SEND 45
+#define SYS_IPC_RECV 46
+#define SYS_DISCOVER_ROOT 47
+#define SYS_BECOME_ROOT 48
+#define SYS_STAT 49
+#define SYS_FSTAT 50
+#define SYS_READ_LINK 51
+#define SYS_EPOLL_CREATE 52
+#define SYS_EPOLL_PWAIT 53
+#define SYS_EPOLL_CTL 54
+#define SYS_EPOLL_WAIT 55
+#define SYS_EVENT_FD 56
 
 // Invalid syscall used to trigger a log error in the kernel (as a hint)
 // so, that we can implement the syscall in the kernel.
-- 
2.25.1

