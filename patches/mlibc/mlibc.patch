From 12c60e06a4b58e27d26763cb1bb9c6577c14add5 Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Thu, 1 Dec 2022 20:11:07 +1100
Subject: [PATCH] <xxx>

---
 .gitignore                              |  2 +
 options/ansi/generic/stdlib-stubs.cpp   |  2 +-
 options/glibc/generic/execinfo.cpp      |  5 +-
 options/posix/generic/dlfcn-stubs.cpp   |  1 +
 options/posix/generic/termios-stubs.cpp |  5 +-
 options/rtdl/generic/linker.cpp         |  2 +-
 sysdeps/aero/generic/aero.cpp           | 62 ++++++++++++--------
 sysdeps/aero/generic/filesystem.cpp     | 25 ++++++--
 sysdeps/aero/generic/sockets.cpp        | 77 ++++++++++++++++++++++++-
 sysdeps/aero/generic/time.cpp           | 24 ++++++++
 sysdeps/aero/include/aero/syscall.h     |  7 +++
 sysdeps/aero/meson.build                |  1 +
 12 files changed, 176 insertions(+), 37 deletions(-)
 create mode 100644 sysdeps/aero/generic/time.cpp

diff --git a/.gitignore b/.gitignore
index fdd60a0..9f811f4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,5 @@ subprojects
 *.xbstrap
 # editor configs:
 .vscode
+# clangd cache files:
+.cache
diff --git a/options/ansi/generic/stdlib-stubs.cpp b/options/ansi/generic/stdlib-stubs.cpp
index c0e54fe..d6f92f3 100644
--- a/options/ansi/generic/stdlib-stubs.cpp
+++ b/options/ansi/generic/stdlib-stubs.cpp
@@ -392,7 +392,7 @@ int mbtowc(wchar_t *__restrict wc, const char *__restrict mb, size_t max_size) {
 			mlibc::code_seq<const char> nseq{mb, mb + max_size};
 			auto e = cc->decode_wtranscode(nseq, wseq, mbtowc_state);
 			if (e != mlibc::charcode_error::null)
-				__ensure(!"decode_wtranscode() errors are not handled");
+				return -1;
 
 			return nseq.it - mb;
 		} else {
diff --git a/options/glibc/generic/execinfo.cpp b/options/glibc/generic/execinfo.cpp
index 3474615..10a2109 100644
--- a/options/glibc/generic/execinfo.cpp
+++ b/options/glibc/generic/execinfo.cpp
@@ -1,9 +1,10 @@
 #include <execinfo.h>
 #include <bits/ensure.h>
+#include <mlibc/debug.hpp>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "backtrace() is unimplemented" << frg::endlog;
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git a/options/posix/generic/dlfcn-stubs.cpp b/options/posix/generic/dlfcn-stubs.cpp
index fc9fd84..ab57631 100644
--- a/options/posix/generic/dlfcn-stubs.cpp
+++ b/options/posix/generic/dlfcn-stubs.cpp
@@ -27,6 +27,7 @@ char *dlerror(void) {
 
 [[gnu::noinline]]
 void *dlopen(const char *file, int flags) {
+	mlibc::infoLogger() << "mlibc memes: " << file << frg::endlog;
 	auto ra = __builtin_extract_return_addr(__builtin_return_address(0));
 	return __dlapi_open(file, flags, ra);
 }
diff --git a/options/posix/generic/termios-stubs.cpp b/options/posix/generic/termios-stubs.cpp
index 3e621ad..583c1f5 100644
--- a/options/posix/generic/termios-stubs.cpp
+++ b/options/posix/generic/termios-stubs.cpp
@@ -5,6 +5,7 @@
 
 #include <bits/ensure.h>
 #include <mlibc/posix-sysdeps.hpp>
+#include <mlibc/debug.hpp>
 
 speed_t cfgetispeed(const struct termios *tios) {
 	return tios->ibaud;
@@ -50,8 +51,8 @@ int tcflow(int fd, int action) {
 }
 
 int tcflush(int, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "mlibc::tcflush: is a stub!" << frg::endlog;
+	return 0;
 }
 
 int tcgetattr(int fd, struct termios *attr) {
diff --git a/options/rtdl/generic/linker.cpp b/options/rtdl/generic/linker.cpp
index 2e2d3f1..3ff5fef 100644
--- a/options/rtdl/generic/linker.cpp
+++ b/options/rtdl/generic/linker.cpp
@@ -18,7 +18,7 @@ uintptr_t libraryBase = 0x41000000;
 
 constexpr bool verbose = false;
 constexpr bool stillSlightlyVerbose = false;
-constexpr bool logBaseAddresses = false;
+constexpr bool logBaseAddresses = true;
 constexpr bool logRpath = false;
 constexpr bool eagerBinding = true;
 
diff --git a/sysdeps/aero/generic/aero.cpp b/sysdeps/aero/generic/aero.cpp
index 29fb961..cf0503b 100644
--- a/sysdeps/aero/generic/aero.cpp
+++ b/sysdeps/aero/generic/aero.cpp
@@ -62,6 +62,16 @@ static frg::vector<Slice, MemoryAllocator> create_slice(char *const arg[]) {
 }
 
 namespace mlibc {
+int sys_uname(struct utsname *buf) {
+    auto result = syscall(SYS_UNAME, buf);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    return result;
+}
+
 int sys_futex_tid() {
     // SAFETY: gettid does not return any errors (ie. the call is always
     // successful).
@@ -69,22 +79,22 @@ int sys_futex_tid() {
 }
 
 int sys_futex_wait(int *pointer, int expected, const struct timespec *time) {
-    auto result = syscall(SYS_FUTEX_WAIT, pointer, expected, time);
-
-    if (result < 0) {
-        return -result;
-    }
-
+    // auto result = syscall(SYS_FUTEX_WAIT, pointer, expected, time);
+    //
+    // if (result < 0) {
+    //     return -result;
+    // }
+    //
     return 0;
 }
 
 int sys_futex_wake(int *pointer) {
-    auto result = syscall(SYS_FUTEX_WAKE, pointer);
-
-    if (result < 0) {
-        return -result;
-    }
-
+    // auto result = syscall(SYS_FUTEX_WAKE, pointer);
+    //
+    // if (result < 0) {
+    //     return -result;
+    // }
+    //
     return 0;
 }
 
@@ -124,7 +134,9 @@ int sys_anon_free(void *pointer, size_t size) {
 }
 
 void sys_libc_panic() {
-    sys_libc_log("libc panic!");
+    mlibc::infoLogger() << "libc_panic: panicked at 'unknown'" << frg::endlog;
+    __ensure(!syscall(SYS_BACKTRACE));
+
     sys_exit(1);
 }
 
@@ -140,8 +152,15 @@ void sys_exit(int status) {
 
 pid_t sys_getpid() {
     auto result = syscall(SYS_GETPID);
+    __ensure(result >= 0);
+
+    return result;
+}
+
+pid_t sys_getppid() {
+    auto result = syscall(SYS_GETPPID);
+    __ensure(result != 0);
 
-    __ensure(result >= 0); // getpid() cannot fail.
     return result;
 }
 
@@ -162,11 +181,6 @@ pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
     return 0;
 }
 
-pid_t sys_getppid() {
-    mlibc::infoLogger() << "sys_getppid() is unimplemented" << frg::endlog;
-    return 0;
-}
-
 int sys_clock_get(int clock, time_t *secs, long *nanos) {
     struct timespec ts;
     auto result = syscall(SYS_GETTIME, clock, &ts);
@@ -233,7 +247,7 @@ uid_t sys_geteuid() {
     return 0;
 }
 
-int sys_setuid(uid_t uid) UNIMPLEMENTED("sys_setuid")
+// int sys_setuid(uid_t uid) UNIMPLEMENTED("sys_setuid")
 int sys_seteuid(uid_t euid) UNIMPLEMENTED("sys_seteuid")
 
 gid_t sys_getgid() {
@@ -259,13 +273,13 @@ int sys_setegid(gid_t egid) {
 void sys_yield() UNIMPLEMENTED("sys_yield")
 
 int sys_clone(void *tcb, pid_t *tid_out, void *stack) {
-    auto tid = syscall(SYS_CLONE, (uintptr_t)__mlibc_start_thread, stack);
+    auto result = syscall(SYS_CLONE, (uintptr_t)__mlibc_start_thread, stack);
 
-    if (tid < 0) {
-        return -tid;
+    if (result < 0) {
+        return -result;
     }
 
-    *tid_out = (pid_t)tid;
+    *tid_out = (pid_t)result;
     return 0;
 }
 
diff --git a/sysdeps/aero/generic/filesystem.cpp b/sysdeps/aero/generic/filesystem.cpp
index a3e2aca..4187059 100644
--- a/sysdeps/aero/generic/filesystem.cpp
+++ b/sysdeps/aero/generic/filesystem.cpp
@@ -158,11 +158,6 @@ int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
     return 0;
 }
 
-int sys_poll(struct pollfd *fds, nfds_t count, int timeout, int *num_events) {
-    mlibc::infoLogger() << "sys_poll() is not implemented" << frg::endlog;
-    return 0;
-}
-
 int sys_mkdir(const char *path, mode_t) {
     auto result = syscall(SYS_MKDIR, path, strlen(path));
 
@@ -357,4 +352,24 @@ int sys_eventfd_create(unsigned int initval, int flags, int *fd) {
     *fd = result;
     return 0;
 }
+
+int sys_ppoll(struct pollfd *fds, int nfds, const struct timespec *timeout,
+		const sigset_t *sigmask, int *num_events) {
+    auto result = syscall(SYS_POLL, fds, nfds, timeout, sigmask);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    *num_events = result;
+    return 0;
+}
+
+int sys_poll(struct pollfd *fds, nfds_t count, int timeout, int *num_events) {
+    struct timespec ts;
+    ts.tv_sec = timeout / 1000;
+    ts.tv_nsec = (timeout % 1000) * 1000000;
+
+    return sys_ppoll(fds, count, &ts, NULL, num_events);
+}
 } // namespace mlibc
diff --git a/sysdeps/aero/generic/sockets.cpp b/sysdeps/aero/generic/sockets.cpp
index b6b18fe..e03c634 100644
--- a/sysdeps/aero/generic/sockets.cpp
+++ b/sysdeps/aero/generic/sockets.cpp
@@ -1,5 +1,6 @@
 #include <mlibc/all-sysdeps.hpp>
 #include <mlibc/thread-entry.hpp>
+#include <mlibc/debug.hpp>
 
 #include <aero/syscall.h>
 #include <stdint.h>
@@ -46,8 +47,8 @@ int sys_listen(int fd, int backlog) {
     return 0;
 }
 
-int sys_accept(int fd, int *newfd) {
-    auto result = syscall(SYS_ACCEPT, fd);
+int sys_accept(int sockfd, int *newfd, struct sockaddr *addr_ptr, socklen_t *addr_length) {
+    auto result = syscall(SYS_ACCEPT, sockfd, addr_ptr, addr_length);
 
     if (result < 0) {
         return -result;
@@ -56,4 +57,76 @@ int sys_accept(int fd, int *newfd) {
     *newfd = result;
     return 0;
 }
+
+
+int sys_msg_recv(int sockfd, struct msghdr *msg_hdr, int flags, ssize_t *length) {
+	auto result = syscall(SYS_SOCK_RECV, sockfd, msg_hdr, flags);
+	
+	if (result < 0) {
+		return -result;
+	}
+
+	*length = result;
+	return 0;
+}
+
+int sys_getsockopt(int fd, int layer, int number, void *__restrict buffer, socklen_t *__restrict size) {
+	(void)fd; (void)size;
+	if (layer == SOL_SOCKET && number == SO_PEERCRED) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_PEERCRED is unimplemented\e[39m" << frg::endlog;
+		*(int *)buffer = 0;
+		return 0;
+	} else if(layer == SOL_SOCKET && number == SO_SNDBUF) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_SNDBUF is unimplemented\e[39m" << frg::endlog;
+		*(int *)buffer = 4096;
+		return 0;
+	} else if(layer == SOL_SOCKET && number == SO_TYPE) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_TYPE is unimplemented, hardcoding SOCK_STREAM\e[39m" << frg::endlog;
+		*(int *)buffer = SOCK_STREAM;
+		return 0;
+	} else if(layer == SOL_SOCKET && number == SO_ERROR) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_ERROR is unimplemented, hardcoding 0\e[39m" << frg::endlog;
+		*(int *)buffer = 0;
+		return 0;
+	} else if(layer == SOL_SOCKET && number == SO_KEEPALIVE) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_KEEPALIVE is unimplemented, hardcoding 0\e[39m" << frg::endlog;
+		*(int *)buffer = 0;
+		return 0;
+	} else{
+		mlibc::panicLogger() << "\e[31mmlibc: Unexpected getsockopt() call, layer: " << layer << " number: " << number << "\e[39m" << frg::endlog;
+		__builtin_unreachable();
+	}
+
+	return 0;
+}
+
+int sys_setsockopt(int fd, int layer, int number, const void *buffer, socklen_t size) {
+	(void)fd; (void)buffer; (void)size;
+
+	if (layer == SOL_SOCKET && number == SO_PASSCRED) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt(SO_PASSCRED) is not implemented correctly\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_ATTACH_FILTER) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt(SO_ATTACH_FILTER) is not implemented correctly\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_RCVBUFFORCE) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt(SO_RCVBUFFORCE) is not implemented correctly\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_SNDBUF) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with SOL_SOCKET and SO_SNDBUF is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_KEEPALIVE) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with SOL_SOCKET and SO_KEEPALIVE is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_REUSEADDR) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with SOL_SOCKET and SO_REUSEADDR is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == AF_NETLINK && number == SO_ACCEPTCONN) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with AF_NETLINK and SO_ACCEPTCONN is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	} else {
+		mlibc::panicLogger() << "\e[31mmlibc: Unexpected setsockopt() call, layer: " << layer << " number: " << number << "\e[39m" << frg::endlog;
+		__builtin_unreachable();
+	}
+}
 } // namespace mlibc
diff --git a/sysdeps/aero/generic/time.cpp b/sysdeps/aero/generic/time.cpp
new file mode 100644
index 0000000..460412d
--- /dev/null
+++ b/sysdeps/aero/generic/time.cpp
@@ -0,0 +1,24 @@
+#include <mlibc/all-sysdeps.hpp>
+#include <aero/syscall.h>
+
+namespace mlibc {
+int sys_setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value) {
+    auto result = syscall(SYS_SETITIMER, which, new_value, old_value);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    return 0;
+}
+
+int sys_getitimer(int which, struct itimerval *curr_value) {
+    auto result = syscall(SYS_GETITIMER, which, curr_value);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    return 0;
+}
+}
\ No newline at end of file
diff --git a/sysdeps/aero/include/aero/syscall.h b/sysdeps/aero/include/aero/syscall.h
index 12f8dc6..4e330ef 100644
--- a/sysdeps/aero/include/aero/syscall.h
+++ b/sysdeps/aero/include/aero/syscall.h
@@ -64,6 +64,13 @@
 #define SYS_FUTEX_WAIT 57
 #define SYS_FUTEX_WAKE 58
 #define SYS_LINK 59
+#define SYS_BACKTRACE 60
+#define SYS_POLL 61
+#define SYS_EXIT_THREAD 62
+#define SYS_SOCK_RECV 63
+#define SYS_SETITIMER 64
+#define SYS_GETITIMER 65
+#define SYS_GETPPID 66
 
 // Invalid syscall used to trigger a log error in the kernel (as a hint)
 // so, that we can implement the syscall in the kernel.
diff --git a/sysdeps/aero/meson.build b/sysdeps/aero/meson.build
index a807b37..878c216 100644
--- a/sysdeps/aero/meson.build
+++ b/sysdeps/aero/meson.build
@@ -11,6 +11,7 @@ libc_sources += files(
 	'generic/filesystem.cpp',
 	'generic/sockets.cpp',
 	'generic/signals.cpp',
+	'generic/time.cpp',
 )
 
 if not no_headers
-- 
2.38.1

