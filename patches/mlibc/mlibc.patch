From cf2c1a37c21f6125d37ba426bb0470e994e33677 Mon Sep 17 00:00:00 2001
From: unknown <andypythonappdeveloper@gmail.com>
Date: Sun, 6 Jun 2021 16:37:54 +1000
Subject: [PATCH] targets: add aero target port

Signed-off-by: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
---
 .gitignore                                  |   7 +
 abis/aero/auxv.h                            |  13 +
 meson.build                                 |   4 +
 options/ansi/generic/stdlib-stubs.cpp       |   3 +
 options/rtdl/generic/linker.cpp             |   5 +-
 options/rtdl/generic/main.cpp               |  11 +-
 sysdeps/aero/crt-x86_64/crt0.S              |   8 +
 sysdeps/aero/generic/aero.cc                | 274 ++++++++++++++++++++
 sysdeps/aero/generic/entry.cc               |  32 +++
 sysdeps/aero/generic/filesystem.cc          | 262 +++++++++++++++++++
 sysdeps/aero/generic/signals.S              |   7 +
 sysdeps/aero/generic/signals.cc             |  43 +++
 sysdeps/aero/generic/sockets.cc             |   0
 sysdeps/aero/generic/thread.cc              |  45 ++++
 sysdeps/aero/generic/thread_entry.S         |   8 +
 sysdeps/aero/include/abi-bits/abi.h         |   1 +
 sysdeps/aero/include/abi-bits/auxv.h        |   1 +
 sysdeps/aero/include/abi-bits/blkcnt_t.h    |   1 +
 sysdeps/aero/include/abi-bits/blksize_t.h   |   1 +
 sysdeps/aero/include/abi-bits/dev_t.h       |   1 +
 sysdeps/aero/include/abi-bits/errno.h       |   1 +
 sysdeps/aero/include/abi-bits/fcntl.h       |   1 +
 sysdeps/aero/include/abi-bits/gid_t.h       |   1 +
 sysdeps/aero/include/abi-bits/in.h          |   1 +
 sysdeps/aero/include/abi-bits/ino_t.h       |   1 +
 sysdeps/aero/include/abi-bits/limits.h      |   1 +
 sysdeps/aero/include/abi-bits/mode_t.h      |   1 +
 sysdeps/aero/include/abi-bits/nlink_t.h     |   1 +
 sysdeps/aero/include/abi-bits/pid_t.h       |   1 +
 sysdeps/aero/include/abi-bits/reboot.h      |   1 +
 sysdeps/aero/include/abi-bits/resource.h    |   1 +
 sysdeps/aero/include/abi-bits/seek-whence.h |   1 +
 sysdeps/aero/include/abi-bits/signal.h      |   1 +
 sysdeps/aero/include/abi-bits/socket.h      |   1 +
 sysdeps/aero/include/abi-bits/stat.h        |   1 +
 sysdeps/aero/include/abi-bits/termios.h     |   1 +
 sysdeps/aero/include/abi-bits/time.h        |   1 +
 sysdeps/aero/include/abi-bits/uid_t.h       |   1 +
 sysdeps/aero/include/abi-bits/vm-flags.h    |   1 +
 sysdeps/aero/include/abi-bits/wait.h        |   1 +
 sysdeps/aero/include/aero/syscall.h         | 194 ++++++++++++++
 sysdeps/aero/include/mlibc/thread-entry.hpp |  10 +
 sysdeps/aero/meson.build                    |  67 +++++
 sysdeps/dripos/generic/generic.cpp          |   3 +
 sysdeps/lemon/generic/signals.S             |   7 +
 45 files changed, 1018 insertions(+), 10 deletions(-)
 create mode 100644 abis/aero/auxv.h
 create mode 100644 sysdeps/aero/crt-x86_64/crt0.S
 create mode 100644 sysdeps/aero/generic/aero.cc
 create mode 100644 sysdeps/aero/generic/entry.cc
 create mode 100644 sysdeps/aero/generic/filesystem.cc
 create mode 100644 sysdeps/aero/generic/signals.S
 create mode 100644 sysdeps/aero/generic/signals.cc
 create mode 100644 sysdeps/aero/generic/sockets.cc
 create mode 100644 sysdeps/aero/generic/thread.cc
 create mode 100644 sysdeps/aero/generic/thread_entry.S
 create mode 120000 sysdeps/aero/include/abi-bits/abi.h
 create mode 120000 sysdeps/aero/include/abi-bits/auxv.h
 create mode 120000 sysdeps/aero/include/abi-bits/blkcnt_t.h
 create mode 120000 sysdeps/aero/include/abi-bits/blksize_t.h
 create mode 120000 sysdeps/aero/include/abi-bits/dev_t.h
 create mode 120000 sysdeps/aero/include/abi-bits/errno.h
 create mode 120000 sysdeps/aero/include/abi-bits/fcntl.h
 create mode 120000 sysdeps/aero/include/abi-bits/gid_t.h
 create mode 120000 sysdeps/aero/include/abi-bits/in.h
 create mode 120000 sysdeps/aero/include/abi-bits/ino_t.h
 create mode 120000 sysdeps/aero/include/abi-bits/limits.h
 create mode 120000 sysdeps/aero/include/abi-bits/mode_t.h
 create mode 120000 sysdeps/aero/include/abi-bits/nlink_t.h
 create mode 120000 sysdeps/aero/include/abi-bits/pid_t.h
 create mode 120000 sysdeps/aero/include/abi-bits/reboot.h
 create mode 120000 sysdeps/aero/include/abi-bits/resource.h
 create mode 120000 sysdeps/aero/include/abi-bits/seek-whence.h
 create mode 120000 sysdeps/aero/include/abi-bits/signal.h
 create mode 120000 sysdeps/aero/include/abi-bits/socket.h
 create mode 120000 sysdeps/aero/include/abi-bits/stat.h
 create mode 120000 sysdeps/aero/include/abi-bits/termios.h
 create mode 120000 sysdeps/aero/include/abi-bits/time.h
 create mode 120000 sysdeps/aero/include/abi-bits/uid_t.h
 create mode 120000 sysdeps/aero/include/abi-bits/vm-flags.h
 create mode 120000 sysdeps/aero/include/abi-bits/wait.h
 create mode 100644 sysdeps/aero/include/aero/syscall.h
 create mode 100644 sysdeps/aero/include/mlibc/thread-entry.hpp
 create mode 100644 sysdeps/aero/meson.build
 create mode 100644 sysdeps/lemon/generic/signals.S

diff --git a/.gitignore b/.gitignore
index 1701c90..dbb35e8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,10 @@
 build
+
+# the menson vsocde extension auto generates another build directory
+# called `builddir`
+builddir
+
 subprojects/cxxshim
 subprojects/frigg
+.vscode
+.clang-format
diff --git a/abis/aero/auxv.h b/abis/aero/auxv.h
new file mode 100644
index 0000000..59d4d4d
--- /dev/null
+++ b/abis/aero/auxv.h
@@ -0,0 +1,13 @@
+#ifndef _ABIBITS_AUXV_H
+#define _ABIBITS_AUXV_H
+
+#define AT_NULL 0
+#define AT_PHDR 3
+#define AT_PHENT 4
+#define AT_PHNUM 5
+#define AT_ENTRY 9
+#define AT_EXECPATH 15
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+
+#endif // _ABIBITS_AUXV_H
diff --git a/meson.build b/meson.build
index 4027c99..b363aa3 100644
--- a/meson.build
+++ b/meson.build
@@ -98,6 +98,10 @@ if host_machine.system() == 'linux'
 	rtdl_include_dirs += include_directories('sysdeps/linux/include')
 	libc_include_dirs += include_directories('sysdeps/linux/include')
 	subdir('sysdeps/linux')
+elif host_machine.system() == 'aero'
+	rtdl_include_dirs += include_directories('sysdeps/aero/include')
+	libc_include_dirs += include_directories('sysdeps/aero/include')
+	subdir('sysdeps/aero')
 elif host_machine.system() == 'managarm'
 	# TODO: Adopt the include_directories() commands from the managarm meson.build.
 	rtdl_include_dirs += include_directories('sysdeps/managarm/include')
diff --git a/options/ansi/generic/stdlib-stubs.cpp b/options/ansi/generic/stdlib-stubs.cpp
index 347c659..8e97b26 100644
--- a/options/ansi/generic/stdlib-stubs.cpp
+++ b/options/ansi/generic/stdlib-stubs.cpp
@@ -205,6 +205,9 @@ void *calloc(size_t count, size_t size) {
 // realloc() is provided by the platform
 
 void abort(void) {
+	// FIXME: Remove this when we have signals implemented in the aero kernel.
+	mlibc::sys_exit(1);
+
 	sigset_t set;
 	sigemptyset(&set);
 	sigaddset(&set, SIGABRT);
diff --git a/options/rtdl/generic/linker.cpp b/options/rtdl/generic/linker.cpp
index 9620645..ffa60a7 100644
--- a/options/rtdl/generic/linker.cpp
+++ b/options/rtdl/generic/linker.cpp
@@ -367,9 +367,8 @@ void ObjectRepository::_fetchFromFile(SharedObject *object, int fd) {
 	object->baseAddress = libraryBase;
 	libraryBase += (highest_address + (hugeSize - 1)) & ~(hugeSize - 1);
 
-	if(verbose || logBaseAddresses)
-		mlibc::infoLogger() << "rtdl: Loading " << object->name
-				<< " at " << (void *)object->baseAddress << frg::endlog;
+	mlibc::infoLogger() << "rtdl: Loading " << object->name
+			<< " at " << (void *)object->baseAddress << frg::endlog;
 
 	// Load all segments.
 	constexpr size_t pageSize = 0x1000;
diff --git a/options/rtdl/generic/main.cpp b/options/rtdl/generic/main.cpp
index bed8e11..5f5d22d 100644
--- a/options/rtdl/generic/main.cpp
+++ b/options/rtdl/generic/main.cpp
@@ -119,9 +119,10 @@ extern "C" [[gnu::alias("dl_debug_state"), gnu::visibility("default")]] void _dl
 [[ gnu::visibility("default") ]] DebugInterface *_dl_debug_addr = &globalDebugInterface;
 
 extern "C" void *interpreterMain(uintptr_t *entry_stack) {
-	if(logEntryExit)
-		mlibc::infoLogger() << "Entering ld.so" << frg::endlog;
+	mlibc::infoLogger() << "Entering ld.so" << frg::endlog;
+	mlibc::infoLogger() << "Setting entry stack" << frg::endlog;
 	entryStack = entry_stack;
+	// mlibc::infoLogger() << "Runtime TLS address: " << &runtimeTlsMap << frg::endlog;
 	runtimeTlsMap.initialize();
 
 	void *phdr_pointer = 0;
@@ -135,11 +136,9 @@ extern "C" void *interpreterMain(uintptr_t *entry_stack) {
 #ifndef MLIBC_STATIC_BUILD
 	auto ldso_base = reinterpret_cast<uintptr_t>(_DYNAMIC)
 			- reinterpret_cast<uintptr_t>(_GLOBAL_OFFSET_TABLE_[0]);
-	if(logStartup) {
 		mlibc::infoLogger() << "ldso: Own base address is: 0x"
 				<< frg::hex_fmt(ldso_base) << frg::endlog;
 		mlibc::infoLogger() << "ldso: Own dynamic section is at: " << _DYNAMIC << frg::endlog;
-	}
 
 // on aarch64 these lines corrupt unrelated GOT entries (entries for ld.so functions)
 #ifdef __x86_64__
@@ -212,7 +211,6 @@ extern "C" void *interpreterMain(uintptr_t *entry_stack) {
 	__ensure(phdr_pointer);
 	__ensure(entry_pointer);
 
-	if(logStartup)
 		mlibc::infoLogger() << "ldso: Executable PHDRs are at " << phdr_pointer
 				<< frg::endlog;
 
@@ -268,8 +266,7 @@ extern "C" void *interpreterMain(uintptr_t *entry_stack) {
 	globalDebugInterface.state = 0;
 	dl_debug_state();
 
-	if(logEntryExit)
-		mlibc::infoLogger() << "Leaving ld.so, jump to "
+	mlibc::infoLogger() << "Leaving ld.so, jump to "
 				<< (void *)executableSO->entry << frg::endlog;
 	return executableSO->entry;
 }
diff --git a/sysdeps/aero/crt-x86_64/crt0.S b/sysdeps/aero/crt-x86_64/crt0.S
new file mode 100644
index 0000000..190b5a0
--- /dev/null
+++ b/sysdeps/aero/crt-x86_64/crt0.S
@@ -0,0 +1,8 @@
+.section .text
+
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
+
+.size _start, . - _start
diff --git a/sysdeps/aero/generic/aero.cc b/sysdeps/aero/generic/aero.cc
new file mode 100644
index 0000000..182056e
--- /dev/null
+++ b/sysdeps/aero/generic/aero.cc
@@ -0,0 +1,274 @@
+#include <aero/syscall.h>
+#include <stddef.h>
+#include <bits/ensure.h>
+#include <abi-bits/pid_t.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/thread-entry.hpp>
+#include <errno.h>
+
+#include <frg/vector.hpp>
+#include <mlibc/allocator.hpp>
+
+#define ARCH_SET_GS		0x1001
+#define ARCH_SET_FS		0x1002
+#define ARCH_GET_FS		0x1003
+#define ARCH_GET_GS		0x1004
+
+struct Slice {
+    void *ptr;
+    uint64_t len;
+};
+
+static frg::vector<Slice, MemoryAllocator> create_slice(char *const arg[]) {
+    if (arg == nullptr) {
+        return frg::vector<Slice, MemoryAllocator> { getAllocator() };
+    }
+
+    size_t len = 0;
+
+    while (arg[len] != nullptr) {
+        len += 1;
+    }
+
+    frg::vector<Slice, MemoryAllocator> params { getAllocator() };
+    params.resize(len);
+
+    for (size_t i = 0; i < len; ++i) {
+        params[i].ptr = (void*)arg[i];
+        params[i].len = strlen(arg[i]);
+    }
+
+    return params;
+}
+
+namespace mlibc {
+int sys_futex_tid() {
+    // SAFETY: gettid does not return any errors (ie. the call is always successful).
+    return syscall(SYS_GETTID);
+}
+
+int sys_futex_wait(int *pointer, int expected, const struct timespec *time) {
+    mlibc::infoLogger() << "sys_futex_wait() is not implemented" << frg::endlog;
+    return 0;
+}
+
+int sys_futex_wake(int *pointer) {
+    mlibc::infoLogger() << "sys_futex_wake() is not implemented" << frg::endlog;
+    return 0;
+}
+
+int sys_tcb_set(void* pointer) {
+    ssize_t res = syscall(SYS_ARCH_PRCTL, ARCH_SET_FS, (uint64_t)pointer);
+
+    if (res < 0) {
+        return -res;
+    }
+
+    return 0;
+}
+
+int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offset, void **window) {
+    auto result = syscall(SYS_MMAP, hint, size, prot, flags, fd, offset);
+
+    if (result < 0)
+        return -result;
+
+    *window = (void*)result;
+    return 0;
+}
+
+int sys_vm_unmap(void* address, size_t size) {
+    return syscall(SYS_MUNMAP, address, size);
+}
+
+int sys_anon_allocate(size_t size, void **pointer) {
+    return sys_vm_map(nullptr, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0, pointer);
+}
+
+int sys_anon_free(void *pointer, size_t size) {
+    return sys_vm_unmap(pointer, size);
+}
+
+void sys_libc_panic() {
+	sys_libc_log("libc panic!");
+    sys_exit(1);
+}
+
+void sys_libc_log(const char* msg) {
+    syscall(SYS_LOG, msg, strlen(msg));
+}
+
+void sys_exit(int status) {
+	syscall(SYS_EXIT, status);
+
+	__builtin_unreachable();
+}
+
+#ifndef MLIBC_BUILDING_RTDL
+
+pid_t sys_getpid() {
+    auto result = syscall(SYS_GETPID);
+
+    // SAFETY: getpid does not return any errors (ie. the call is always successful).
+    __ensure(result >= 0);
+    return result;
+}
+
+pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+    mlibc::infoLogger() << "sys_getpgid() is unimplemented" << frg::endlog;
+    *pgid = 0;
+    
+    return 0;
+}
+
+pid_t sys_getppid() {
+    mlibc::infoLogger() << "sys_getppid() is unimplemented" << frg::endlog;
+    return 0;
+}
+
+int sys_clock_get(int clock, time_t *secs, long *nanos) {
+    struct timespec ts;
+    auto ret = syscall(SYS_GETTIME, clock, &ts);
+
+    if (ret < 0)
+        return -ret;
+
+    *secs = ts.tv_sec;
+    *nanos = ts.tv_nsec;
+
+    return 0;
+}
+
+int sys_getcwd(char *buffer, size_t size) {
+    auto result = syscall(SYS_GETCWD, buffer, size);
+
+    if (result < 0)
+        return -result;
+
+    return 0;
+}
+
+int sys_chdir(const char *path) UNIMPLEMENTED("sys_chdir")
+
+int sys_gethostname(char *buffer, size_t bufsize) {
+    auto result = syscall(SYS_GETHOSTNAME, buffer, bufsize);
+
+    if (result < 0)
+        return -result;
+
+    return 0;
+}
+
+int sys_sleep(time_t* sec, long* nanosec) {
+    struct timespec ts = {
+        .tv_sec = *sec,
+        .tv_nsec = *nanosec
+    };
+
+    auto result = syscall(SYS_SLEEP, &ts);
+
+    if (result < 0)
+        return -result;
+
+    return 0;
+}
+
+uid_t sys_getuid() {
+	mlibc::infoLogger() << "mlibc: sys_setuid is a stub" << frg::endlog;
+	return 0;
+}
+
+uid_t sys_geteuid() {
+	mlibc::infoLogger() << "mlibc: sys_seteuid is a stub" << frg::endlog;
+	return 0;
+}
+
+int sys_setuid(uid_t uid) UNIMPLEMENTED("sys_setuid")
+int sys_seteuid(uid_t euid) UNIMPLEMENTED("sys_seteuid")
+
+gid_t sys_getgid() {
+	mlibc::infoLogger() << "mlibc: sys_setgid is a stub" << frg::endlog;
+	return 0;
+}
+
+gid_t sys_getegid() {
+	mlibc::infoLogger() << "mlibc: sys_getegid is a stub" << frg::endlog;
+	return 0;
+}
+
+int sys_setgid(gid_t gid) {
+	mlibc::infoLogger() << "mlibc: sys_setgid is a stub" << frg::endlog;
+	return 0;
+}
+
+int sys_setegid(gid_t egid) {
+	mlibc::infoLogger() << "mlibc: sys_setegid is a stub" << frg::endlog;
+	return 0;
+}
+
+void sys_yield() UNIMPLEMENTED("sys_yield")
+
+int sys_clone(void *entry, void *user_arg, void *tcb, pid_t *tid_out) {
+    auto stack = prepare_stack(entry, user_arg, tcb);
+    auto tid = syscall(SYS_CLONE, (uintptr_t)__mlibc_start_thread, stack);
+
+    if (tid < 0)
+        return -tid;
+
+    *tid_out = (pid_t)tid;
+    return 0;
+}
+
+void sys_thread_exit() UNIMPLEMENTED("sys_thread_exit")
+
+int sys_waitpid(pid_t pid, int *status, int flags, pid_t *ret_pid) {
+    auto result = syscall(SYS_WAITPID, pid, status, flags);
+
+    if (result < 0)
+        return -result;
+
+    *ret_pid = result;
+    return 0;
+}
+
+int sys_fork(pid_t *child) {
+    auto result = syscall(SYS_FORK);
+
+    if (result < 0)
+        return -result;
+
+    *child = result;
+    return 0;
+}
+
+int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+    auto envv_slice = create_slice(envp);
+    auto argv_slice = create_slice(argv);
+
+    auto path_ptr = (uintptr_t)path;
+    auto path_len = strlen(path);
+
+    auto result = syscall(
+        SYS_EXEC,
+
+        path_ptr,
+        path_len,
+
+        argv_slice.data(),
+        argv_slice.size(),
+
+        envv_slice.data(),
+        envv_slice.size()
+    );
+
+    if (result < 0)
+        return -result;
+
+    __builtin_unreachable();
+}
+
+int sys_getentropy(void *buffer, size_t length) UNIMPLEMENTED("sys_getentropy")
+
+#endif
+} // namespace mlibc
diff --git a/sysdeps/aero/generic/entry.cc b/sysdeps/aero/generic/entry.cc
new file mode 100644
index 0000000..265ab56
--- /dev/null
+++ b/sysdeps/aero/generic/entry.cc
@@ -0,0 +1,32 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/elf/startup.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[], char *env[])) {
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
diff --git a/sysdeps/aero/generic/filesystem.cc b/sysdeps/aero/generic/filesystem.cc
new file mode 100644
index 0000000..a294337
--- /dev/null
+++ b/sysdeps/aero/generic/filesystem.cc
@@ -0,0 +1,262 @@
+#include <aero/syscall.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ioctl.h>
+
+#include <errno.h>
+#include <dirent.h>
+#include <limits.h>
+#include <fcntl.h>
+
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/debug.hpp>
+
+namespace mlibc {
+int sys_write(int fd, const void* buffer, size_t count, ssize_t* written) {
+	long ret = syscall(SYS_WRITE, fd, buffer, count);
+
+	if(ret < 0)
+		return -ret;
+
+	*written = ret;
+	return 0;
+}
+
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+	long ret = syscall(SYS_READ, fd, buf, count);
+
+	if(ret < 0){
+		*bytes_read = 0;
+		return -ret;
+	}
+
+	*bytes_read = ret;
+	return 0;
+}
+
+int sys_pwrite(int fd, const void* buffer, size_t count, off_t off, ssize_t* written) UNIMPLEMENTED("sys_pwrite")
+int sys_pread(int fd, void *buf, size_t count, off_t off, ssize_t *bytes_read)  UNIMPLEMENTED("sys_pread")
+
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+	long ret = syscall(SYS_SEEK, fd, offset, whence);
+
+	if(ret < 0)
+		return -ret;
+
+	*new_offset = ret;
+	return 0;
+}
+
+int sys_open(const char* filename, int flags, int* fd){
+	auto ret = syscall(SYS_OPEN, 0, filename, strlen(filename), flags);
+
+	if(ret < 0)
+		return -ret;
+
+	*fd = ret;
+	return 0;
+}
+
+int sys_close(int fd) {
+	long ret = syscall(SYS_CLOSE, fd);
+
+	if(ret < 0)
+		return -ret;
+
+	return 0;
+}
+
+int sys_access(const char* filename, int mode) {
+	auto result = syscall(SYS_ACCESS, AT_FDCWD, filename, strlen(filename), mode, 0);
+
+	if (result < 0)
+		return -result;
+
+	return result; // should be 0 on success
+}
+
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) {
+	mlibc::infoLogger() << "sys_stat() is unimplemented" << frg::endlog;
+
+	memset(statbuf, 0, sizeof(struct stat));
+	return 0;
+}
+
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+	auto ret = syscall(SYS_IOCTL, fd, request, arg);
+	
+	if (ret < 0)
+		return -ret;
+
+	*result = ret;
+	return 0;
+}
+
+int sys_isatty(int fd) {
+	// NOTE: The easiest way to check if a file descriptor is a TTY is to
+	// do an ioctl of TIOCGWINSZ on it and see if it succeeds :^)
+	struct winsize ws;
+	int result;
+
+	if (!sys_ioctl(fd, TIOCGWINSZ, &ws, &result)) {
+		return 0;
+	}
+
+	return ENOTTY;
+}
+
+int sys_tcgetattr(int fd, struct termios *attr) {
+	int result;
+
+	if (int e = sys_ioctl(fd, TCGETS, (void*)attr, &result); e)
+		return e;
+
+	return 0;
+}
+
+int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
+	if (optional_action)
+		mlibc::infoLogger() << "mlibc: warning: sys_tcsetattr ignores optional_action" << frg::endlog;
+
+	int result;
+
+	// 0x5404 = TCSETSF (using this workaround since the headers don't define it)
+	if (int e = sys_ioctl(fd, 0x5404, (void*)attr, &result); e)
+		return e;
+
+	return 0;
+}
+
+int sys_poll(struct pollfd *fds, nfds_t count, int timeout, int *num_events) {
+	mlibc::infoLogger() << "sys_poll() is not implemented" << frg::endlog;
+	return 0;
+}
+
+int sys_mkdir(const char* path) {
+	auto result = syscall(SYS_MKDIR, path, strlen(path));
+
+	if (result < 0)
+		return -result;
+
+	return 0;
+}
+
+int sys_rmdir(const char* path) UNIMPLEMENTED("sys_rmdir")
+int sys_link(const char* srcpath, const char* destpath) UNIMPLEMENTED("sys_link")
+
+int sys_unlink(const char* path) {
+	return sys_unlinkat(AT_FDCWD, path, 0);
+}
+
+int sys_unlinkat(int fd, const char *path, int flags) {
+	auto result = syscall(SYS_UNLINK, fd, path, strlen(path), flags);
+
+	if (result < 0)
+		return -result;
+
+	return 0;
+}
+
+struct aero_dir_entry {
+	size_t inode;
+	size_t offset;
+	size_t reclen;
+	size_t filetyp;
+	char name[];
+} __attribute__((packed));
+
+int sys_read_entries(int handle, void *buffer, size_t max_size, size_t *bytes_read) {
+	auto result = syscall(SYS_GETDENTS, handle, buffer, max_size);
+
+	// Check if we got an error.
+	if (result < 0) {
+		*bytes_read = 0;
+		return -result;
+	}
+
+	// Nothing to read.
+	if (result == 0) {
+		*bytes_read = 0;
+		return 0;
+	}
+
+	auto entry = (struct aero_dir_entry*)buffer;
+
+	struct dirent dirent = {
+		.d_ino = entry->inode,
+		.d_off = entry->offset,
+		.d_reclen = entry->reclen,
+		.d_type = entry->filetyp,
+	};
+
+	// The reclen is the size of the dirent struct, plus the size of the name.
+	auto name_size = entry->reclen - sizeof(struct aero_dir_entry);
+	__ensure(name_size < 255);
+
+	memcpy(&dirent.d_name, entry->name, name_size);
+	*bytes_read = entry->reclen;
+
+	memcpy(buffer, &dirent, sizeof(struct dirent));
+	return 0;
+}
+
+int sys_open_dir(const char* path, int* handle) {
+	return sys_open(path, O_DIRECTORY, handle);
+}
+
+int sys_rename(const char* path, const char* new_path) UNIMPLEMENTED("sys_rename")
+int sys_readlink(const char *path, void *buffer, size_t max_size, ssize_t *length) UNIMPLEMENTED("sys_readlink")
+
+int sys_dup(int fd, int flags, int* newfd) {
+	auto result = syscall(SYS_DUP, fd, flags);
+
+	if (result < 0)
+		return -result;
+
+	*newfd = result;
+	return 0;
+}
+
+int sys_dup2(int fd, int flags, int newfd) {
+	auto result = syscall(SYS_DUP2, fd, newfd, flags);
+
+	if (result < 0)
+		return -result;
+
+	return 0;
+}
+
+int sys_fcntl(int fd, int request, va_list args, int* result_value) {
+	auto result = syscall(SYS_FCNTL, fd, request, va_arg(args, uint64_t));
+
+	if (result < 0)
+		return -result;
+
+	*result_value = result;
+	return 0;
+}
+
+int sys_pselect(
+	int nfds,
+	fd_set* readfds,
+	fd_set* writefds,
+	fd_set *exceptfds,
+	const struct timespec* timeout,
+	const sigset_t* sigmask,
+	int *num_events) {
+	*num_events = 10;
+	return 0;
+}
+
+int sys_chmod(const char *pathname, mode_t mode) UNIMPLEMENTED("sys_chmod")
+
+int sys_pipe(int *fds, int flags) {
+	auto result = syscall(SYS_PIPE, fds, flags);
+
+	if (result < 0)
+		return -result;
+
+	return 0;
+}
+} // namespace mlibc
diff --git a/sysdeps/aero/generic/signals.S b/sysdeps/aero/generic/signals.S
new file mode 100644
index 0000000..9e5d12b
--- /dev/null
+++ b/sysdeps/aero/generic/signals.S
@@ -0,0 +1,7 @@
+.section .text
+.global __mlibc_signal_restore
+
+__mlibc_signal_restore:
+	mov $39, %rax
+	syscall
+	ud2
diff --git a/sysdeps/aero/generic/signals.cc b/sysdeps/aero/generic/signals.cc
new file mode 100644
index 0000000..10539ba
--- /dev/null
+++ b/sysdeps/aero/generic/signals.cc
@@ -0,0 +1,43 @@
+#include <mlibc/debug.hpp>
+#include <mlibc/ansi-sysdeps.hpp>
+
+#include <sys/types.h>
+#include <aero/syscall.h>
+
+#define LOG_SIGACTION_INSTALL 0
+
+extern "C" void __mlibc_signal_restore(); // defined in `signals.S`
+
+namespace mlibc {
+int sys_sigaction(int how, const struct sigaction *__restrict action, struct sigaction *__restrict old_action) {
+#if LOG_SIGACTION_INSTALL
+    mlibc::infoLogger() << "sys_sigaction: signal " << how << frg::endlog;
+    mlibc::infoLogger() << "sys_sigaction: size: " << sizeof(*action) << frg::endlog;
+
+    if (action != NULL) {
+        mlibc::infoLogger() << "sys_sigaction: handler " << (int64_t)action->sa_handler << frg::endlog;
+        mlibc::infoLogger() << "sys_sigaction: action " << (int64_t)action->sa_sigaction << frg::endlog;
+        mlibc::infoLogger() << "sys_sigaction: flags " << (int64_t)action->sa_flags << frg::endlog;
+    }
+
+    mlibc::infoLogger() << frg::endlog;
+#endif
+
+    auto res = syscall(
+        SYS_SIGACTION,
+        how,
+        (uint64_t)(action),
+        (uint64_t)(__mlibc_signal_restore),
+        (uint64_t)old_action);
+    
+    if (res < 0)
+        return -res;
+
+    return 0;
+}
+
+int sys_sigprocmask(int how, const sigset_t *__restrict set, sigset_t *__restrict retrieve) {
+    mlibc::infoLogger() << "sys_sigprocmask() is not implemented" << frg::endlog;
+    return 0;
+}
+} // namespace mlibc
\ No newline at end of file
diff --git a/sysdeps/aero/generic/sockets.cc b/sysdeps/aero/generic/sockets.cc
new file mode 100644
index 0000000..e69de29
diff --git a/sysdeps/aero/generic/thread.cc b/sysdeps/aero/generic/thread.cc
new file mode 100644
index 0000000..41a47b2
--- /dev/null
+++ b/sysdeps/aero/generic/thread.cc
@@ -0,0 +1,45 @@
+#include <mlibc/thread-entry.hpp>
+#include <mlibc/all-sysdeps.hpp>
+
+#include <mlibc/tcb.hpp>
+#include <bits/ensure.h>
+
+#include <sys/mman.h>
+
+#include <stdint.h>
+#include <stddef.h>
+
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb) {
+	// Wait until our parent sets up the TID.
+	while(!__atomic_load_n(&tcb->tid, __ATOMIC_RELAXED))
+		mlibc::sys_futex_wait(&tcb->tid, 0, nullptr);
+
+	if(mlibc::sys_tcb_set(tcb))
+		__ensure(!"sys_tcb_set() failed");
+
+	void *(*func)(void *) = reinterpret_cast<void *(*)(void *)>(entry);
+	auto result = func(user_arg);
+
+	auto self = reinterpret_cast<Tcb *>(tcb);
+
+	self->returnValue = result;
+	__atomic_store_n(&self->didExit, 1, __ATOMIC_RELEASE);
+	mlibc::sys_futex_wake(&self->didExit);
+
+	mlibc::sys_thread_exit();
+}
+
+namespace mlibc {
+    void* prepare_stack(void *entry, void *user_arg, void *tcb) {
+        uintptr_t *sp = reinterpret_cast<uintptr_t *>(reinterpret_cast<uintptr_t>(
+                mmap(nullptr, 0x1000000,
+                    PROT_READ | PROT_WRITE,
+                    MAP_PRIVATE | MAP_ANONYMOUS, -1, 0)
+                ) + 0x1000000);
+
+        *--sp = reinterpret_cast<uintptr_t>(tcb);
+        *--sp = reinterpret_cast<uintptr_t>(user_arg);
+        *--sp = reinterpret_cast<uintptr_t>(entry);
+        return sp;
+    }
+} // namespace mlibc
diff --git a/sysdeps/aero/generic/thread_entry.S b/sysdeps/aero/generic/thread_entry.S
new file mode 100644
index 0000000..dd309ed
--- /dev/null
+++ b/sysdeps/aero/generic/thread_entry.S
@@ -0,0 +1,8 @@
+.section .text
+.global __mlibc_start_thread
+
+__mlibc_start_thread:
+	pop %rdi
+	pop %rsi
+	pop %rdx
+	call __mlibc_enter_thread
diff --git a/sysdeps/aero/include/abi-bits/abi.h b/sysdeps/aero/include/abi-bits/abi.h
new file mode 120000
index 0000000..c945860
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/abi.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/abi.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/auxv.h b/sysdeps/aero/include/abi-bits/auxv.h
new file mode 120000
index 0000000..0f14415
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/lemon/auxv.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/blkcnt_t.h b/sysdeps/aero/include/abi-bits/blkcnt_t.h
new file mode 120000
index 0000000..e9d9f1b
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/blksize_t.h b/sysdeps/aero/include/abi-bits/blksize_t.h
new file mode 120000
index 0000000..c6dfb6e
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/dev_t.h b/sysdeps/aero/include/abi-bits/dev_t.h
new file mode 120000
index 0000000..0c1143b
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/dev_t.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/errno.h b/sysdeps/aero/include/abi-bits/errno.h
new file mode 120000
index 0000000..589859f
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/errno.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/fcntl.h b/sysdeps/aero/include/abi-bits/fcntl.h
new file mode 120000
index 0000000..ea5323a
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/fcntl.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/gid_t.h b/sysdeps/aero/include/abi-bits/gid_t.h
new file mode 120000
index 0000000..6a77218
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/gid_t.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/in.h b/sysdeps/aero/include/abi-bits/in.h
new file mode 120000
index 0000000..b58c683
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/in.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/ino_t.h b/sysdeps/aero/include/abi-bits/ino_t.h
new file mode 120000
index 0000000..10d644e
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ino_t.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/limits.h b/sysdeps/aero/include/abi-bits/limits.h
new file mode 120000
index 0000000..1aa5894
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/limits.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/mode_t.h b/sysdeps/aero/include/abi-bits/mode_t.h
new file mode 120000
index 0000000..29d7733
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/mode_t.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/nlink_t.h b/sysdeps/aero/include/abi-bits/nlink_t.h
new file mode 120000
index 0000000..7618c27
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/nlink_t.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/pid_t.h b/sysdeps/aero/include/abi-bits/pid_t.h
new file mode 120000
index 0000000..3fd26a7
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/pid_t.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/reboot.h b/sysdeps/aero/include/abi-bits/reboot.h
new file mode 120000
index 0000000..ecc3ddb
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/x86_64/reboot.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/resource.h b/sysdeps/aero/include/abi-bits/resource.h
new file mode 120000
index 0000000..3e59c75
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/resource.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/seek-whence.h b/sysdeps/aero/include/abi-bits/seek-whence.h
new file mode 120000
index 0000000..3bd41ef
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/seek-whence.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/signal.h b/sysdeps/aero/include/abi-bits/signal.h
new file mode 120000
index 0000000..b20e511
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/signal.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/socket.h b/sysdeps/aero/include/abi-bits/socket.h
new file mode 120000
index 0000000..0e1d6be
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/socket.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/stat.h b/sysdeps/aero/include/abi-bits/stat.h
new file mode 120000
index 0000000..82642c3
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/stat.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/termios.h b/sysdeps/aero/include/abi-bits/termios.h
new file mode 120000
index 0000000..cfcfe76
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/termios.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/time.h b/sysdeps/aero/include/abi-bits/time.h
new file mode 120000
index 0000000..97f3d52
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/time.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/uid_t.h b/sysdeps/aero/include/abi-bits/uid_t.h
new file mode 120000
index 0000000..1113eba
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/uid_t.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/vm-flags.h b/sysdeps/aero/include/abi-bits/vm-flags.h
new file mode 120000
index 0000000..f1a985e
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/vm-flags.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/abi-bits/wait.h b/sysdeps/aero/include/abi-bits/wait.h
new file mode 120000
index 0000000..6d911c7
--- /dev/null
+++ b/sysdeps/aero/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/wait.h
\ No newline at end of file
diff --git a/sysdeps/aero/include/aero/syscall.h b/sysdeps/aero/include/aero/syscall.h
new file mode 100644
index 0000000..ef9f036
--- /dev/null
+++ b/sysdeps/aero/include/aero/syscall.h
@@ -0,0 +1,194 @@
+#ifndef SYSCALL_H
+#define SYSCALL_H
+
+#include <bits/ensure.h>
+#include <stdint.h>
+
+#define SYS_READ 0
+#define SYS_WRITE 1
+#define SYS_OPEN 2
+#define SYS_CLOSE 3
+#define SYS_SHUTDOWN 4
+#define SYS_EXIT 5
+#define SYS_FORK 6
+#define SYS_REBOOT 7
+#define SYS_MMAP 8
+#define SYS_MUNMAP 9
+#define SYS_ARCH_PRCTL 10
+#define SYS_GETDENTS 11
+#define SYS_GETCWD 12
+#define SYS_CHDIR 13
+#define SYS_MKDIR 14
+#define SYS_MKDIR_AT 15
+#define SYS_RMDIR 16
+#define SYS_EXEC 17
+#define SYS_LOG 18
+#define SYS_UNAME 19
+#define SYS_WAITPID 20
+#define SYS_IOCTL 21
+#define SYS_GETPID 22
+#define SYS_SOCKET 23
+#define SYS_CONNECT 24
+#define SYS_BIND 25
+#define SYS_LISTEN 26
+#define SYS_ACCEPT 27
+#define SYS_SEEK 28
+#define SYS_GETTID 29
+#define SYS_GETTIME 30
+#define SYS_SLEEP 31
+#define SYS_ACCESS 32
+#define SYS_PIPE 33
+#define SYS_UNLINK 34
+#define SYS_GETHOSTNAME 35
+#define SYS_SETHOSTNAME 36
+#define SYS_INFO 37
+#define SYS_CLONE 38
+#define SYS_SIGRETURN 39
+#define SYS_SIGACTION 40
+#define SYS_SIGPROCMASK 41
+#define SYS_DUP 42
+#define SYS_FCNTL 43
+#define SYS_DUP2 44
+
+// Invalid syscall used to trigger a log error in the kernel (as a hint)
+// so, that we can implement the syscall in the kernel.
+#define UNIMPLEMENTED(FUNCTION_NAME)                                           \
+    {                                                                          \
+	sys_libc_log("Unimplemented syscall: " FUNCTION_NAME);                 \
+	sys_exit(1);                                                           \
+	__builtin_unreachable();                                               \
+    }
+
+extern "C" {
+using sc_word_t = long;
+
+static sc_word_t syscall0(int sc) {
+    sc_word_t ret;
+    asm volatile("syscall" : "=a"(ret) : "a"(sc) : "rcx", "r11", "memory");
+    return ret;
+}
+
+static sc_word_t syscall1(int sc, sc_word_t arg1) {
+    sc_word_t ret;
+    asm volatile("syscall"
+		 : "=a"(ret)
+		 : "a"(sc), "D"(arg1)
+		 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static sc_word_t syscall2(int sc, sc_word_t arg1, sc_word_t arg2) {
+    sc_word_t ret;
+    asm volatile("syscall"
+		 : "=a"(ret)
+		 : "a"(sc), "D"(arg1), "S"(arg2)
+		 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static sc_word_t syscall3(int sc, sc_word_t arg1, sc_word_t arg2,
+			  sc_word_t arg3) {
+    sc_word_t ret;
+    asm volatile("syscall"
+		 : "=a"(ret)
+		 : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3)
+		 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static sc_word_t syscall4(int sc, sc_word_t arg1, sc_word_t arg2,
+			  sc_word_t arg3, sc_word_t arg4) {
+    sc_word_t ret;
+
+    register sc_word_t arg4_reg asm("r10") = arg4;
+
+    asm volatile("syscall"
+		 : "=a"(ret)
+		 : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3), "r"(arg4_reg)
+		 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static sc_word_t syscall5(int sc, sc_word_t arg1, sc_word_t arg2,
+			  sc_word_t arg3, sc_word_t arg4, sc_word_t arg5) {
+    sc_word_t ret;
+
+    register sc_word_t arg4_reg asm("r10") = arg4;
+    register sc_word_t arg5_reg asm("r8") = arg5;
+
+    asm volatile("syscall"
+		 : "=a"(ret)
+		 : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3), "r"(arg4_reg),
+		   "r"(arg5_reg)
+		 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static sc_word_t syscall6(int sc, sc_word_t arg1, sc_word_t arg2,
+			  sc_word_t arg3, sc_word_t arg4, sc_word_t arg5,
+			  sc_word_t arg6) {
+    sc_word_t ret;
+
+    register sc_word_t arg4_reg asm("r10") = arg4;
+    register sc_word_t arg5_reg asm("r8") = arg5;
+    register sc_word_t arg6_reg asm("r9") = arg6;
+
+    asm volatile("syscall"
+		 : "=a"(ret)
+		 : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3), "r"(arg4_reg),
+		   "r"(arg5_reg), "r"(arg6_reg)
+		 : "rcx", "r11", "memory");
+    return ret;
+}
+} // extern "C"
+
+// Cast to the argument type of the extern "C" functions.
+__attribute__((always_inline)) inline sc_word_t sc_cast(long x) { return x; }
+__attribute__((always_inline)) inline sc_word_t sc_cast(const void *x) {
+    return reinterpret_cast<sc_word_t>(x);
+}
+
+// C++ wrappers for the extern "C" functions.
+__attribute__((always_inline)) static inline long _syscall(int call) {
+    return syscall0(call);
+}
+
+__attribute__((always_inline)) static inline long _syscall(int call,
+							   sc_word_t arg0) {
+    return syscall1(call, arg0);
+}
+
+__attribute__((always_inline)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1) {
+    return syscall2(call, arg0, arg1);
+}
+
+__attribute__((always_inline)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1, sc_word_t arg2) {
+    return syscall3(call, arg0, arg1, arg2);
+}
+
+__attribute__((always_inline)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1, sc_word_t arg2,
+	 sc_word_t arg3) {
+    return syscall4(call, arg0, arg1, arg2, arg3);
+}
+
+__attribute__((always_inline)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1, sc_word_t arg2,
+	 sc_word_t arg3, sc_word_t arg4) {
+    return syscall5(call, arg0, arg1, arg2, arg3, arg4);
+}
+
+__attribute__((always_inline)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1, sc_word_t arg2,
+	 sc_word_t arg3, sc_word_t arg4, sc_word_t arg5) {
+    return syscall6(call, arg0, arg1, arg2, arg3, arg4, arg5);
+}
+
+template <typename... T>
+__attribute__((always_inline)) static inline long syscall(sc_word_t call,
+							  T... args) {
+    return _syscall(call, sc_cast(args)...);
+}
+#endif // SYSCALL_H
diff --git a/sysdeps/aero/include/mlibc/thread-entry.hpp b/sysdeps/aero/include/mlibc/thread-entry.hpp
new file mode 100644
index 0000000..2dd88a6
--- /dev/null
+++ b/sysdeps/aero/include/mlibc/thread-entry.hpp
@@ -0,0 +1,10 @@
+#pragma once
+
+#include <mlibc/tcb.hpp>
+
+extern "C" void __mlibc_start_thread(void);
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb);
+
+namespace mlibc {
+	void *prepare_stack(void *entry, void *user_arg, void *tcb);
+}
diff --git a/sysdeps/aero/meson.build b/sysdeps/aero/meson.build
new file mode 100644
index 0000000..5033f0f
--- /dev/null
+++ b/sysdeps/aero/meson.build
@@ -0,0 +1,67 @@
+if not static
+	rtdl_sources += files(
+		'generic/aero.cc',
+		'generic/filesystem.cc',
+	)
+endif
+
+libc_sources += files(
+	'generic/aero.cc',
+	'generic/entry.cc',
+	'generic/thread_entry.S',
+	'generic/thread.cc',
+	'generic/filesystem.cc',
+	'generic/sockets.cc',
+	'generic/signals.cc',
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/abi.h',
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/wait.h',
+		'include/abi-bits/limits.h',
+		subdir: 'abi-bits'
+	)
+	install_headers(
+		'include/aero/syscall.h',
+		subdir: 'aero'
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'crt-x86_64/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
+
+if host_machine.cpu_family() == 'x86_64'
+	libc_sources += files('generic/signals.S')
+else
+	error('Unknown architecture')
+endif
diff --git a/sysdeps/dripos/generic/generic.cpp b/sysdeps/dripos/generic/generic.cpp
index 0a85169..48bfc57 100644
--- a/sysdeps/dripos/generic/generic.cpp
+++ b/sysdeps/dripos/generic/generic.cpp
@@ -7,6 +7,9 @@
 #include <fcntl.h>
 #include <limits.h>
 
+#include <frg/vector.hpp>
+#include <mlibc/allocator.hpp>
+
 namespace mlibc {
 
 void sys_libc_log(const char *message) {
diff --git a/sysdeps/lemon/generic/signals.S b/sysdeps/lemon/generic/signals.S
new file mode 100644
index 0000000..ab6b074
--- /dev/null
+++ b/sysdeps/lemon/generic/signals.S
@@ -0,0 +1,7 @@
+.section .text
+.global __mlibc_signal_restore
+
+__mlibc_signal_restore:
+	mov $314, %rax
+	syscall
+	ud2
-- 
2.25.1

