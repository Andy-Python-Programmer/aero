diff --git mlibc-clean/options/glibc/generic/execinfo.cpp mlibc-workdir/options/glibc/generic/execinfo.cpp
index 3474615..d06f130 100644
--- mlibc-clean/options/glibc/generic/execinfo.cpp
+++ mlibc-workdir/options/glibc/generic/execinfo.cpp
@@ -1,9 +1,10 @@
 #include <execinfo.h>
 #include <bits/ensure.h>
+#include <mlibc/charset.hpp>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "backtrace: Not implemented" << frg::endlog;	
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git mlibc-clean/sysdeps/aero/generic/filesystem.cpp mlibc-workdir/sysdeps/aero/generic/filesystem.cpp
index b9a812b..95c49b9 100644
--- mlibc-clean/sysdeps/aero/generic/filesystem.cpp
+++ mlibc-workdir/sysdeps/aero/generic/filesystem.cpp
@@ -89,23 +89,24 @@ int sys_close(int fd) {
     return 0;
 }
 
-int sys_access(const char *filename, int mode) {
-    auto result =
-        syscall(SYS_ACCESS, AT_FDCWD, filename, strlen(filename), mode, 0);
-
-    if (result < 0) {
-        return -result;
-    }
-
+int sys_faccessat(int dirfd, const char *pathname, int mode, int flags) {
+    auto ret = syscall(SYS_ACCESS, dirfd, pathname, strlen(pathname), mode, flags);
+    if(int e = sc_error(ret); e)
+        return e;
     return 0;
 }
 
+int sys_access(const char *filename, int mode) {
+    return sys_faccessat(AT_FDCWD, filename, mode, 0);
+}
+
 int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags,
              struct stat *statbuf) {
     switch (fsfdt) {
     case fsfd_target::path:
         fd = AT_FDCWD;
         break;
+
     case fsfd_target::fd:
         flags |= AT_EMPTY_PATH;
     
@@ -199,14 +200,14 @@ int sys_rmdir(const char *path) {
 }
 
 int sys_unlinkat(int fd, const char *path, int flags) {
-	auto ret = syscall(SYS_UNLINK, fd, path, strlen(path), flags);
-	if (int e = sc_error(ret); e)
-		return e;
-	return 0;
+    auto ret = syscall(SYS_UNLINK, fd, path, strlen(path), flags);
+    if (int e = sc_error(ret); e)
+        return e;
+    return 0;
 }
 
 int sys_symlink(const char *target_path, const char *link_path) {
-	return sys_symlinkat(target_path, AT_FDCWD, link_path);
+    return sys_symlinkat(target_path, AT_FDCWD, link_path);
 }
 
 int sys_symlinkat(const char *target_path, int dirfd, const char *link_path) {
diff --git mlibc-clean/sysdeps/aero/include/abi-bits/fcntl.h mlibc-workdir/sysdeps/aero/include/abi-bits/fcntl.h
index ea5323a..463e2c9 120000
--- mlibc-clean/sysdeps/aero/include/abi-bits/fcntl.h
+++ mlibc-workdir/sysdeps/aero/include/abi-bits/fcntl.h
@@ -1 +1 @@
-../../../../abis/mlibc/fcntl.h
\ No newline at end of file
+../../../../abis/linux/fcntl.h
\ No newline at end of file
diff --git mlibc-clean/sysdeps/aero/include/abi-bits/stat.h mlibc-workdir/sysdeps/aero/include/abi-bits/stat.h
index 82642c3..1f63b41 120000
--- mlibc-clean/sysdeps/aero/include/abi-bits/stat.h
+++ mlibc-workdir/sysdeps/aero/include/abi-bits/stat.h
@@ -1 +1 @@
-../../../../abis/mlibc/stat.h
\ No newline at end of file
+../../../../abis/linux/stat.h
\ No newline at end of file
