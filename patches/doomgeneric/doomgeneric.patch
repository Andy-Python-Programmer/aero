From fe158557671423437d813cf623ca1997d498dc19 Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Sat, 15 Jan 2022 18:07:32 +1100
Subject: [PATCH] add aero doom

Signed-off-by: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
---
 .gitignore                     |   9 ++
 doomgeneric/Makefile.aero      |  80 ++++++++++
 doomgeneric/aero/framebuffer.h | 243 ++++++++++++++++++++++++++++++
 doomgeneric/d_main.c           |   4 +
 doomgeneric/doomgeneric_aero.c | 266 +++++++++++++++++++++++++++++++++
 5 files changed, 602 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 doomgeneric/Makefile.aero
 create mode 100644 doomgeneric/aero/framebuffer.h
 create mode 100644 doomgeneric/doomgeneric_aero.c

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..e610a33
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,9 @@
+build
+
+doomgeneric/doomgeneric
+doomgeneric/doomgeneric.map
+
+doom1.wad
+
+.vscode
+.clang-format
diff --git a/doomgeneric/Makefile.aero b/doomgeneric/Makefile.aero
new file mode 100644
index 0000000..3cde87c
--- /dev/null
+++ b/doomgeneric/Makefile.aero
@@ -0,0 +1,80 @@
+################################################################
+#
+# $Id:$
+#
+# $Log:$
+#
+
+# Copyright (C) 2021-2022 The Aero Project Developers.
+#
+# This file is part of The Aero Project.
+#
+# Aero is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Aero is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Aero. If not, see <https://www.gnu.org/licenses/>.
+
+ifeq ($(V),1)
+	VB=''
+else
+	VB=@
+endif
+
+CC=x86_64-aero-gcc
+
+CFLAGS+=-O0 -g
+LDFLAGS+=-Wl,--gc-sections
+CFLAGS+=-Wall -DNORMALUNIX -DLINUX -DSNDSERV -D_DEFAULT_SOURCE
+
+LIBS+=-lm -lc
+
+OBJDIR=build
+OUTPUT=doomgeneric
+
+SRC_DOOM = i_main.o dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o \
+		d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o \
+		g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o \
+		i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o \
+		m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o \
+		p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o \
+		p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o \
+		r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o \
+		sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o \
+		w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o \
+		doomgeneric.o doomgeneric_aero.o
+
+OBJS += $(addprefix $(OBJDIR)/, $(SRC_DOOM))
+
+all: $(OUTPUT)
+
+clean:
+	rm -rf $(OBJDIR)
+	rm -f $(OUTPUT)
+	rm -f $(OUTPUT).gdb
+	rm -f $(OUTPUT).map
+
+$(OUTPUT): $(OBJS)
+	@echo [Linking $@]
+
+	$(VB)$(CC) $(CFLAGS) $(LDFLAGS) $(OBJS) \
+		-o $(OUTPUT) $(LIBS) -Wl,-Map,$(OUTPUT).map
+
+	@echo [Size]
+	-$(CROSS_COMPILE)size $(OUTPUT)
+
+$(OBJS): | $(OBJDIR)
+
+$(OBJDIR):
+	mkdir -p $(OBJDIR)
+
+$(OBJDIR)/%.o: %.c
+	@echo [Compiling $<]
+	$(VB)$(CC) $(CFLAGS) -c $< -o $@
diff --git a/doomgeneric/aero/framebuffer.h b/doomgeneric/aero/framebuffer.h
new file mode 100644
index 0000000..6d195f0
--- /dev/null
+++ b/doomgeneric/aero/framebuffer.h
@@ -0,0 +1,243 @@
+#ifndef _AERO_FB_H_
+#define _AERO_FB_H_
+
+#include <linux/types.h>
+#include <sys/ioctl.h>
+
+#define FB_MAX 32
+
+#define FBIOGET_VSCREENINFO 0x4600
+#define FBIOPUT_VSCREENINFO 0x4601
+#define FBIOGET_FSCREENINFO 0x4602
+#define FBIOGETCMAP 0x4604
+#define FBIOPUTCMAP 0x4605
+#define FBIOPAN_DISPLAY 0x4606
+#define FBIO_CURSOR _IOWR('F', 0x08, struct fb_cursor)
+
+#define FBIOGET_CON2FBMAP 0x460F
+#define FBIOPUT_CON2FBMAP 0x4610
+#define FBIOBLANK 0x4611
+#define FBIOGET_VBLANK _IOWR('F', 0x12, struct fb_vblank)
+#define FBIO_ALLOC 0x4613
+#define FBIO_FREE 0x4614
+#define FBIOGET_GLYPH 0x4615
+#define FBIOGET_HWCINFO 0x4616
+#define FBIOPUT_MODEINFO 0x4617
+#define FBIOGET_DISPINFO 0x4618
+#define FBIO_WAITFORVSYNC _IOW('F', 0x20, unsigned int)
+
+#define FB_TYPE_PACKED_PIXELS 0
+#define FB_TYPE_PLANES 1
+#define FB_TYPE_INTERLEAVED_PLANES 2
+#define FB_TYPE_TEXT 3
+#define FB_TYPE_VGA_PLANES 4
+#define FB_TYPE_FOURCC 5
+
+#define FB_VISUAL_MONO01 0
+#define FB_VISUAL_MONO10 1
+#define FB_VISUAL_TRUECOLOR 2
+#define FB_VISUAL_PSEUDOCOLOR 3
+#define FB_VISUAL_DIRECTCOLOR 4
+#define FB_VISUAL_STATIC_PSEUDOCOLOR 5
+#define FB_VISUAL_FOURCC 6
+
+#define FB_ACCEL_NONE 0
+
+#define FB_NONSTD_HAM 1
+#define FB_NONSTD_REV_PIX_IN_B 2
+
+#define FB_ACTIVATE_NOW 0
+#define FB_ACTIVATE_NXTOPEN 1
+#define FB_ACTIVATE_TEST 2
+#define FB_ACTIVATE_MASK 15
+
+#define FB_ACTIVATE_VBL 16
+#define FB_CHANGE_CMAP 32
+#define FB_ACTIVATE_ALL 64
+#define FB_ACTIVATE_FORCE 128
+#define FB_ACTIVATE_INV_MODE 256
+#define FB_ACTIVATE_INV_ALL 512
+
+#define FB_ACCELF_TEXT 0x1
+
+#define FB_SYNC_HOR_HIGH_ACT 0x1
+#define FB_SYNC_VERT_HIGH_ACT 0x2
+#define FB_SYNC_EXT 0x4
+#define FB_SYNC_COMP_HIGH_ACT 0x8
+#define FB_SYNC_BROADCAST 0x10
+#define FB_SYNC_ON_GREEN 0x20
+
+#define FB_VMODE_NONINTERLACED 0
+#define FB_VMODE_INTERLACED 1
+#define FB_VMODE_DOUBLE 2
+#define FB_VMODE_ODD_FLD_FIRST 4
+#define FB_VMODE_MASK 255
+
+#define FB_VMODE_YWRAP 256
+#define FB_VMODE_SMOOTH_XPAN 512
+#define FB_VMODE_CONUPDATE 512
+
+#define FB_ROTATE_UR 0
+#define FB_ROTATE_CW 1
+#define FB_ROTATE_UD 2
+#define FB_ROTATE_CCW 3
+
+#define PICOS2KHZ(a) (1000000000UL/(a))
+#define KHZ2PICOS(a) (1000000000UL/(a))
+
+#define VESA_NO_BLANKING 0
+#define VESA_VSYNC_SUSPEND 1
+#define VESA_HSYNC_SUSPEND 2
+#define VESA_POWERDOWN 3
+
+enum {
+    FB_BLANK_UNBLANK = VESA_NO_BLANKING,
+    FB_BLANK_NORMAL = VESA_NO_BLANKING + 1,
+    FB_BLANK_VSYNC_SUSPEND = VESA_VSYNC_SUSPEND + 1,
+    FB_BLANK_HSYNC_SUSPEND = VESA_HSYNC_SUSPEND + 1,
+    FB_BLANK_POWERDOWN = VESA_POWERDOWN + 1,
+};
+
+#define FB_VBLANK_VBLANKING 0x001
+#define FB_VBLANK_HBLANKING 0x002
+#define FB_VBLANK_HAVE_VBLANK 0x004
+#define FB_VBLANK_HAVE_HBLANK 0x008
+#define FB_VBLANK_HAVE_COUNT 0x010
+#define FB_VBLANK_HAVE_VCOUNT 0x020
+#define FB_VBLANK_HAVE_HCOUNT 0x040
+#define FB_VBLANK_VSYNCING 0x080
+#define FB_VBLANK_HAVE_VSYNC 0x100
+
+#define ROP_COPY 0
+#define ROP_XOR 1
+
+#define FB_CUR_SETIMAGE 0x01
+#define FB_CUR_SETPOS 0x02
+#define FB_CUR_SETHOT 0x04
+#define FB_CUR_SETCMAP 0x08
+#define FB_CUR_SETSHAPE 0x10
+#define FB_CUR_SETSIZE 0x20
+#define FB_CUR_SETALL 0xFF
+
+struct fb_fix_screeninfo {
+    char id[16];
+    unsigned long smem_start;
+    unsigned int smem_len;
+    unsigned int type;
+    unsigned int type_aux;
+    unsigned int visual;
+    unsigned short xpanstep;
+    unsigned short ypanstep;
+    unsigned short ywrapstep;
+    unsigned int line_length;
+    unsigned long mmio_start;
+    unsigned int mmio_len;
+    unsigned int accel;
+    unsigned short capabilities;
+    unsigned short reserved[2];
+};
+
+struct fb_bitfield {
+    unsigned int offset;
+    unsigned int length;
+    unsigned int msb_right;
+};
+
+struct fb_var_screeninfo {
+    unsigned int xres;
+    unsigned int yres;
+    unsigned int xres_virtual;
+    unsigned int yres_virtual;
+    unsigned int xoffset;
+    unsigned int yoffset;
+    unsigned int bits_per_pixel;
+    unsigned int grayscale;
+    struct fb_bitfield red;
+    struct fb_bitfield green;
+    struct fb_bitfield blue;
+    struct fb_bitfield transp;
+    unsigned int nonstd;
+    unsigned int activate;
+    unsigned int height;
+    unsigned int width;
+    unsigned int accel_flags;
+    unsigned int pixclock;
+    unsigned int left_margin;
+    unsigned int right_margin;
+    unsigned int upper_margin;
+    unsigned int lower_margin;
+    unsigned int hsync_len;
+    unsigned int vsync_len;
+    unsigned int sync;
+    unsigned int vmode;
+    unsigned int rotate;
+    unsigned int colorspace;
+    unsigned int reserved[4];
+};
+
+struct fb_cmap {
+    unsigned int start;
+    unsigned int len;
+    unsigned short *red;
+    unsigned short *green;
+    unsigned short *blue;
+    unsigned short *transp;
+};
+
+struct fb_con2fbmap {
+    unsigned int console;
+    unsigned int framebuffer;
+};
+
+struct fb_vblank {
+    unsigned int flags;
+    unsigned int count;
+    unsigned int vcount;
+    unsigned int hcount;
+    unsigned int reserved[4];
+};
+
+struct fb_copyarea {
+    unsigned int dx;
+    unsigned int dy;
+    unsigned int width;
+    unsigned int height;
+    unsigned int sx;
+    unsigned int sy;
+};
+
+struct fb_fillrect {
+    unsigned int dx;
+    unsigned int dy;
+    unsigned int width;
+    unsigned int height;
+    unsigned int color;
+    unsigned int rop;
+};
+
+struct fb_image {
+    unsigned int dx;
+    unsigned int dy;
+    unsigned int width;
+    unsigned int height;
+    unsigned int fg_color;
+    unsigned int bg_color;
+    unsigned char depth;
+    const char *data;
+    struct fb_cmap cmap;
+};
+
+struct fbcurpos {
+    unsigned short x, y;
+};
+
+struct fb_cursor {
+    unsigned short set;
+    unsigned short enable;
+    unsigned short rop;
+    const char *mask;
+    struct fbcurpos hot;
+    struct fb_image image;
+};
+
+#endif // _AERO_FB_H_
diff --git a/doomgeneric/d_main.c b/doomgeneric/d_main.c
index c7cf977..435e76a 100644
--- a/doomgeneric/d_main.c
+++ b/doomgeneric/d_main.c
@@ -1357,12 +1357,16 @@ void D_DoomMain (void)
     D_BindVariables();
     M_LoadDefaults();
 
+    DEH_printf("I_AtExit: Installing handler to save config at exit.\n");
+
     // Save configuration at exit.
     I_AtExit(M_SaveDefaults, false);
 
+    DEH_printf("D_FindIWAD: Searching for the IWAD file.\n");
     // Find main IWAD file and load it.
     iwadfile = D_FindIWAD(IWAD_MASK_DOOM, &gamemission);
 
+
     // None found?
 
     if (iwadfile == NULL)
diff --git a/doomgeneric/doomgeneric_aero.c b/doomgeneric/doomgeneric_aero.c
new file mode 100644
index 0000000..1172db3
--- /dev/null
+++ b/doomgeneric/doomgeneric_aero.c
@@ -0,0 +1,266 @@
+/*
+ * Copyright (C) 2021-2022 The Aero Project Developers.
+ *
+ * This file is part of The Aero Project.
+ *
+ * Aero is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Aero is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Aero. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+#include "doomgeneric.h"
+#include "doomkeys.h"
+
+#include "aero/framebuffer.h"
+
+#include <fcntl.h>
+#include <stdarg.h>
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <termios.h>
+#include <unistd.h>
+
+#include <sys/mman.h>
+#include <sys/time.h>
+
+#define LOG_INFO 0
+#define KEYBOARD_QUEUE_SIZE 16
+
+FILE *keyboard = NULL;
+
+static uint32_t *framebuffer_ptr = NULL;
+
+static uint32_t s_screen_width = 0;
+static uint32_t s_screen_height = 0;
+
+static uint32_t s_position_x = 0;
+static uint32_t s_position_y = 0;
+
+static uint16_t s_key_queue[KEYBOARD_QUEUE_SIZE];
+static uint32_t s_key_queue_write_idx = 0;
+static uint32_t s_key_queue_read_idx = 0;
+
+static void log_info(char *message, ...) {
+#ifdef LOG_INFO
+    va_list args;
+    va_start(args, message);
+    printf("\x1b[1;32minfo\x1b[0m: ");
+    vprintf(message, args);
+    printf("\n");
+    va_end(args);
+    fflush(stdout);
+#endif
+}
+
+static void log_error(char *message) {
+    printf("\x1b[1;31minfo\x1b[0m: %s\n", message);
+    fflush(stdout);
+}
+
+struct termios orig_termios;
+
+/// Disables raw TTY mode.
+static void disable_raw_tty() {
+    tcsetattr(STDIN_FILENO, TCSAFLUSH, &orig_termios);
+}
+
+/// Enables raw TTY mode.
+///
+/// SAFTEY: Remember to disable raw tty mode on exit.
+static void enable_raw_tty() {
+    tcgetattr(STDIN_FILENO, &orig_termios);
+
+    struct termios raw = orig_termios;
+    raw.c_lflag &= ~(ECHO | ICANON);
+    raw.c_cc[VMIN] = 0;
+    tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
+}
+
+/// Converts an aero scancode into doom scancode.
+static uint8_t convert_to_doom_key(uint8_t scancode) {
+    uint8_t key = 0;
+
+    switch (scancode) {
+    case 28: // enter
+        key = KEY_ENTER;
+        break;
+
+    case 1: // escape
+        key = KEY_ESCAPE;
+        break;
+
+    case 105: // left
+        key = KEY_LEFTARROW;
+        break;
+
+    case 106: // right
+        key = KEY_RIGHTARROW;
+        break;
+
+    case 103: // up
+        key = KEY_UPARROW;
+        break;
+
+    case 108: // down
+        key = KEY_DOWNARROW;
+        break;
+
+    case 29: // left control
+    case 97: // right control
+        key = KEY_FIRE;
+        break;
+
+    case 57: // spacebar
+        key = KEY_USE;
+        break;
+
+    case 54: // rightshift
+        key = KEY_RSHIFT;
+        break;
+
+    case 21: // y
+        key = 'y';
+        break;
+
+    default:
+        break;
+    }
+
+    return key;
+}
+
+/// Pushes a key into the keyboard queue.
+static void push_key_to_queue(uint8_t pressed, uint8_t key_code) {
+    uint8_t key = convert_to_doom_key(key_code);
+    uint16_t key_data = (pressed << 8) | key;
+
+    s_key_queue[s_key_queue_write_idx] = key_data;
+    s_key_queue_write_idx += 1;
+    s_key_queue_write_idx %= KEYBOARD_QUEUE_SIZE;
+}
+
+/// Handle the keyboard input and put it into the key queue.
+static void handle_keyboard_input() {
+    // SAFTEY: `/dev/kbd0` is non-blocking.
+    uint8_t scancode = 0;
+    size_t result = read(fileno(keyboard), &scancode, 1);
+
+    if (result > 0) {
+        uint8_t key_released = (0x80 & scancode);
+        scancode = (0x7F & scancode);
+
+        if (key_released == 0)
+            push_key_to_queue(1, scancode);
+        else {
+            push_key_to_queue(0, scancode);
+        }
+    }
+}
+
+/// Initialize doomgeneric. This includes setting up the framebuffer and
+/// keyboard devices.
+void DG_Init() {
+    log_info("initializing framebuffer");
+
+    // Open up the framebuffer device.
+    size_t framebuffer = fopen("/dev/fb", "r+");
+
+    // Make sure the there were no errors.
+    if (framebuffer == NULL) {
+        log_error("failed to open `/dev/fb`");
+        exit(1);
+    }
+
+    // Get the framebuffer info.
+    struct fb_var_screeninfo vinfo;
+    int result = ioctl(fileno(framebuffer), FBIOGET_VSCREENINFO, &vinfo);
+
+    // Make sure the ioctl was successful.
+    if (result) {
+        log_error("failed to get framebuffer vscreen info");
+        exit(1);
+    }
+
+    s_screen_width = vinfo.xres;
+    s_screen_height = vinfo.yres;
+
+    log_info("framebuffer: (width=%lu, height=%lu)", (uint64_t)s_screen_width,
+             (uint64_t)s_screen_height);
+
+    s_position_x = (s_screen_width - DOOMGENERIC_RESX) / 2;
+    s_position_y = (s_screen_height - DOOMGENERIC_RESY) / 2;
+
+    uint32_t size = s_screen_width * s_screen_height * vinfo.bits_per_pixel / 8;
+    framebuffer_ptr = (uint32_t *)mmap(NULL, size, PROT_READ | PROT_WRITE,
+                                       MAP_SHARED, fileno(framebuffer), 0);
+
+    enable_raw_tty();
+    atexit(disable_raw_tty);
+
+    // Open the keyboard device.
+    keyboard = fopen("/dev/kbd0", "r");
+
+    // Make sure the there were no errors.
+    if (keyboard == NULL) {
+        log_error("failed to open `/dev/kbd0`");
+        exit(1);
+    }
+
+    log_info("successfuly initialized doomgeneric");
+}
+
+void DG_DrawFrame() {
+    for (int i = 0; i < DOOMGENERIC_RESY; i++) {
+        size_t index = s_position_x + (i + s_position_y) * s_screen_width;
+        size_t count = DOOMGENERIC_RESX * 4;
+
+        uint32_t *dest_ptr = &framebuffer_ptr[index];
+        uint32_t *src_ptr = DG_ScreenBuffer + i * DOOMGENERIC_RESX;
+
+        memcpy(dest_ptr, src_ptr, count);
+    }
+
+    handle_keyboard_input();
+}
+
+void DG_SleepMs(uint32_t ms) { usleep(ms * 1000000); }
+
+uint32_t DG_GetTicksMs() {
+    struct timeval tp;
+    struct timezone tzp;
+
+    gettimeofday(&tp, &tzp);
+
+    return (tp.tv_sec * 1000) + (tp.tv_usec / 1000);
+}
+
+int DG_GetKey(int *pressed, unsigned char *doomKey) {
+    // The key queue is empty.
+    if (s_key_queue_write_idx == s_key_queue_read_idx) {
+        return 0;
+    }
+
+    uint16_t key_data = s_key_queue[s_key_queue_read_idx];
+    s_key_queue_read_idx += 1;
+    s_key_queue_read_idx %= KEYBOARD_QUEUE_SIZE;
+
+    *pressed = key_data >> 8;
+    *doomKey = key_data & 0xFF;
+
+    return 1;
+}
+
+// NOTE: We dont need to set the window title :)
+void DG_SetWindowTitle(const char *title) {}
-- 
2.25.1

