diff --git rust-host-clean/Cargo.toml rust-host-workdir/Cargo.toml
index 9b11ae8..2d310ce 100644
--- rust-host-clean/Cargo.toml
+++ rust-host-workdir/Cargo.toml
@@ -110,6 +110,7 @@ object.debug = 0
 rustc-std-workspace-core = { path = 'library/rustc-std-workspace-core' }
 rustc-std-workspace-alloc = { path = 'library/rustc-std-workspace-alloc' }
 rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }
+libc = { path = "/base_dir/sources/rust-libc" }
 
 [patch."https://github.com/rust-lang/rust-clippy"]
 clippy_lints = { path = "src/tools/clippy/clippy_lints" }
diff --git rust-host-workdir/compiler/rustc_target/src/spec/base/aero.rs rust-host-workdir/compiler/rustc_target/src/spec/base/aero.rs
new file mode 100644
index 0000000..1237a43
--- /dev/null
+++ rust-host-workdir/compiler/rustc_target/src/spec/base/aero.rs
@@ -0,0 +1,34 @@
+use crate::spec::{cvs, LinkArgs, LinkerFlavor, RelroLevel, TargetOptions, Cc, Lld};
+
+pub fn opts() -> TargetOptions {
+    let mut args = LinkArgs::new();
+    args.insert(
+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),
+        vec![
+            // We want to be able to strip as much executable code as possible
+            // from the linker command line, and this flag indicates to the
+            // linker that it can avoid linking in dynamic libraries that don't
+            // actually satisfy any symbols up to that point (as with many other
+            // resolutions the linker does). This option only applies to all
+            // following libraries so we're sure to pass it as one of the first
+            // arguments.
+            "-Wl,--as-needed".into(),
+            // Always enable NX protection when it is available
+            "-Wl,-z,noexecstack".into(),
+        ],
+    );
+
+    TargetOptions {
+        os: "aero".into(),
+        dynamic_linking: true,
+        executables: true,
+        families: cvs!["unix"],
+        has_rpath: true,
+        pre_link_args: args,
+        position_independent_executables: true,
+        relro_level: RelroLevel::Full,
+        has_thread_local: true,
+        crt_static_respected: true,
+        ..Default::default()
+    }
+}
diff --git rust-host-clean/compiler/rustc_target/src/spec/base/mod.rs rust-host-workdir/compiler/rustc_target/src/spec/base/mod.rs
index d137aaa..6f52f4a 100644
--- rust-host-clean/compiler/rustc_target/src/spec/base/mod.rs
+++ rust-host-workdir/compiler/rustc_target/src/spec/base/mod.rs
@@ -1,3 +1,4 @@
+pub(crate) mod aero;
 pub(crate) mod aix;
 pub(crate) mod android;
 pub(crate) mod apple;
diff --git rust-host-clean/compiler/rustc_target/src/spec/mod.rs rust-host-workdir/compiler/rustc_target/src/spec/mod.rs
index f047994..83be01f 100644
--- rust-host-clean/compiler/rustc_target/src/spec/mod.rs
+++ rust-host-workdir/compiler/rustc_target/src/spec/mod.rs
@@ -1556,6 +1556,8 @@ supported_targets! {
     ("x86_64-fuchsia", x86_64_fuchsia),
     ("x86_64-unknown-fuchsia", x86_64_unknown_fuchsia),
 
+    ("x86_64-unknown-aero", x86_64_unknown_aero),
+
     ("avr-unknown-gnu-atmega328", avr_unknown_gnu_atmega328),
 
     ("x86_64-unknown-l4re-uclibc", x86_64_unknown_l4re_uclibc),
diff --git rust-host-workdir/compiler/rustc_target/src/spec/targets/x86_64_unknown_aero.rs rust-host-workdir/compiler/rustc_target/src/spec/targets/x86_64_unknown_aero.rs
new file mode 100644
index 0000000..b88491e
--- /dev/null
+++ rust-host-workdir/compiler/rustc_target/src/spec/targets/x86_64_unknown_aero.rs
@@ -0,0 +1,20 @@
+use crate::spec::{base, LinkerFlavor, StackProbeType, Target, Cc, Lld};
+
+pub fn target() -> Target {
+    let mut base = base::aero::opts();
+    base.cpu = "x86-64".into();
+    base.max_atomic_width = Some(64);
+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
+    // don't use probe-stack=inline-asm until rust-lang/rust#83139 is resolved.
+    base.stack_probes = StackProbeType::Call;
+
+    Target {
+        // Should we use "aero" or "aero-mlibc" here?
+        llvm_target: "x86_64-aero".into(),
+        pointer_width: 64,
+        data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+            .into(),
+        arch: "x86_64".into(),
+        options: base,
+    }
+}
diff --git rust-host-clean/library/std/build.rs rust-host-workdir/library/std/build.rs
index ad0a82e..14488d7 100644
--- rust-host-clean/library/std/build.rs
+++ rust-host-workdir/library/std/build.rs
@@ -4,6 +4,7 @@ fn main() {
     println!("cargo:rerun-if-changed=build.rs");
     let target = env::var("TARGET").expect("TARGET was not set");
     if target.contains("linux")
+        || target.contains("aero")
         || target.contains("netbsd")
         || target.contains("dragonfly")
         || target.contains("openbsd")
diff --git rust-host-workdir/library/std/src/os/aero/fs.rs rust-host-workdir/library/std/src/os/aero/fs.rs
new file mode 100644
index 0000000..a3c953c
--- /dev/null
+++ rust-host-workdir/library/std/src/os/aero/fs.rs
@@ -0,0 +1,144 @@
+#![stable(feature = "raw_ext", since = "1.1.0")]
+
+use crate::fs::Metadata;
+use crate::sys_common::AsInner;
+
+#[allow(deprecated)]
+use crate::os::aero::raw;
+
+/// OS-specific extensions to [`fs::Metadata`].
+///
+/// [`fs::Metadata`]: crate::fs::Metadata
+#[stable(feature = "metadata_ext", since = "1.1.0")]
+pub trait MetadataExt {
+    /// Gain a reference to the underlying `stat` structure which contains
+    /// the raw information returned by the OS.
+    ///
+    /// The contents of the returned `stat` are **not** consistent across
+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the
+    /// cross-Unix abstractions contained within the raw stat.
+    #[stable(feature = "metadata_ext", since = "1.1.0")]
+    #[deprecated(since = "1.8.0", note = "other methods of this trait are now preferred")]
+    #[allow(deprecated)]
+    fn as_raw_stat(&self) -> &raw::stat;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_dev(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ino(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mode(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_nlink(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_uid(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_gid(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_rdev(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_size(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_atime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_atime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mtime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mtime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ctime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ctime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_blksize(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_blocks(&self) -> u64;
+}
+
+#[stable(feature = "metadata_ext", since = "1.1.0")]
+impl MetadataExt for Metadata {
+    #[allow(deprecated)]
+    fn as_raw_stat(&self) -> &raw::stat {
+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }
+    }
+
+    fn st_dev(&self) -> u64 {
+        self.as_inner().as_inner().st_dev as u64
+    }
+
+    fn st_ino(&self) -> u64 {
+        self.as_inner().as_inner().st_ino as u64
+    }
+
+    fn st_mode(&self) -> u32 {
+        self.as_inner().as_inner().st_mode as u32
+    }
+
+    fn st_nlink(&self) -> u64 {
+        self.as_inner().as_inner().st_nlink as u64
+    }
+
+    fn st_uid(&self) -> u32 {
+        self.as_inner().as_inner().st_uid as u32
+    }
+
+    fn st_gid(&self) -> u32 {
+        self.as_inner().as_inner().st_gid as u32
+    }
+
+    fn st_rdev(&self) -> u64 {
+        self.as_inner().as_inner().st_rdev as u64
+    }
+
+    fn st_size(&self) -> u64 {
+        self.as_inner().as_inner().st_size as u64
+    }
+
+    fn st_atime(&self) -> i64 {
+        self.as_inner().as_inner().st_atime as i64
+    }
+
+    fn st_atime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_atime_nsec as i64
+    }
+
+    fn st_mtime(&self) -> i64 {
+        self.as_inner().as_inner().st_mtime as i64
+    }
+
+    fn st_mtime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_mtime_nsec as i64
+    }
+
+    fn st_ctime(&self) -> i64 {
+        self.as_inner().as_inner().st_ctime as i64
+    }
+
+    fn st_ctime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_ctime_nsec as i64
+    }
+
+    fn st_blksize(&self) -> u64 {
+        self.as_inner().as_inner().st_blksize as u64
+    }
+
+    fn st_blocks(&self) -> u64 {
+        self.as_inner().as_inner().st_blocks as u64
+    }
+}
diff --git rust-host-workdir/library/std/src/os/aero/mod.rs rust-host-workdir/library/std/src/os/aero/mod.rs
new file mode 100644
index 0000000..ea3291a
--- /dev/null
+++ rust-host-workdir/library/std/src/os/aero/mod.rs
@@ -0,0 +1,6 @@
+//! Aero-specific definitions
+
+#![stable(feature = "raw_ext", since = "1.1.0")]
+
+pub mod fs;
+pub mod raw;
diff --git rust-host-workdir/library/std/src/os/aero/raw.rs rust-host-workdir/library/std/src/os/aero/raw.rs
new file mode 100644
index 0000000..0569409
--- /dev/null
+++ rust-host-workdir/library/std/src/os/aero/raw.rs
@@ -0,0 +1,76 @@
+//! Aero-specific raw type definitions
+
+#![stable(feature = "raw_ext", since = "1.1.0")]
+#![deprecated(
+    since = "1.8.0",
+    note = "these type aliases are no longer supported by \
+            the standard library, the `libc` crate on \
+            crates.io should be used instead for the correct \
+            definitions"
+)]
+#![allow(deprecated)]
+
+#[stable(feature = "pthread_t", since = "1.8.0")]
+pub type pthread_t = usize; // TODO: This is completely wrong tbh
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type dev_t = libc::dev_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type ino_t = libc::ino_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type mode_t = libc::mode_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type nlink_t = libc::nlink_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type off_t = libc::off_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type time_t = libc::time_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type blkcnt_t = libc::blkcnt_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type blksize_t = libc::blksize_t;
+
+#[repr(C)]
+#[derive(Clone)]
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub struct stat {
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_dev: libc::dev_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ino: libc::ino_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mode: libc::mode_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_nlink: libc::nlink_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_uid: libc::uid_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_gid: libc::gid_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_rdev: libc::dev_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_size: libc::off_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_atime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_atime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mtime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mtime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ctime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ctime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_blksize: libc::blksize_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_blocks: libc::blkcnt_t,
+}
diff --git rust-host-clean/library/std/src/os/mod.rs rust-host-workdir/library/std/src/os/mod.rs
index 6e11b92..96ba192 100644
--- rust-host-clean/library/std/src/os/mod.rs
+++ rust-host-workdir/library/std/src/os/mod.rs
@@ -113,6 +113,8 @@ pub mod fortanix_sgx;
 pub mod freebsd;
 #[cfg(target_os = "fuchsia")]
 pub mod fuchsia;
+#[cfg(target_os = "aero")]
+pub mod aero;
 #[cfg(target_os = "haiku")]
 pub mod haiku;
 #[cfg(target_os = "hermit")]
diff --git rust-host-clean/library/std/src/os/unix/mod.rs rust-host-workdir/library/std/src/os/unix/mod.rs
index 5ba8719..21d5e8d 100644
--- rust-host-clean/library/std/src/os/unix/mod.rs
+++ rust-host-workdir/library/std/src/os/unix/mod.rs
@@ -37,6 +37,8 @@ use crate::os::linux as platform;
 
 #[cfg(not(doc))]
 mod platform {
+    #[cfg(target_os = "aero")]
+    pub use crate::os::aero::*;
     #[cfg(target_os = "aix")]
     pub use crate::os::aix::*;
     #[cfg(target_os = "android")]
@@ -95,7 +97,11 @@ pub mod process;
 pub mod raw;
 pub mod thread;
 
-#[unstable(feature = "peer_credentials_unix_socket", issue = "42839", reason = "unstable")]
+#[unstable(
+    feature = "peer_credentials_unix_socket",
+    issue = "42839",
+    reason = "unstable"
+)]
 #[cfg(any(
     target_os = "android",
     target_os = "linux",
diff --git rust-host-clean/library/std/src/sys/unix/args.rs rust-host-workdir/library/std/src/sys/unix/args.rs
index 2da17fa..a1bdb2c 100644
--- rust-host-clean/library/std/src/sys/unix/args.rs
+++ rust-host-workdir/library/std/src/sys/unix/args.rs
@@ -73,6 +73,7 @@ impl DoubleEndedIterator for Args {
     target_os = "aix",
     target_os = "nto",
     target_os = "hurd",
+    target_os = "aero",
 ))]
 mod imp {
     use super::Args;
diff --git rust-host-clean/library/std/src/sys/unix/env.rs rust-host-workdir/library/std/src/sys/unix/env.rs
index 3bb492f..1a680fa 100644
--- rust-host-clean/library/std/src/sys/unix/env.rs
+++ rust-host-workdir/library/std/src/sys/unix/env.rs
@@ -1,3 +1,14 @@
+#[cfg(target_os = "aero")]
+pub mod os {
+    pub const FAMILY: &str = "unix";
+    pub const OS: &str = "aero";
+    pub const DLL_PREFIX: &str = "lib";
+    pub const DLL_SUFFIX: &str = ".so";
+    pub const DLL_EXTENSION: &str = "";
+    pub const EXE_SUFFIX: &str = "";
+    pub const EXE_EXTENSION: &str = "";
+}
+
 #[cfg(target_os = "linux")]
 pub mod os {
     pub const FAMILY: &str = "unix";
diff --git rust-host-clean/library/std/src/sys/unix/fs.rs rust-host-workdir/library/std/src/sys/unix/fs.rs
index 40eb910..994558c 100644
--- rust-host-clean/library/std/src/sys/unix/fs.rs
+++ rust-host-workdir/library/std/src/sys/unix/fs.rs
@@ -954,6 +954,7 @@ impl DirEntry {
         target_os = "aix",
         target_os = "nto",
         target_os = "hurd",
+        target_os = "aero",
     ))]
     pub fn ino(&self) -> u64 {
         self.entry.d_ino as u64
diff --git rust-host-clean/library/std/src/sys/unix/os.rs rust-host-workdir/library/std/src/sys/unix/os.rs
index dc3c037..0b405a8 100644
--- rust-host-clean/library/std/src/sys/unix/os.rs
+++ rust-host-workdir/library/std/src/sys/unix/os.rs
@@ -40,7 +40,7 @@ cfg_if::cfg_if! {
 }
 
 extern "C" {
-    #[cfg(not(any(target_os = "dragonfly", target_os = "vxworks")))]
+    #[cfg(not(any(target_os = "dragonfly", target_os = "vxworks", target_os = "aero")))]
     #[cfg_attr(
         any(
             target_os = "linux",
@@ -79,18 +79,46 @@ extern "C" {
 }
 
 /// Returns the platform-specific value of errno
-#[cfg(not(any(target_os = "dragonfly", target_os = "vxworks")))]
+#[cfg(not(any(target_os = "dragonfly", target_os = "vxworks", target_os = "aero")))]
 pub fn errno() -> i32 {
     unsafe { (*errno_location()) as i32 }
 }
 
 /// Sets the platform-specific value of errno
-#[cfg(all(not(target_os = "dragonfly"), not(target_os = "vxworks")))] // needed for readdir and syscall!
+#[cfg(all(not(target_os = "dragonfly"), not(target_os = "vxworks"), not(target_os = "aero")))] // needed for readdir and syscall!
 #[allow(dead_code)] // but not all target cfgs actually end up using it
 pub fn set_errno(e: i32) {
     unsafe { *errno_location() = e as c_int }
 }
 
+#[cfg(target_os = "aero")]
+pub fn errno() -> i32 {
+    extern "C" {
+        #[thread_local]
+        static __mlibc_errno: c_int;
+    }
+
+    unsafe { __mlibc_errno as i32 }
+}
+
+#[cfg(target_os = "aero")]
+#[allow(dead_code)]
+pub fn set_errno(e: i32) {
+    extern "C" {
+        #[thread_local]
+        static mut __mlibc_errno: c_int;
+    }
+
+    unsafe {
+        __mlibc_errno = e;
+    }
+}
+
+#[cfg(target_os = "aero")]
+pub fn current_exe() -> io::Result<PathBuf> {
+    unimplemented!()
+}
+
 #[cfg(target_os = "vxworks")]
 pub fn errno() -> i32 {
     unsafe { libc::errnoGet() }
diff --git rust-host-clean/library/std/src/sys/unix/thread.rs rust-host-workdir/library/std/src/sys/unix/thread.rs
index 29db946..d8b595d 100644
--- rust-host-clean/library/std/src/sys/unix/thread.rs
+++ rust-host-workdir/library/std/src/sys/unix/thread.rs
@@ -116,6 +116,13 @@ impl Thread {
         debug_assert_eq!(ret, 0);
     }
 
+    #[cfg(target_os = "aero")]
+    pub fn set_name(name: &CStr) {
+        unsafe {
+            libc::pthread_setname_np(libc::pthread_self(), name.as_ptr());
+        }
+    }
+
     #[cfg(target_os = "android")]
     pub fn set_name(name: &CStr) {
         const PR_SET_NAME: libc::c_int = 15;
diff --git rust-host-clean/library/std/src/sys/unix/thread_local_dtor.rs rust-host-workdir/library/std/src/sys/unix/thread_local_dtor.rs
index 06399e8..297032e 100644
--- rust-host-clean/library/std/src/sys/unix/thread_local_dtor.rs
+++ rust-host-workdir/library/std/src/sys/unix/thread_local_dtor.rs
@@ -12,7 +12,7 @@
 // compiling from a newer linux to an older linux, so we also have a
 // fallback implementation to use as well.
 #[allow(unexpected_cfgs)]
-#[cfg(any(target_os = "linux", target_os = "fuchsia", target_os = "redox", target_os = "hurd"))]
+#[cfg(any(target_os = "linux", target_os = "fuchsia", target_os = "redox", target_os = "hurd", target_os = "aero"))]
 // FIXME: The Rust compiler currently omits weakly function definitions (i.e.,
 // __cxa_thread_atexit_impl) and its metadata from LLVM IR.
 #[no_sanitize(cfi, kcfi)]
