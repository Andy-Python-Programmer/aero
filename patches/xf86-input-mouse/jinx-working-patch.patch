diff --git xf86-input-mouse-clean/configure.ac xf86-input-mouse-workdir/configure.ac
index 1d871b2..63361c7 100644
--- xf86-input-mouse-clean/configure.ac
+++ xf86-input-mouse-workdir/configure.ac
@@ -84,6 +84,9 @@ case $host_os in
   gnu*)
     OS_MOUSE_NAME=hurd
     ;;
+  aero*)
+    OS_MOUSE_NAME=aero
+    ;;
 esac
 AC_SUBST([OS_MOUSE_NAME])
 
diff --git xf86-input-mouse-workdir/src/aero_mouse.c xf86-input-mouse-workdir/src/aero_mouse.c
new file mode 100644
index 0000000..5247c21
--- /dev/null
+++ xf86-input-mouse-workdir/src/aero_mouse.c
@@ -0,0 +1,115 @@
+#include "mouse.h"
+#include <fcntl.h>
+#include <stddef.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <sys/stat.h>
+
+#include "xf86_OSlib.h"
+
+#define MOUSE_FLAG_LB (1 << 0)
+#define MOUSE_FLAG_RB (1 << 1)
+#define MOUSE_FLAG_MB (1 << 2)
+
+#define DEVPATH "/dev/mouse0"
+
+struct mouse_packet {
+    int16_t x;
+    int16_t y;
+
+    uint8_t flags;
+};
+
+static void MouseReadInput(InputInfoPtr pInfo) {
+    MouseDevPtr mouse = pInfo->private;
+
+    struct mouse_packet packet;
+    
+    for (;;) {
+        size_t result = read(pInfo->fd, &packet, sizeof(struct mouse_packet));
+
+        if (result != sizeof(struct mouse_packet)) {
+            break; 
+        }
+        
+        int b = mouse->lastButtons;
+        b &= ~0x7;
+
+        b |= (packet.flags & MOUSE_FLAG_RB) ? 1 : 0;
+        b |= (packet.flags & MOUSE_FLAG_MB) ? 2 : 0;
+        b |= (packet.flags & MOUSE_FLAG_LB) ? 4 : 0;
+
+        mouse->PostEvent(pInfo, b, packet.x, -packet.y, 0, 0);
+    }
+}
+
+static Bool OsMousePreInit(InputInfoPtr pInfo, const char *protocol, int flags) {
+    MouseDevPtr mouse = pInfo->private;
+    mouse->protocol = protocol;
+
+    xf86ProcessCommonOptions(pInfo, pInfo->options);
+
+    pInfo->fd = xf86OpenSerial(pInfo->options);
+    if (pInfo->fd == -1) {
+        xf86Msg(X_ERROR, "%s: cannot open %s\n", pInfo->name, DEVPATH);
+        return FALSE;
+    }
+
+    mouse->CommonOptions(pInfo);
+    pInfo->read_input = MouseReadInput;
+    return TRUE;
+}
+
+static const char *internalNames[] = {
+    "Aero",
+    NULL
+};
+
+static const char ** BuiltinNames(void) {
+    return internalNames;
+}
+
+static Bool CheckProtocol(const char *protocol) {
+    for (int i = 0; internalNames[i]; i++) {
+        if (xf86NameCmp(protocol, internalNames[i]) == 0)
+            return TRUE;
+    }
+
+    return FALSE;
+}
+
+static const char *FindDevice(InputInfoPtr pInfo, const char *protocol, int flags) {
+    struct stat st;
+
+    if (stat(DEVPATH, &st) == -1)
+        return NULL;
+
+    pInfo->options = xf86AddNewOption(pInfo->options, "Device", DEVPATH);
+    return DEVPATH;
+}
+
+static const char *DefaultProtocol(void) {
+    return "Aero";
+}
+
+static int SupportedInterfaces(void) {
+    return MSE_PS2;
+}
+
+OSMouseInfoPtr OSMouseInit(int flags) {
+    OSMouseInfoPtr p;
+
+    p = calloc(sizeof(OSMouseInfoRec), 1);
+    if (p == NULL)
+        return NULL;
+
+    p->SupportedInterfaces = SupportedInterfaces;
+    p->BuiltinNames = BuiltinNames;
+    p->FindDevice = FindDevice;
+    p->DefaultProtocol = DefaultProtocol;
+    p->CheckProtocol = CheckProtocol;
+    p->PreInit = OsMousePreInit;
+
+    return p;
+}
