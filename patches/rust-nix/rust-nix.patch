From 2ac82af89ae503c8743dcd96bca3dcbddccd1eea Mon Sep 17 00:00:00 2001
From: Dennis Bonke <admin@dennisbonke.com>
Date: Thu, 23 Feb 2023 00:41:07 +0100
Subject: [PATCH] aero: initial port

Signed-off-by: Dennis Bonke <admin@dennisbonke.com>
---
 src/errno.rs           | 218 +++++++++++++++++++++++++++++++++++++++++
 src/features.rs        |   2 +-
 src/lib.rs             |  10 +-
 src/sys/mod.rs         |  10 +-
 src/sys/resource.rs    |   2 +
 src/sys/signal.rs      |  16 +--
 src/sys/socket/addr.rs |  26 +++--
 src/sys/socket/mod.rs  |   6 +-
 src/sys/termios.rs     |  54 +++++++++-
 src/sys/time.rs        |   3 +-
 src/sys/timerfd.rs     |   2 +-
 src/unistd.rs          |  30 ++++++
 12 files changed, 350 insertions(+), 29 deletions(-)

diff --git a/src/errno.rs b/src/errno.rs
index 41420e8..aedf294 100644
--- a/src/errno.rs
+++ b/src/errno.rs
@@ -22,6 +22,7 @@ cfg_if! {
     } else if #[cfg(any(target_os = "linux",
                         target_os = "redox",
                         target_os = "dragonfly",
+                        target_os = "aero",
                         target_os = "fuchsia"))] {
         unsafe fn errno_location() -> *mut c_int {
             libc::__errno_location()
@@ -183,6 +184,9 @@ fn last() -> Errno {
 
 fn desc(errno: Errno) -> &'static str {
     use self::Errno::*;
+    // TODO: This is completely broken on aero
+    #[allow(unreachable_patterns)]
+    #[allow(unused_variables)]
     match errno {
         UnknownErrno    => "Unknown errno",
         EPERM           => "Operation not permitted",
@@ -1562,6 +1566,220 @@ mod consts {
     }
 }
 
+#[cfg(target_os = "aero")]
+mod consts {
+    #[derive(Clone, Copy, Debug, Eq, PartialEq)]
+    #[repr(i32)]
+    pub enum Errno {
+        UnknownErrno    = 0,
+        E2BIG           = libc::E2BIG,
+        EACCES          = libc::EACCES,
+        EADDRINUSE      = libc::EADDRINUSE,
+        EADDRNOTAVAIL   = libc::EADDRNOTAVAIL,
+        // EAFNOSUPPORT    = libc::EAFNOSUPPORT,
+        EAGAIN          = libc::EAGAIN,
+        // EALREADY        = libc::EALREADY,
+        // EAUTH           = libc::EAUTH,
+        EBADF           = libc::EBADF,
+        // EBADMSG         = libc::EBADMSG,
+        // EBADRPC         = libc::EBADRPC,
+        // EBUSY           = libc::EBUSY,
+        // ECANCELED       = libc::ECANCELED,
+        // ECHILD          = libc::ECHILD,
+        ECONNABORTED    = libc::ECONNABORTED,
+        ECONNREFUSED    = libc::ECONNREFUSED,
+        ECONNRESET      = libc::ECONNRESET,
+        EDEADLK         = libc::EDEADLK,
+        // EDESTADDRREQ    = libc::EDESTADDRREQ,
+        // EDOM            = libc::EDOM,
+        // EDQUOT          = libc::EDQUOT,
+        EEXIST          = libc::EEXIST,
+        // EFAULT          = libc::EFAULT,
+        // EFBIG           = libc::EFBIG,
+        // EFTYPE          = libc::EFTYPE,
+        // EHOSTDOWN       = libc::EHOSTDOWN,
+        // EHOSTUNREACH    = libc::EHOSTUNREACH,
+        // EIDRM           = libc::EIDRM,
+        // EILSEQ          = libc::EILSEQ,
+        EINPROGRESS     = libc::EINPROGRESS,
+        EINTR           = libc::EINTR,
+        EINVAL          = libc::EINVAL,
+        // EIO             = libc::EIO,
+        // EISCONN         = libc::EISCONN,
+        // EISDIR          = libc::EISDIR,
+        // ELOOP           = libc::ELOOP,
+        // EMFILE          = libc::EMFILE,
+        // EMLINK          = libc::EMLINK,
+        // EMSGSIZE        = libc::EMSGSIZE,
+        // EMULTIHOP       = libc::EMULTIHOP,
+        ENAMETOOLONG    = libc::ENAMETOOLONG,
+        // ENEEDAUTH       = libc::ENEEDAUTH,
+        // ENETDOWN        = libc::ENETDOWN,
+        // ENETRESET       = libc::ENETRESET,
+        // ENETUNREACH     = libc::ENETUNREACH,
+        // ENFILE          = libc::ENFILE,
+        // ENOATTR         = libc::ENOATTR,
+        // ENOBUFS         = libc::ENOBUFS,
+        // ENODATA         = libc::ENODATA,
+        // ENODEV          = libc::ENODEV,
+        ENOENT          = libc::ENOENT,
+        // ENOEXEC         = libc::ENOEXEC,
+        // ENOLCK          = libc::ENOLCK,
+        // ENOLINK         = libc::ENOLINK,
+        // ENOMEM          = libc::ENOMEM,
+        // ENOMSG          = libc::ENOMSG,
+        // ENOPROTOOPT     = libc::ENOPROTOOPT,
+        // ENOSPC          = libc::ENOSPC,
+        // ENOSR           = libc::ENOSR,
+        // ENOSTR          = libc::ENOSTR,
+        ENOSYS          = libc::ENOSYS,
+        // ENOTBLK         = libc::ENOTBLK,
+        ENOTCONN        = libc::ENOTCONN,
+        // ENOTDIR         = libc::ENOTDIR,
+        // ENOTEMPTY       = libc::ENOTEMPTY,
+        // ENOTSOCK        = libc::ENOTSOCK,
+        ENOTSUP         = libc::ENOTSUP,
+        ENOTTY          = libc::ENOTTY,
+        // ENXIO           = libc::ENXIO,
+        // EOPNOTSUPP      = libc::EOPNOTSUPP,
+        // EOVERFLOW       = libc::EOVERFLOW,
+        EPERM           = libc::EPERM,
+        // EPFNOSUPPORT    = libc::EPFNOSUPPORT,
+        EPIPE           = libc::EPIPE,
+        // EPROCLIM        = libc::EPROCLIM,
+        // EPROCUNAVAIL    = libc::EPROCUNAVAIL,
+        // EPROGMISMATCH   = libc::EPROGMISMATCH,
+        // EPROGUNAVAIL    = libc::EPROGUNAVAIL,
+        EPROTO          = libc::EPROTO,
+        // EPROTONOSUPPORT = libc::EPROTONOSUPPORT,
+        // EPROTOTYPE      = libc::EPROTOTYPE,
+        ERANGE          = libc::ERANGE,
+        // EREMOTE         = libc::EREMOTE,
+        // EROFS           = libc::EROFS,
+        // ERPCMISMATCH    = libc::ERPCMISMATCH,
+        // ESHUTDOWN       = libc::ESHUTDOWN,
+        // ESOCKTNOSUPPORT = libc::ESOCKTNOSUPPORT,
+        // ESPIPE          = libc::ESPIPE,
+        // ESRCH           = libc::ESRCH,
+        // ESTALE          = libc::ESTALE,
+        // ETIME           = libc::ETIME,
+        ETIMEDOUT       = libc::ETIMEDOUT,
+        // ETOOMANYREFS    = libc::ETOOMANYREFS,
+        // ETXTBSY         = libc::ETXTBSY,
+        // EUSERS          = libc::EUSERS,
+        // EXDEV           = libc::EXDEV,
+    }
+
+    // pub const ELAST: Errno       = Errno::ENOTSUP;
+    pub const EWOULDBLOCK: Errno = Errno::EAGAIN;
+
+    // pub const EL2NSYNC: Errno = Errno::UnknownErrno;
+
+    pub const fn from_i32(e: i32) -> Errno {
+        use self::Errno::*;
+
+        match e {
+            // libc::E2BIG => E2BIG,
+            libc::EACCES => EACCES,
+            libc::EADDRINUSE => EADDRINUSE,
+            libc::EADDRNOTAVAIL => EADDRNOTAVAIL,
+            // libc::EAFNOSUPPORT => EAFNOSUPPORT,
+            libc::EAGAIN => EAGAIN,
+            // libc::EALREADY => EALREADY,
+            // libc::EAUTH => EAUTH,
+            libc::EBADF => EBADF,
+            // libc::EBADMSG => EBADMSG,
+            // libc::EBADRPC => EBADRPC,
+            // libc::EBUSY => EBUSY,
+            // libc::ECANCELED => ECANCELED,
+            // libc::ECHILD => ECHILD,
+            libc::ECONNABORTED => ECONNABORTED,
+            libc::ECONNREFUSED => ECONNREFUSED,
+            libc::ECONNRESET => ECONNRESET,
+            libc::EDEADLK => EDEADLK,
+            // libc::EDESTADDRREQ => EDESTADDRREQ,
+            // libc::EDOM => EDOM,
+            // libc::EDQUOT => EDQUOT,
+            libc::EEXIST => EEXIST,
+            // libc::EFAULT => EFAULT,
+            // libc::EFBIG => EFBIG,
+            // libc::EFTYPE => EFTYPE,
+            // libc::EHOSTDOWN => EHOSTDOWN,
+            // libc::EHOSTUNREACH => EHOSTUNREACH,
+            // libc::EIDRM => EIDRM,
+            // libc::EILSEQ => EILSEQ,
+            libc::EINPROGRESS => EINPROGRESS,
+            libc::EINTR => EINTR,
+            libc::EINVAL => EINVAL,
+            // libc::EIO => EIO,
+            // libc::EISCONN => EISCONN,
+            // libc::EISDIR => EISDIR,
+            // libc::ELOOP => ELOOP,
+            // libc::EMFILE => EMFILE,
+            // libc::EMLINK => EMLINK,
+            // libc::EMSGSIZE => EMSGSIZE,
+            // libc::EMULTIHOP => EMULTIHOP,
+            libc::ENAMETOOLONG => ENAMETOOLONG,
+            // libc::ENEEDAUTH => ENEEDAUTH,
+            // libc::ENETDOWN => ENETDOWN,
+            // libc::ENETRESET => ENETRESET,
+            // libc::ENETUNREACH => ENETUNREACH,
+            // libc::ENFILE => ENFILE,
+            // libc::ENOATTR => ENOATTR,
+            // libc::ENOBUFS => ENOBUFS,
+            // libc::ENODATA => ENODATA,
+            // libc::ENODEV => ENODEV,
+            libc::ENOENT => ENOENT,
+            // libc::ENOEXEC => ENOEXEC,
+            // libc::ENOLCK => ENOLCK,
+            // libc::ENOLINK => ENOLINK,
+            // libc::ENOMEM => ENOMEM,
+            // libc::ENOMSG => ENOMSG,
+            // libc::ENOPROTOOPT => ENOPROTOOPT,
+            // libc::ENOSPC => ENOSPC,
+            // libc::ENOSR => ENOSR,
+            // libc::ENOSTR => ENOSTR,
+            libc::ENOSYS => ENOSYS,
+            // libc::ENOTBLK => ENOTBLK,
+            libc::ENOTCONN => ENOTCONN,
+            // libc::ENOTDIR => ENOTDIR,
+            // libc::ENOTEMPTY => ENOTEMPTY,
+            // libc::ENOTSOCK => ENOTSOCK,
+            libc::ENOTSUP => ENOTSUP,
+            // libc::ENOTTY => ENOTTY,
+            // libc::ENXIO => ENXIO,
+            // libc::EOPNOTSUPP => EOPNOTSUPP,
+            // libc::EOVERFLOW => EOVERFLOW,
+            libc::EPERM => EPERM,
+            // libc::EPFNOSUPPORT => EPFNOSUPPORT,
+            libc::EPIPE => EPIPE,
+            // libc::EPROCLIM => EPROCLIM,
+            // libc::EPROCUNAVAIL => EPROCUNAVAIL,
+            // libc::EPROGMISMATCH => EPROGMISMATCH,
+            // libc::EPROGUNAVAIL => EPROGUNAVAIL,
+            // libc::EPROTO => EPROTO,
+            // libc::EPROTONOSUPPORT => EPROTONOSUPPORT,
+            // libc::EPROTOTYPE => EPROTOTYPE,
+            libc::ERANGE => ERANGE,
+            // libc::EREMOTE => EREMOTE,
+            // libc::EROFS => EROFS,
+            // libc::ERPCMISMATCH => ERPCMISMATCH,
+            // libc::ESHUTDOWN => ESHUTDOWN,
+            // libc::ESOCKTNOSUPPORT => ESOCKTNOSUPPORT,
+            // libc::ESPIPE => ESPIPE,
+            // libc::ESRCH => ESRCH,
+            // libc::ESTALE => ESTALE,
+            // libc::ETIME => ETIME,
+            libc::ETIMEDOUT => ETIMEDOUT,
+            // libc::ETOOMANYREFS => ETOOMANYREFS,
+            // libc::ETXTBSY => ETXTBSY,
+            // libc::EUSERS => EUSERS,
+            // libc::EXDEV => EXDEV,
+             _   => UnknownErrno,
+         }
+     }
+}
+
 
 #[cfg(target_os = "dragonfly")]
 mod consts {
diff --git a/src/features.rs b/src/features.rs
index 6108098..1f937e2 100644
--- a/src/features.rs
+++ b/src/features.rs
@@ -1,7 +1,7 @@
 //! Feature tests for OS functionality
 pub use self::os::*;
 
-#[cfg(any(target_os = "linux", target_os = "android"))]
+#[cfg(any(target_os = "linux", target_os = "android", target_os = "aero"))]
 mod os {
     use std::os::unix::ffi::OsStrExt;
     use crate::sys::utsname::uname;
diff --git a/src/lib.rs b/src/lib.rs
index d4dcbc4..e5f03c7 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -43,9 +43,10 @@
 #![cfg(unix)]
 #![cfg_attr(docsrs, doc(cfg(all())))]
 #![allow(non_camel_case_types)]
+#![allow(non_snake_case)]
 #![cfg_attr(test, deny(warnings))]
 #![recursion_limit = "500"]
-#![deny(unused)]
+// #![deny(unused)]
 #![allow(unused_macros)]
 #![cfg_attr(not(feature = "default"), allow(unused_imports))]
 #![deny(unstable_features)]
@@ -62,12 +63,13 @@ pub use libc;
 #[macro_use] mod macros;
 
 // Public crates
-#[cfg(not(target_os = "redox"))]
+#[cfg(not(any(target_os = "redox", target_os = "aero")))]
 feature! {
     #![feature = "dir"]
     #[allow(missing_docs)]
     pub mod dir;
 }
+#[cfg(not(target_os = "aero"))]
 feature! {
     #![feature = "env"]
     pub mod env;
@@ -96,7 +98,7 @@ feature! {
               target_os = "openbsd"))]
     #[deny(missing_docs)]
     pub mod ifaddrs;
-    #[cfg(not(target_os = "redox"))]
+    #[cfg(not(any(target_os = "redox", target_os = "aero")))]
     #[deny(missing_docs)]
     pub mod net;
 }
@@ -124,6 +126,7 @@ feature! {
     #[allow(missing_docs)]
     pub mod mqueue;
 }
+#[cfg(not(target_os = "aero"))]
 feature! {
     #![feature = "poll"]
     pub mod poll;
@@ -134,6 +137,7 @@ feature! {
     #[deny(missing_docs)]
     pub mod pty;
 }
+#[cfg(not(target_os = "aero"))]
 feature! {
     #![feature = "sched"]
     pub mod sched;
diff --git a/src/sys/mod.rs b/src/sys/mod.rs
index e5639f2..2cbdff5 100644
--- a/src/sys/mod.rs
+++ b/src/sys/mod.rs
@@ -13,7 +13,7 @@ feature! {
 feature! {
     #![feature = "event"]
 
-    #[cfg(any(target_os = "android", target_os = "linux"))]
+    #[cfg(any(target_os = "android", target_os = "linux", target_os = "aero"))]
     #[allow(missing_docs)]
     pub mod epoll;
 
@@ -64,6 +64,7 @@ feature! {
     pub mod personality;
 }
 
+#[cfg(not(target_os = "aero"))]
 feature! {
     #![feature = "pthread"]
     pub mod pthread;
@@ -100,7 +101,7 @@ feature! {
     pub mod resource;
 }
 
-#[cfg(not(target_os = "redox"))]
+#[cfg(not(any(target_os = "redox", target_os = "aero")))]
 feature! {
     #![feature = "poll"]
     pub mod select;
@@ -152,6 +153,7 @@ feature! {
     pub mod statfs;
 }
 
+#[cfg(not(target_os = "aero"))]
 feature! {
     #![feature = "fs"]
     pub mod statvfs;
@@ -181,6 +183,7 @@ feature! {
     pub mod utsname;
 }
 
+#[cfg(not(target_os = "aero"))]
 feature! {
     #![feature = "process"]
     pub mod wait;
@@ -192,7 +195,7 @@ feature! {
     pub mod inotify;
 }
 
-#[cfg(any(target_os = "android", target_os = "linux"))]
+#[cfg(any(target_os = "android", target_os = "linux", target_os = "aero"))]
 feature! {
     #![feature = "time"]
     pub mod timerfd;
@@ -203,6 +206,7 @@ feature! {
         target_os = "freebsd",
         target_os = "illumos",
         target_os = "linux",
+        target_os = "aero",
         target_os = "netbsd"
     ),
     feature = "time",
diff --git a/src/sys/resource.rs b/src/sys/resource.rs
index 76ceaf5..3457acd 100644
--- a/src/sys/resource.rs
+++ b/src/sys/resource.rs
@@ -14,6 +14,7 @@ cfg_if! {
         target_os = "openbsd",
         target_os = "netbsd",
         target_os = "macos",
+        target_os = "aero",
         target_os = "ios",
         target_os = "android",
         target_os = "dragonfly",
@@ -48,6 +49,7 @@ libc_enum! {
             target_os = "ios",
             target_os = "android",
             target_os = "dragonfly",
+            target_os = "aero",
             all(target_os = "linux", not(any(target_env = "gnu", target_env = "uclibc")))
         ), repr(i32))]
     #[non_exhaustive]
diff --git a/src/sys/signal.rs b/src/sys/signal.rs
index f982b4e..5621b6f 100644
--- a/src/sys/signal.rs
+++ b/src/sys/signal.rs
@@ -99,13 +99,13 @@ libc_enum!{
         SIGSYS,
         #[cfg(not(any(target_os = "android", target_os = "emscripten",
                       target_os = "fuchsia", target_os = "linux",
-                      target_os = "redox")))]
+                      target_os = "redox", target_os = "aero")))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         /// Emulator trap
         SIGEMT,
         #[cfg(not(any(target_os = "android", target_os = "emscripten",
                       target_os = "fuchsia", target_os = "linux",
-                      target_os = "redox")))]
+                      target_os = "redox", target_os = "aero")))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         /// Information request
         SIGINFO,
@@ -157,11 +157,11 @@ impl FromStr for Signal {
             "SIGSYS" => Signal::SIGSYS,
             #[cfg(not(any(target_os = "android", target_os = "emscripten",
                           target_os = "fuchsia", target_os = "linux",
-                          target_os = "redox")))]
+                          target_os = "redox", target_os = "aero")))]
             "SIGEMT" => Signal::SIGEMT,
             #[cfg(not(any(target_os = "android", target_os = "emscripten",
                           target_os = "fuchsia", target_os = "linux",
-                          target_os = "redox")))]
+                          target_os = "redox", target_os = "aero")))]
             "SIGINFO" => Signal::SIGINFO,
             _ => return Err(Errno::EINVAL),
         })
@@ -215,11 +215,11 @@ impl Signal {
             Signal::SIGSYS => "SIGSYS",
             #[cfg(not(any(target_os = "android", target_os = "emscripten",
                           target_os = "fuchsia", target_os = "linux",
-                          target_os = "redox")))]
+                          target_os = "redox", target_os = "aero")))]
             Signal::SIGEMT => "SIGEMT",
             #[cfg(not(any(target_os = "android", target_os = "emscripten",
                           target_os = "fuchsia", target_os = "linux",
-                          target_os = "redox")))]
+                          target_os = "redox", target_os = "aero")))]
             Signal::SIGINFO => "SIGINFO",
         }
     }
@@ -242,7 +242,7 @@ impl fmt::Display for Signal {
 #[cfg(feature = "signal")]
 pub use self::Signal::*;
 
-#[cfg(target_os = "redox")]
+#[cfg(any(target_os = "redox", target_os = "aero"))]
 #[cfg(feature = "signal")]
 const SIGNALS: [Signal; 29] = [
     SIGHUP,
@@ -349,7 +349,7 @@ const SIGNALS: [Signal; 30] = [
     SIGSYS];
 #[cfg(not(any(target_os = "linux", target_os = "android",
               target_os = "fuchsia", target_os = "emscripten",
-              target_os = "redox")))]
+              target_os = "redox", target_os = "aero")))]
 #[cfg(feature = "signal")]
 const SIGNALS: [Signal; 31] = [
     SIGHUP,
diff --git a/src/sys/socket/addr.rs b/src/sys/socket/addr.rs
index 4b8ab09..f23da26 100644
--- a/src/sys/socket/addr.rs
+++ b/src/sys/socket/addr.rs
@@ -19,6 +19,7 @@ use std::os::unix::io::RawFd;
 use crate::sys::socket::addr::sys_control::SysControlAddr;
 #[cfg(any(target_os = "android",
           target_os = "dragonfly",
+          target_os = "aero",
           target_os = "freebsd",
           target_os = "ios",
           target_os = "linux",
@@ -76,6 +77,7 @@ pub enum AddressFamily {
     /// Low level packet interface (see [`packet(7)`](https://man7.org/linux/man-pages/man7/packet.7.html))
     #[cfg(any(target_os = "android",
               target_os = "linux",
+              target_os = "aero",
               target_os = "illumos",
               target_os = "fuchsia",
               target_os = "solaris"))]
@@ -376,7 +378,7 @@ impl AddressFamily {
             libc::AF_NETLINK => Some(AddressFamily::Netlink),
             #[cfg(any(target_os = "macos", target_os = "macos"))]
             libc::AF_SYSTEM => Some(AddressFamily::System),
-            #[cfg(any(target_os = "android", target_os = "linux"))]
+            #[cfg(any(target_os = "android", target_os = "linux", target_os = "aero"))]
             libc::AF_PACKET => Some(AddressFamily::Packet),
             #[cfg(any(target_os = "dragonfly",
                       target_os = "freebsd",
@@ -707,7 +709,8 @@ pub struct UnixAddr {
     #[cfg(any(target_os = "android",
               target_os = "fuchsia",
               target_os = "illumos",
-              target_os = "linux"
+              target_os = "linux",
+              target_os = "aero"
     ))]
     sun_len: u8
 }
@@ -842,7 +845,8 @@ impl UnixAddr {
             if #[cfg(any(target_os = "android",
                      target_os = "fuchsia",
                      target_os = "illumos",
-                     target_os = "linux"
+                     target_os = "linux",
+                     target_os = "aero"
                 ))]
             {
                 UnixAddr { sun, sun_len }
@@ -900,7 +904,8 @@ impl UnixAddr {
             if #[cfg(any(target_os = "android",
                      target_os = "fuchsia",
                      target_os = "illumos",
-                     target_os = "linux"
+                     target_os = "linux",
+                     target_os = "aero"
                 ))]
             {
                 self.sun_len
@@ -940,6 +945,7 @@ impl SockaddrLike for UnixAddr {
         cfg_if!{
             if #[cfg(any(target_os = "android",
                          target_os = "fuchsia",
+                         target_os = "aero",
                          target_os = "illumos",
                          target_os = "linux"
                 ))] {
@@ -1817,6 +1823,7 @@ pub enum SockAddr {
     /// Datalink address (MAC)
     #[cfg(any(target_os = "android",
               target_os = "dragonfly",
+              target_os = "aero",
               target_os = "freebsd",
               target_os = "ios",
               target_os = "linux",
@@ -1886,7 +1893,7 @@ impl SockAddr {
             #[cfg(all(feature = "ioctl",
                       any(target_os = "ios", target_os = "macos")))]
             SockAddr::SysControl(..) => AddressFamily::System,
-            #[cfg(any(target_os = "android", target_os = "linux"))]
+            #[cfg(any(target_os = "android", target_os = "linux", target_os = "aero"))]
             #[cfg(feature = "net")]
             SockAddr::Link(..) => AddressFamily::Packet,
             #[cfg(any(target_os = "dragonfly",
@@ -1923,7 +1930,7 @@ impl SockAddr {
         if addr.is_null() {
             None
         } else {
-            match AddressFamily::from_i32(i32::from((*addr).sa_family)) {
+            match AddressFamily::from_i32((*addr).sa_family as i32) {
                 Some(AddressFamily::Unix) => None,
                 #[cfg(feature = "net")]
                 Some(AddressFamily::Inet) => Some(SockAddr::Inet(
@@ -1938,7 +1945,7 @@ impl SockAddr {
                           any(target_os = "ios", target_os = "macos")))]
                 Some(AddressFamily::System) => Some(SockAddr::SysControl(
                     SysControlAddr(*(addr as *const libc::sockaddr_ctl)))),
-                #[cfg(any(target_os = "android", target_os = "linux"))]
+                #[cfg(any(target_os = "android", target_os = "linux", target_os = "aero"))]
                 #[cfg(feature = "net")]
                 Some(AddressFamily::Packet) => Some(SockAddr::Link(
                     LinkAddr(*(addr as *const libc::sockaddr_ll)))),
@@ -2026,7 +2033,7 @@ impl SockAddr {
                 mem::size_of_val(sa) as libc::socklen_t
 
             ),
-            #[cfg(any(target_os = "android", target_os = "linux"))]
+            #[cfg(any(target_os = "android", target_os = "linux", target_os = "aero"))]
             #[cfg(feature = "net")]
             SockAddr::Link(LinkAddr(ref addr)) => (
                 // This cast is always allowed in C
@@ -2077,6 +2084,7 @@ impl fmt::Display for SockAddr {
                       any(target_os = "ios", target_os = "macos")))]
             SockAddr::SysControl(ref sc) => sc.fmt(f),
             #[cfg(any(target_os = "android",
+                      target_os = "aero",
                       target_os = "dragonfly",
                       target_os = "freebsd",
                       target_os = "ios",
@@ -2381,7 +2389,7 @@ pub mod sys_control {
 }
 
 
-#[cfg(any(target_os = "android", target_os = "linux", target_os = "fuchsia"))]
+#[cfg(any(target_os = "android", target_os = "linux", target_os = "fuchsia", target_os = "aero"))]
 #[cfg_attr(docsrs, doc(cfg(all())))]
 mod datalink {
     feature! {
diff --git a/src/sys/socket/mod.rs b/src/sys/socket/mod.rs
index 3f26ccf..c83182b 100644
--- a/src/sys/socket/mod.rs
+++ b/src/sys/socket/mod.rs
@@ -344,6 +344,7 @@ libc_bitflags!{
         ///
         /// Only used in [`recvmsg`](fn.recvmsg.html) function.
         #[cfg(any(target_os = "android",
+                  target_os = "aero",
                   target_os = "dragonfly",
                   target_os = "freebsd",
                   target_os = "linux",
@@ -355,6 +356,7 @@ libc_bitflags!{
         /// (For more details, see [send(2)](https://linux.die.net/man/2/send)).
         #[cfg(any(target_os = "android",
                   target_os = "dragonfly",
+                  target_os = "aero",
                   target_os = "freebsd",
                   target_os = "fuchsia",
                   target_os = "haiku",
@@ -1139,13 +1141,13 @@ impl<'a> ControlMessage<'a> {
 
     /// The value of CMSG_LEN on this message.
     /// Safe because CMSG_LEN is always safe
-    #[cfg(any(target_os = "android",
+    #[cfg(any(target_os = "android", target_os = "aero",
               all(target_os = "linux", not(target_env = "musl"))))]
     fn cmsg_len(&self) -> usize {
         unsafe{CMSG_LEN(self.len() as libc::c_uint) as usize}
     }
 
-    #[cfg(not(any(target_os = "android",
+    #[cfg(not(any(target_os = "android", target_os = "aero",
                   all(target_os = "linux", not(target_env = "musl")))))]
     fn cmsg_len(&self) -> libc::c_uint {
         unsafe{CMSG_LEN(self.len() as libc::c_uint)}
diff --git a/src/sys/termios.rs b/src/sys/termios.rs
index a107f8b..6a9453e 100644
--- a/src/sys/termios.rs
+++ b/src/sys/termios.rs
@@ -375,10 +375,19 @@ impl From<BaudRate> for u32 {
 }
 
 // TODO: Add TCSASOFT, which will require treating this as a bitfield.
+#[cfg(target_os = "aero")]
 libc_enum! {
     /// Specify when a port configuration change should occur.
     ///
     /// Used as an argument to `tcsetattr()`
+    #[repr(i32)]
+    pub enum SetArg {
+        TCSANOW,
+    }
+}
+
+#[cfg(not(target_os = "aero"))]
+libc_enum! {
     #[repr(i32)]
     #[non_exhaustive]
     pub enum SetArg {
@@ -391,10 +400,19 @@ libc_enum! {
     }
 }
 
+#[cfg(target_os = "aero")]
 libc_enum! {
     /// Specify a combination of the input and output buffers to flush
     ///
     /// Used as an argument to `tcflush()`.
+    #[repr(i32)]
+    pub enum FlushArg {
+        TCIFLUSH,
+    }
+}
+
+#[cfg(not(target_os = "aero"))]
+libc_enum! {
     #[repr(i32)]
     #[non_exhaustive]
     pub enum FlushArg {
@@ -426,8 +444,17 @@ libc_enum! {
 }
 
 // TODO: Make this usable directly as a slice index.
+#[cfg(target_os = "aero")]
 libc_enum! {
     /// Indices into the `termios.c_cc` array for special characters.
+    #[repr(usize)]
+    pub enum SpecialCharacterIndices {
+        VEOF,
+    }
+}
+
+#[cfg(not(target_os = "aero"))]
+libc_enum! {
     #[repr(usize)]
     #[non_exhaustive]
     pub enum SpecialCharacterIndices {
@@ -524,7 +551,7 @@ libc_bitflags! {
         #[cfg(not(target_os = "redox"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         IXANY;
-        #[cfg(not(target_os = "redox"))]
+        #[cfg(not(any(target_os = "redox", target_os = "aero")))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
         IMAXBEL;
         #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
@@ -533,6 +560,15 @@ libc_bitflags! {
     }
 }
 
+#[cfg(target_os = "aero")]
+libc_bitflags! {
+    /// Flags for configuring the output mode of a terminal
+    pub struct OutputFlags: tcflag_t {
+        OPOST;
+    }
+}
+
+#[cfg(not(target_os = "aero"))]
 libc_bitflags! {
     /// Flags for configuring the output mode of a terminal
     pub struct OutputFlags: tcflag_t {
@@ -744,8 +780,16 @@ libc_bitflags! {
     }
 }
 
+#[cfg(target_os = "aero")]
 libc_bitflags! {
     /// Flags for setting the control mode of a terminal
+    pub struct ControlFlags: tcflag_t {
+        CS5;
+    }
+}
+
+#[cfg(not(target_os = "aero"))]
+lib_bitflags! {
     pub struct ControlFlags: tcflag_t {
         #[cfg(any(target_os = "dragonfly",
                   target_os = "freebsd",
@@ -824,8 +868,16 @@ libc_bitflags! {
     }
 }
 
+#[cfg(target_os = "aero")]
 libc_bitflags! {
     /// Flags for setting any local modes
+    pub struct LocalFlags: tcflag_t {
+        ECHO;
+    }
+}
+
+#[cfg(not(target_os = "aero"))]
+libc_bitflags! {
     pub struct LocalFlags: tcflag_t {
         #[cfg(not(target_os = "redox"))]
         #[cfg_attr(docsrs, doc(cfg(all())))]
diff --git a/src/sys/time.rs b/src/sys/time.rs
index c1ab67b..f43cf63 100644
--- a/src/sys/time.rs
+++ b/src/sys/time.rs
@@ -16,6 +16,7 @@ const TIMESPEC_ZERO: libc::timespec = unsafe {
             target_os = "freebsd",
             target_os = "illumos",
             target_os = "linux",
+            target_os = "aero",
             target_os = "netbsd"
         ),
         feature = "time",
@@ -82,7 +83,7 @@ pub(crate) mod timer {
         Interval(TimeSpec),
     }
 
-    #[cfg(any(target_os = "android", target_os = "linux"))]
+    #[cfg(any(target_os = "android", target_os = "linux", target_os = "aero"))]
     bitflags! {
         /// Flags that are used for arming the timer.
         pub struct TimerSetTimeFlags: libc::c_int {
diff --git a/src/sys/timerfd.rs b/src/sys/timerfd.rs
index 18acbae..0005b24 100644
--- a/src/sys/timerfd.rs
+++ b/src/sys/timerfd.rs
@@ -57,7 +57,7 @@ impl FromRawFd for TimerFd {
 libc_enum! {
     /// The type of the clock used to mark the progress of the timer. For more
     /// details on each kind of clock, please refer to [timerfd_create(2)](https://man7.org/linux/man-pages/man2/timerfd_create.2.html).
-    #[repr(i32)]
+    #[repr(i64)]
     #[non_exhaustive]
     pub enum ClockId {
         /// A settable system-wide real-time clock.
diff --git a/src/unistd.rs b/src/unistd.rs
index d6ccdf1..af3b4a0 100644
--- a/src/unistd.rs
+++ b/src/unistd.rs
@@ -1132,6 +1132,7 @@ feature! {
 /// See also [pipe(2)](https://man7.org/linux/man-pages/man2/pipe.2.html)
 #[cfg(any(target_os = "android",
           target_os = "dragonfly",
+          target_os = "aero",
           target_os = "emscripten",
           target_os = "freebsd",
           target_os = "illumos",
@@ -1550,6 +1551,7 @@ pub fn getgroups() -> Result<Vec<Gid>> {
 pub fn setgroups(groups: &[Gid]) -> Result<()> {
     cfg_if! {
         if #[cfg(any(target_os = "dragonfly",
+                     target_os = "aero",
                      target_os = "freebsd",
                      target_os = "illumos",
                      target_os = "ios",
@@ -1886,6 +1888,14 @@ feature! {
 /// - [pathconf(2)](https://pubs.opengroup.org/onlinepubs/9699919799/functions/pathconf.html)
 /// - [limits.h](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/limits.h.html)
 /// - [unistd.h](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/unistd.h.html)
+#[cfg(target_os = "aero")]
+#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
+#[repr(i32)]
+pub enum PathconfVar {
+    NAME_MAX = libc::_PC_NAME_MAX,
+}
+
+#[cfg(not(target_os = "aero"))]
 #[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
 #[repr(i32)]
 #[non_exhaustive]
@@ -2082,6 +2092,17 @@ feature! {
 /// - [sysconf(3)](https://pubs.opengroup.org/onlinepubs/9699919799/functions/sysconf.html)
 /// - [unistd.h](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/unistd.h.html)
 /// - [limits.h](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/limits.h.html)
+#[cfg(target_os = "aero")]
+#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
+#[repr(i32)]
+pub enum SysconfVar {
+    PAGE_SIZE = libc::_SC_PAGESIZE,
+    GETGR_R_SIZE_MAX = libc::_SC_GETGR_R_SIZE_MAX,
+    GETPW_R_SIZE_MAX = libc::_SC_GETPW_R_SIZE_MAX,
+    NGROUPS_MAX = libc::_SC_NGROUPS_MAX,
+}
+
+#[cfg(not(target_os = "aero"))]
 #[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
 #[repr(i32)]
 #[non_exhaustive]
@@ -2875,6 +2896,7 @@ pub struct User {
     /// Login class
     #[cfg(not(any(target_os = "android",
                   target_os = "fuchsia",
+                  target_os = "aero",
                   target_os = "illumos",
                   target_os = "linux",
                   target_os = "solaris")))]
@@ -2883,6 +2905,7 @@ pub struct User {
     /// Last password change
     #[cfg(not(any(target_os = "android",
                   target_os = "fuchsia",
+                  target_os = "aero",
                   target_os = "illumos",
                   target_os = "linux",
                   target_os = "solaris")))]
@@ -2891,6 +2914,7 @@ pub struct User {
     /// Expiration time of account
     #[cfg(not(any(target_os = "android",
                   target_os = "fuchsia",
+                  target_os = "aero",
                   target_os = "illumos",
                   target_os = "linux",
                   target_os = "solaris")))]
@@ -2913,18 +2937,21 @@ impl From<&libc::passwd> for User {
                 gid: Gid::from_raw(pw.pw_gid),
                 #[cfg(not(any(target_os = "android",
                               target_os = "fuchsia",
+                              target_os = "aero",
                               target_os = "illumos",
                               target_os = "linux",
                               target_os = "solaris")))]
                 class: CString::new(CStr::from_ptr(pw.pw_class).to_bytes()).unwrap(),
                 #[cfg(not(any(target_os = "android",
                               target_os = "fuchsia",
+                              target_os = "aero",
                               target_os = "illumos",
                               target_os = "linux",
                               target_os = "solaris")))]
                 change: pw.pw_change,
                 #[cfg(not(any(target_os = "android",
                               target_os = "fuchsia",
+                              target_os = "aero",
                               target_os = "illumos",
                               target_os = "linux",
                               target_os = "solaris")))]
@@ -2960,18 +2987,21 @@ impl From<User> for libc::passwd {
             pw_gid: u.gid.0,
             #[cfg(not(any(target_os = "android",
                           target_os = "fuchsia",
+                          target_os = "aero",
                           target_os = "illumos",
                           target_os = "linux",
                           target_os = "solaris")))]
             pw_class: u.class.into_raw(),
             #[cfg(not(any(target_os = "android",
                           target_os = "fuchsia",
+                          target_os = "aero",
                           target_os = "illumos",
                           target_os = "linux",
                           target_os = "solaris")))]
             pw_change: u.change,
             #[cfg(not(any(target_os = "android",
                           target_os = "fuchsia",
+                          target_os = "aero",
                           target_os = "illumos",
                           target_os = "linux",
                           target_os = "solaris")))]
-- 
2.39.1

